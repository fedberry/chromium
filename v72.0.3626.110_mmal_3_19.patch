--- a/base/memory/shared_memory_helper.cc
+++ b/base/memory/shared_memory_helper.cc
@@ -28,15 +28,37 @@
 using ScopedPathUnlinker =
     ScopedGeneric<const FilePath*, ScopedPathUnlinkerTraits>;
 
+#if defined(OS_LINUX)
+#include <sys/syscall.h>
+static inline int sys_memfd_create(const char * name, unsigned int flags)
+{
+  return (int)syscall(SYS_memfd_create, name, flags);
+}
+#endif
+
 #if !defined(OS_ANDROID)
 bool CreateAnonymousSharedMemory(const SharedMemoryCreateOptions& options,
                                  ScopedFD* fd,
                                  ScopedFD* readonly_fd,
                                  FilePath* path) {
+
 #if defined(OS_LINUX)
   // It doesn't make sense to have a open-existing private piece of shmem
   DCHECK(!options.open_existing_deprecated);
+
+  // If we have a simple RW request
+  if (!options.share_read_only) {
+    // Can't reopen as readonly from just an fd - though I guess we could
+    // just dup (or given ScopedFD simply copy) & ignore the fact it is RW
+    fd->reset(sys_memfd_create("chrome_shmem", 0));
+    if (!fd->is_valid()) {
+      PLOG(WARNING) << "memfd_create failed";
+      return false;
+    }
+    return true;
+  }
 #endif  // defined(OS_LINUX)
+
   // Q: Why not use the shm_open() etc. APIs?
   // A: Because they're limited to 4mb on OS X.  FFFFFFFUUUUUUUUUUU
   FilePath directory;
--- a/build/.gitignore
+++ b/build/.gitignore
@@ -19,6 +19,8 @@
 /x64/
 /linux/debian_*-sysroot/
 /linux/ubuntu_*-sysroot/
+/linux/ubuntu_*-sysroot/
+/linux/raspian_*-sysroot/
 /ios_files
 /mac_files
 
--- a/build/config/linux/BUILD.gn
+++ b/build/config/linux/BUILD.gn
@@ -38,6 +38,7 @@
     "X11",
     "X11-xcb",
     "xcb",
+    "xcb-shm",
     "Xcomposite",
     "Xcursor",
     "Xdamage",
@@ -47,6 +48,9 @@
     "Xrender",
     "Xtst",
   ]
+  if (current_cpu == "arm") {
+     libs += [ "xcb-image" ]
+  }
 }
 
 config("xcomposite") {
--- a/cc/layers/video_frame_provider.h
+++ b/cc/layers/video_frame_provider.h
@@ -93,6 +93,8 @@
   // frame missed its intended deadline.
   virtual void PutCurrentFrame() = 0;
 
+  virtual void DidStretchFrame(uint32_t width, uint32_t height) {}
+
  protected:
   virtual ~VideoFrameProvider() {}
 };
--- a/cc/mojo_embedder/async_layer_tree_frame_sink.h
+++ b/cc/mojo_embedder/async_layer_tree_frame_sink.h
@@ -135,6 +135,7 @@
   void OnBeginFramePausedChanged(bool paused) override;
   void ReclaimResources(
       const std::vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
 
   // ExternalBeginFrameSourceClient implementation.
   void OnNeedsBeginFrames(bool needs_begin_frames) override;
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -26,6 +26,7 @@
 import("//tools/v8_context_snapshot/v8_context_snapshot.gni")
 import("//ui/gl/features.gni")
 import("//v8/gni/v8.gni")
+import("//build/config/sysroot.gni")
 
 if (is_android) {
   import("//build/config/android/rules.gni")
@@ -302,6 +303,20 @@
         if (enable_mus) {
           deps += [ "//mash/common" ]
         }
+
+        # Add pi link stuff
+        # * is there a better place?
+        if (is_linux && target_cpu == "arm") {
+          ldflags += [
+            "-L$sysroot/opt/vc/lib",
+            "-Wl,--rpath=/opt/vc/lib,--rpath-link=$sysroot/opt/vc/lib",
+            "-Wl,--start-group", "-lbcm_host", "-lmmal", "-lmmal_util", "-lmmal_core", "-lmmal_vc_client", "-lvcos", "-lvcsm", "-lvchostif", "-lvchiq_arm", "-Wl,--end-group",
+          ]
+          if (symbol_level >= 2) {
+            # For debug symbols!
+            ldflags += [ "-Wl,--long-plt" ]
+          }
+        }
       }
 
       if (is_chromeos || is_win) {
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -51,6 +51,7 @@
 #include "components/services/heap_profiling/public/cpp/allocator_shim.h"
 #include "components/services/heap_profiling/public/cpp/stream.h"
 #include "components/tracing/common/tracing_sampler_profiler.h"
+#include "components/version_info/pi_patch_version_info.h"
 #include "components/version_info/version_info.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_paths.h"
@@ -329,6 +330,15 @@
   }
 #endif
 
+  if (command_line.HasSwitch(switches::kPiPatchVersion)) {
+    printf("%s %s %s\nPi patch: %s\n",
+           version_info::GetProductName().c_str(),
+           version_info::GetVersionNumber().c_str(),
+           chrome::GetChannelName().c_str(),
+           version_info::GetPiPatchVersionString().c_str());
+    return true;
+  }
+
   if (command_line.HasSwitch(switches::kVersion)) {
     printf("%s %s %s\n", version_info::GetProductName().c_str(),
            version_info::GetVersionNumber().c_str(),
--- a/chrome/common/chrome_switches.cc
+++ b/chrome/common/chrome_switches.cc
@@ -521,6 +521,9 @@
 // TODO(bauerb): Remove when this flag is not needed anymore.
 const char kPermissionRequestApiUrl[]       = "permission-request-api-url";
 
+// Print the patch version and return
+const char kPiPatchVersion[] = "pi-patch-version";
+
 // Use the PPAPI (Pepper) Flash found at the given path.
 const char kPpapiFlashPath[]                = "ppapi-flash-path";
 
--- a/chrome/common/chrome_switches.h
+++ b/chrome/common/chrome_switches.h
@@ -157,6 +157,7 @@
 extern const char kParentProfile[];
 extern const char kPermissionRequestApiScope[];
 extern const char kPermissionRequestApiUrl[];
+extern const char kPiPatchVersion[];
 extern const char kPpapiFlashPath[];
 extern const char kPpapiFlashVersion[];
 extern const char kPrivetIPv6Only[];
--- a/components/version_info/BUILD.gn
+++ b/components/version_info/BUILD.gn
@@ -15,6 +15,9 @@
   sources = [
     "version_info.cc",
     "version_info.h",
+    "pi_patch_version_info.cc",
+    "pi_patch_version_info.h",
+    "pi_patch_version_values.h",
   ]
 
   deps = [
--- /dev/null
+++ b/components/version_info/pi_patch_version_info.cc
@@ -0,0 +1,11 @@
+#include "components/version_info/pi_patch_version_info.h"
+#include "components/version_info/pi_patch_version_values.h"
+
+namespace version_info {
+
+std::string GetPiPatchVersionString() {
+  return PI_PATCH_VERSION_STRING;
+}
+
+}  // namespace version_info
+
--- /dev/null
+++ b/components/version_info/pi_patch_version_info.h
@@ -0,0 +1,12 @@
+#ifndef COMPONENTS_PI_PATCH_VERSION_INFO_VERSION_INFO_H_
+#define COMPONENTS_PI_PATCH_VERSION_INFO_VERSION_INFO_H_
+
+#include <string>
+
+namespace version_info {
+
+// Returns a string with the patch tag for our patches
+std::string GetPiPatchVersionString();
+
+}  // namespace version_info
+#endif  // COMPONENTS_VERSION_INFO_VERSION_INFO_H_
--- /dev/null
+++ b/components/version_info/pi_patch_version_values.h
@@ -0,0 +1,2 @@
+// Pi patch version - generated by pi-util/settag.py
+#define PI_PATCH_VERSION_STRING "mmal_3_19"
--- a/components/viz/common/resources/transferable_resource.h
+++ b/components/viz/common/resources/transferable_resource.h
@@ -92,6 +92,9 @@
   // and may be unset.
   gfx::Size size;
 
+  // Interline stride (for images) - 0 => not an image - use width
+  uint32_t stride = 0;
+
   // The format of the pixels in the gpu mailbox/software bitmap. This should
   // almost always be RGBA_8888 for resources generated by compositor clients,
   // and must be RGBA_8888 always for software resources.
--- a/components/viz/service/BUILD.gn
+++ b/components/viz/service/BUILD.gn
@@ -59,6 +59,8 @@
     "display/overlay_strategy_fullscreen.h",
     "display/overlay_strategy_single_on_top.cc",
     "display/overlay_strategy_single_on_top.h",
+    "display/overlay_strategy_single_shmid.cc",
+    "display/overlay_strategy_single_shmid.h",
     "display/overlay_strategy_underlay.cc",
     "display/overlay_strategy_underlay.h",
     "display/overlay_strategy_underlay_cast.cc",
@@ -77,6 +79,7 @@
     "display/shader.cc",
     "display/shader.h",
     "display/shared_bitmap_manager.h",
+    "display/shared_bitmap_manager.cc",
     "display/skia_output_surface.cc",
     "display/skia_output_surface.h",
     "display/skia_renderer.cc",
@@ -215,6 +218,8 @@
 
   if (use_x11) {
     sources += [
+      "display_embedder/shared_image_x11.cc",
+      "display_embedder/shared_image_x11.h",
       "display_embedder/software_output_device_x11.cc",
       "display_embedder/software_output_device_x11.h",
     ]
@@ -266,6 +271,15 @@
     public_deps += [ "//ui/ozone" ]
   }
 
+  if (use_x11) {
+    sources += [
+      "display_embedder/compositor_overlay_candidate_validator_x_shm.cc",
+      "display_embedder/compositor_overlay_candidate_validator_x_shm.h",
+      "display_embedder/software_output_surface_x_shm.cc",
+      "display_embedder/software_output_surface_x_shm_x_shm.h",
+    ]
+  }
+
   if (is_win) {
     sources += [
       "display_embedder/compositor_overlay_candidate_validator_win.cc",
--- a/components/viz/service/display/display_resource_provider.cc
+++ b/components/viz/service/display/display_resource_provider.cc
@@ -15,6 +15,7 @@
 #include "components/viz/common/resources/resource_format_utils.h"
 #include "components/viz/common/resources/resource_sizes.h"
 #include "components/viz/service/display/shared_bitmap_manager.h"
+#include "components/viz/service/display_embedder/shared_image_x11.h"
 #include "gpu/command_buffer/client/context_support.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "third_party/skia/include/gpu/GrBackendSurface.h"
@@ -373,6 +374,13 @@
   return resource->lock_for_read_count > 0 || resource->locked_for_external_use;
 }
 
+gfx::Size DisplayResourceProvider::ImageSize(ResourceId id) {
+  const ChildResource* resource = TryGetResource(id);
+  return !resource ||
+      (int)resource->transferable.stride < 4 * resource->transferable.size.width() ?
+    gfx::Size() : resource->transferable.size;
+}
+
 DisplayResourceProvider::ChildResource* DisplayResourceProvider::InsertResource(
     ResourceId id,
     ChildResource resource) {
@@ -410,7 +418,8 @@
       SkImageInfo::MakeN32Premul(resource->transferable.size.width(),
                                  resource->transferable.size.height());
   bool pixels_installed = sk_bitmap->installPixels(
-      info, resource->shared_bitmap->pixels(), info.minRowBytes());
+      info, resource->shared_bitmap->pixels(),
+      std::max((size_t)info.minRowBytes(), (size_t)resource->transferable.stride));
   DCHECK(pixels_installed);
 }
 
@@ -448,7 +457,7 @@
 }
 
 const DisplayResourceProvider::ChildResource*
-DisplayResourceProvider::LockForRead(ResourceId id) {
+DisplayResourceProvider::LockForRead(ResourceId id, bool no_bitmap_fetch) {
   // TODO(ericrk): We should never fail TryGetResource, but we appear to be
   // doing so on Android in rare cases. Handle this gracefully until a better
   // solution can be found. https://crbug.com/811858
@@ -468,7 +477,7 @@
     resource->SetLocallyUsed();
   }
 
-  if (!resource->shared_bitmap && !resource->is_gpu_resource_type()) {
+  if (!no_bitmap_fetch && !resource->shared_bitmap && !resource->is_gpu_resource_type()) {
     const SharedBitmapId& shared_bitmap_id =
         resource->transferable.mailbox_holder.mailbox;
     std::unique_ptr<SharedBitmap> bitmap =
@@ -899,6 +908,34 @@
   resource_provider_->UnlockForRead(resource_id_);
 }
 
+DisplayResourceProvider::ScopedReadLockSharedImageX11::ScopedReadLockSharedImageX11(
+    DisplayResourceProvider* resource_provider,
+    viz::ResourceId resource_id)
+    : xshm_(nullptr),
+      resource_provider_(resource_provider),
+      resource_id_(resource_id)
+{
+  const ChildResource * const resource = resource_provider->LockForRead(resource_id, true);
+
+  xshm_ = resource_provider_->shared_bitmap_manager_->GetSharedImageX11FromId(
+      resource->transferable.size,
+      resource->transferable.stride,
+      resource->transferable.format,
+      resource->transferable.mailbox_holder.mailbox);
+
+  if (!xshm_)
+  {
+    // No point in holding a lock if we don't have any memory
+    resource_provider_->UnlockForRead(resource_id);
+  }
+}
+
+DisplayResourceProvider::ScopedReadLockSharedImageX11::~ScopedReadLockSharedImageX11() {
+  if (xshm_) {
+    resource_provider_->UnlockForRead(resource_id_);
+  }
+}
+
 DisplayResourceProvider::LockSetForExternalUse::LockSetForExternalUse(
     DisplayResourceProvider* resource_provider)
     : resource_provider_(resource_provider) {}
--- a/components/viz/service/display/display_resource_provider.h
+++ b/components/viz/service/display/display_resource_provider.h
@@ -43,6 +43,8 @@
 namespace viz {
 class ContextProvider;
 class SharedBitmapManager;
+class SharedImageX11;
+class BitmapData;
 
 // This class provides abstractions for receiving and using resources from other
 // modules/threads/processes. It abstracts away GL textures vs GpuMemoryBuffers
@@ -116,6 +118,8 @@
   // Checks whether a resource is in use.
   bool InUse(ResourceId id);
 
+  gfx::Size ImageSize(ResourceId id);
+
   // The following lock classes are part of the DisplayResourceProvider API and
   // are needed to read the resource contents. The user must ensure that they
   // only use GL locks on GL resources, etc, and this is enforced by assertions.
@@ -185,6 +189,27 @@
     DISALLOW_COPY_AND_ASSIGN(ScopedReadLockSkImage);
   };
 
+  class VIZ_SERVICE_EXPORT ScopedReadLockSharedImageX11 {
+  public:
+    ScopedReadLockSharedImageX11(DisplayResourceProvider* resource_provider,
+                           ResourceId resource_id);
+    ~ScopedReadLockSharedImageX11();
+
+    SharedImageX11 * shared_image_x11() const {
+      DCHECK(valid());
+      return xshm_.get();
+    }
+
+    bool valid() const { return xshm_ != nullptr; }
+
+   private:
+    scoped_refptr<SharedImageX11> xshm_;
+    DisplayResourceProvider* resource_provider_;
+    ResourceId resource_id_;
+
+    DISALLOW_COPY_AND_ASSIGN(ScopedReadLockSharedImageX11);
+  };
+
   // Maintains set of lock for external use.
   class VIZ_SERVICE_EXPORT LockSetForExternalUse {
    public:
@@ -432,7 +457,7 @@
   // Returns null if we do not have a ContextProvider.
   gpu::gles2::GLES2Interface* ContextGL() const;
 
-  const ChildResource* LockForRead(ResourceId id);
+  const ChildResource* LockForRead(ResourceId id, bool no_bitmap_fetch = false);
   void UnlockForRead(ResourceId id);
 
   // Lock a resource for external use.
--- /dev/null
+++ b/components/viz/service/display/overlay_strategy_single_shmid.cc
@@ -0,0 +1,139 @@
+// Copyright 2018 Raspberry Pi
+
+#include "components/viz/service/display/overlay_strategy_single_shmid.h"
+
+#include "cc/base/math_util.h"
+#include "components/viz/common/quads/draw_quad.h"
+#include "components/viz/service/display/display_resource_provider.h"
+#include "components/viz/service/display/overlay_candidate_validator.h"
+#include "components/viz/service/display_embedder/shared_image_x11.h"
+#include "ui/gfx/geometry/rect_conversions.h"
+
+namespace viz {
+
+OverlayStrategySingleShmid::OverlayStrategySingleShmid(
+    OverlayCandidateValidator* capability_checker)
+    : capability_checker_(capability_checker) {
+  DCHECK(capability_checker);
+}
+
+OverlayStrategySingleShmid::~OverlayStrategySingleShmid() {}
+
+
+#define TRACE_SINGLE_SHMID 0
+
+// Returns false if the strategy cannot be made to work with the
+// current set of render passes. Returns true if the strategy was successful
+// and adds any additional passes necessary to represent overlays to
+// |render_passes|.
+bool OverlayStrategySingleShmid::Attempt(
+    const SkMatrix44& output_color_matrix,
+    const OverlayProcessor::FilterOperationsMap&
+        render_pass_background_filters,
+    DisplayResourceProvider* resource_provider,
+    RenderPass* render_pass,
+    OverlayCandidateList* candidates,
+    std::vector<gfx::Rect>* content_bounds)
+{
+  QuadList* quad_list = &render_pass->quad_list;
+
+  for (auto it = quad_list->begin(); it != quad_list->end(); ++it) {
+    OverlayCandidate candidate;
+
+    if (it->material != DrawQuad::Material::TEXTURE_CONTENT)
+      continue;
+
+    if (!OverlayCandidate::FromDrawQuad(resource_provider, output_color_matrix, *it, &candidate))
+      continue;
+
+    const gfx::Size image_size(resource_provider->ImageSize(candidate.resource_id));
+
+#if TRACE_SINGLE_SHMID
+    const OverlayCandidate& x = candidate;
+
+    LOG(ERROR) << "Got candidate id=" << x.resource_id <<
+      ", is_opaque=" << x.is_opaque <<
+      ", use_resource=" << x.use_output_surface_for_resource <<
+      ", display_rect=" << x.display_rect.ToString() <<
+      ", pixels=" << x.resource_size_in_pixels.ToString() <<
+      ", uv_rect=" << x.uv_rect.ToString() <<
+      ", clip_rect=" << x.clip_rect.ToString() <<
+      ", z=" << x.plane_z_order <<
+      ", src_size=" << image_size.ToString() <<
+      ", pass damage=" << render_pass->damage_rect.ToString();
+#endif
+
+    const gfx::Rect cand_rect(gfx::ToEnclosingRect(candidate.display_rect));
+
+    if (image_size != cand_rect.size()) {
+#if TRACE_SINGLE_SHMID
+      LOG(ERROR) << "Size mismatch " << image_size.ToString() << "/" << cand_rect.size().ToString();
+#endif
+      continue;
+    }
+
+    // Check we cover the damage rect
+    if (!cand_rect.Contains(render_pass->damage_rect)) {
+#if TRACE_SINGLE_SHMID
+      LOG(ERROR) << "Damage exceeds texture " << cand_rect.ToString() << "/" << render_pass->damage_rect.ToString();
+#endif
+      continue;
+    }
+
+    if (TryOverlay(quad_list, candidates, candidate, it)) {
+      return true;
+    }
+  }
+
+  return false;
+}
+
+bool OverlayStrategySingleShmid::TryOverlay(
+    QuadList* quad_list,
+    OverlayCandidateList* candidate_list,
+    const OverlayCandidate& candidate,
+    QuadList::Iterator candidate_iterator) {
+  // Check that no prior quads overlap it.
+  if (OverlayCandidate::IsOccluded(candidate, quad_list->cbegin(),
+                                   candidate_iterator))
+  {
+#if TRACE_SINGLE_SHMID
+      LOG(INFO) << "Is occluded";
+#endif
+      return false;
+  }
+
+  // Add the overlay.
+  OverlayCandidateList new_candidate_list = *candidate_list;
+  new_candidate_list.push_back(candidate);
+  new_candidate_list.back().plane_z_order = 1;
+  new_candidate_list.back().is_unoccluded = true;
+  new_candidate_list.back().is_opaque = true;
+
+  // Check for support.
+  capability_checker_->CheckOverlaySupport(&new_candidate_list);
+
+  const OverlayCandidate& overlay_candidate = new_candidate_list.back();
+  // If the candidate can be handled by an overlay, create a pass for it.
+  if (overlay_candidate.overlay_handled) {
+#if TRACE_SINGLE_SHMID
+    LOG(INFO) << "Opaque=" << overlay_candidate.is_opaque << ", unocc=" << overlay_candidate.is_unoccluded;
+#endif
+    quad_list->EraseAndInvalidateAllPointers(candidate_iterator);
+    candidate_list->swap(new_candidate_list);
+#if TRACE_SINGLE_SHMID
+    LOG(INFO) << "Handled";
+#endif
+    return true;
+  }
+
+#if TRACE_SINGLE_SHMID
+  LOG(INFO) << "Not handled";
+#endif
+
+  return false;
+}
+
+}  // namespace cc
+
+
--- /dev/null
+++ b/components/viz/service/display/overlay_strategy_single_shmid.h
@@ -0,0 +1,49 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef VIZ_SERVICE_DISPLAY_OVERLAY_STRATEGY_SINGLE_SHMID_H_
+#define VIZ_SERVICE_DISPLAY_OVERLAY_STRATEGY_SINGLE_SHMID_H_
+
+#include "base/macros.h"
+#include "components/viz/service/display/overlay_processor.h"
+#include "components/viz/service/viz_service_export.h"
+
+namespace viz {
+class OverlayCandidateValidator;
+
+class VIZ_SERVICE_EXPORT OverlayStrategySingleShmid : public OverlayProcessor::Strategy {
+ public:
+  explicit OverlayStrategySingleShmid(
+      OverlayCandidateValidator* capability_checker);
+  ~OverlayStrategySingleShmid() override;
+
+  // Returns false if the strategy cannot be made to work with the
+  // current set of render passes. Returns true if the strategy was successful
+  // and adds any additional passes necessary to represent overlays to
+  // |render_passes|.
+  bool Attempt(
+      const SkMatrix44& output_color_matrix,
+      const OverlayProcessor::FilterOperationsMap&
+          render_pass_background_filters,
+      DisplayResourceProvider* resource_provider,
+      RenderPass* render_pass,
+      OverlayCandidateList* candidates,
+      std::vector<gfx::Rect>* content_bounds) override;
+
+ private:
+   bool TryOverlay(QuadList* quad_list,
+                   OverlayCandidateList* candidate_list,
+                   const OverlayCandidate& candidate,
+                   QuadList::Iterator candidate_iterator);
+
+  OverlayCandidateValidator* capability_checker_;  // Weak.
+
+  DISALLOW_COPY_AND_ASSIGN(OverlayStrategySingleShmid);
+};
+
+}  // namespace viz
+
+#endif  // VIZ_SERVICE_DISPLAY_OVERLAY_STRATEGY_SINGLE_SHMID_H__
+
+
--- /dev/null
+++ b/components/viz/service/display/shared_bitmap_manager.cc
@@ -0,0 +1,17 @@
+#include "components/viz/service/display/shared_bitmap_manager.h"
+#include "components/viz/service/display_embedder/shared_image_x11.h"
+
+namespace viz {
+
+scoped_refptr<SharedImageX11>
+SharedBitmapManager::GetSharedImageX11FromId(
+      const gfx::Size& size,
+      uint32_t stride,
+      ResourceFormat format,
+      const SharedBitmapId& id)
+{
+  return nullptr;
+}
+
+}  // viz
+
--- a/components/viz/service/display/shared_bitmap_manager.h
+++ b/components/viz/service/display/shared_bitmap_manager.h
@@ -16,6 +16,7 @@
 }
 
 namespace viz {
+class SharedImageX11;
 
 class SharedBitmapManager {
  public:
@@ -27,6 +28,11 @@
       const gfx::Size& size,
       ResourceFormat format,
       const SharedBitmapId& id) = 0;
+  virtual scoped_refptr<SharedImageX11> GetSharedImageX11FromId(
+      const gfx::Size& size,
+      uint32_t stride,
+      ResourceFormat format,
+      const SharedBitmapId& id);
   virtual base::UnguessableToken GetSharedBitmapTracingGUIDFromId(
       const SharedBitmapId& id) = 0;
   // Used in the display compositor to associate an id to a shm handle.
--- a/components/viz/service/display/software_output_device.cc
+++ b/components/viz/service/display/software_output_device.cc
@@ -45,6 +45,14 @@
 
 void SoftwareOutputDevice::EndPaint() {}
 
+void SoftwareOutputDevice::EndPaint(const gfx::Rect& damage_rect,
+  DisplayResourceProvider * const resource_provider,
+  const OverlayCandidateList& overlay_list)
+{
+  // By default just ignore the extra parameters
+  EndPaint();
+}
+
 gfx::VSyncProvider* SoftwareOutputDevice::GetVSyncProvider() {
   return vsync_provider_.get();
 }
--- a/components/viz/service/display/software_output_device.h
+++ b/components/viz/service/display/software_output_device.h
@@ -26,6 +26,8 @@
 namespace viz {
 
 class SoftwareOutputDeviceClient;
+class DisplayResourceProvider;
+class OverlayCandidateList;
 
 // This is a "tear-off" class providing software drawing support to
 // OutputSurface, such as to a platform-provided window framebuffer.
@@ -56,6 +58,10 @@
   // that it holds to it.
   virtual void EndPaint();
 
+  virtual void EndPaint(const gfx::Rect& damage_rect,
+    DisplayResourceProvider * const resource_provider,
+    const OverlayCandidateList& overlay_list);
+
   // Discard the backing buffer in the surface provided by this instance.
   virtual void DiscardBackbuffer() {}
 
--- a/components/viz/service/display/software_renderer.cc
+++ b/components/viz/service/display/software_renderer.cc
@@ -89,7 +89,8 @@
   current_canvas_ = nullptr;
   root_canvas_ = nullptr;
 
-  output_device_->EndPaint();
+  DrawingFrame * const frame = current_frame();
+  output_device_->EndPaint(frame->root_damage_rect, resource_provider_, frame->overlay_list);
 }
 
 void SoftwareRenderer::SwapBuffers(std::vector<ui::LatencyInfo> latency_info,
--- a/components/viz/service/display/surface_aggregator.cc
+++ b/components/viz/service/display/surface_aggregator.cc
@@ -961,6 +961,18 @@
         gfx::Rect child_rect =
             PrewalkTree(child_surface, surface_info.has_moved_pixels,
                         surface_info.parent_pass_id, will_draw, result);
+
+        if (child_surface->size_in_pixels() != surface_info.quad_rect.size() &&
+            child_surface->GetActiveFrame().metadata.may_contain_video) {
+//          LOG(INFO) << "Strectch: " <<  child_surface->size_in_pixels().width() << "x" <<
+//            child_surface->size_in_pixels().height() << " -> " <<
+//            surface_info.quad_rect.width() << "x" <<
+//              surface_info.quad_rect.height() << "; video=" << frame.metadata.may_contain_video << "/" <<
+//              child_surface->GetActiveFrame().metadata.may_contain_video;
+
+          child_surface->DidStretchFrame(surface_info.quad_rect.width(), surface_info.quad_rect.height());
+        }
+
         if (child_surface->size_in_pixels().GetCheckedArea().ValueOrDefault(0) >
             0) {
           float y_scale = static_cast<float>(surface_info.quad_rect.height()) /
--- /dev/null
+++ b/components/viz/service/display_embedder/compositor_overlay_candidate_validator_x_shm.cc
@@ -0,0 +1,64 @@
+#include "components/viz/service/display_embedder/compositor_overlay_candidate_validator_x_shm.h"
+
+#include "components/viz/service/display/overlay_processor.h"
+#include "components/viz/service/display/overlay_strategy_single_shmid.h"
+
+
+namespace viz {
+
+CompositorOverlayCandidateValidatorXShm::CompositorOverlayCandidateValidatorXShm(const bool use_shm) :
+  use_shm_(use_shm)
+{
+}
+
+CompositorOverlayCandidateValidatorXShm::~CompositorOverlayCandidateValidatorXShm()
+{
+}
+
+void
+CompositorOverlayCandidateValidatorXShm::SetSoftwareMirrorMode(bool enabled)
+{
+// *** NIF
+}
+
+// Populates a list of strategies that may work with this validator.
+void
+CompositorOverlayCandidateValidatorXShm::GetStrategies(OverlayProcessor::StrategyList* strategies)
+{
+  if (use_shm_) {
+    strategies->push_back(std::make_unique<OverlayStrategySingleShmid>(this));
+  }
+}
+
+// Returns ??
+bool
+CompositorOverlayCandidateValidatorXShm::AllowDCLayerOverlays()
+{
+  return false;
+}
+
+// Returns true if draw quads can be represented as CALayers (Mac only).
+bool
+CompositorOverlayCandidateValidatorXShm::AllowCALayerOverlays()
+{
+  return false;
+}
+
+// A list of possible overlay candidates is presented to this function.
+// The expected result is that those candidates that can be in a separate
+// plane are marked with |overlay_handled| set to true, otherwise they are
+// to be traditionally composited. Candidates with |overlay_handled| set to
+// true must also have their |display_rect| converted to integer
+// coordinates if necessary.
+void
+CompositorOverlayCandidateValidatorXShm::CheckOverlaySupport(OverlayCandidateList* surfaces)
+{
+  // Accept if we have shm support
+  for (auto& x: *surfaces) {
+    x.overlay_handled = use_shm_;
+  }
+}
+
+} // namespace display_compositor
+
+
--- /dev/null
+++ b/components/viz/service/display_embedder/compositor_overlay_candidate_validator_x_shm.h
@@ -0,0 +1,40 @@
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef VIZ_SERVICE_DISPLAY_EMBEDDER_COMPOSITOR_OVERLAY_CANDIDATE_VALIDATOR_X_SHM_H_
+#define VIZ_SERVICE_DISPLAY_EMBEDDER_COMPOSITOR_OVERLAY_CANDIDATE_VALIDATOR_X_SHM_H_
+
+#include <memory>
+
+#include "base/macros.h"
+#include "components/viz/service/display_embedder/compositor_overlay_candidate_validator.h"
+#include "components/viz/service/viz_service_export.h"
+
+namespace viz {
+
+class VIZ_SERVICE_EXPORT CompositorOverlayCandidateValidatorXShm
+    : public CompositorOverlayCandidateValidator {
+ public:
+  explicit CompositorOverlayCandidateValidatorXShm(const bool use_shm);
+  ~CompositorOverlayCandidateValidatorXShm() override;
+
+  // cc::OverlayCandidateValidator implementation.
+  void GetStrategies(OverlayProcessor::StrategyList* strategies) override;
+  bool AllowCALayerOverlays() override;
+  bool AllowDCLayerOverlays() override;
+  void CheckOverlaySupport(OverlayCandidateList* surfaces) override;
+
+  // CompositorOverlayCandidateValidator implementation.
+  void SetSoftwareMirrorMode(bool enabled) override;
+
+ private:
+  const bool use_shm_;
+
+  DISALLOW_COPY_AND_ASSIGN(CompositorOverlayCandidateValidatorXShm);
+};
+
+}  // namespace display_compositor
+
+#endif  // COMPONENTS_DISPLAY_COMPOSITOR_COMPOSITOR_OVERLAY_CANDIDATE_VALIDATOR_X_SHM_H_
+
+
--- a/components/viz/service/display_embedder/gpu_display_provider.cc
+++ b/components/viz/service/display_embedder/gpu_display_provider.cc
@@ -19,6 +19,7 @@
 #include "components/viz/service/display_embedder/server_shared_bitmap_manager.h"
 #include "components/viz/service/display_embedder/skia_output_surface_impl.h"
 #include "components/viz/service/display_embedder/software_output_surface.h"
+#include "components/viz/service/display_embedder/software_output_surface_x_shm.h"
 #include "components/viz/service/display_embedder/viz_process_context_provider.h"
 #include "components/viz/service/gl/gpu_service_impl.h"
 #include "gpu/command_buffer/client/gpu_memory_buffer_manager.h"
@@ -121,8 +122,13 @@
   SkiaOutputSurface* skia_output_surface = nullptr;
 
   if (!gpu_compositing) {
+#if USE_X11
+    output_surface = std::make_unique<SoftwareOutputSurfaceXShm>(
+        std::make_unique<SoftwareOutputDeviceX11>(surface_handle));
+#else
     output_surface = std::make_unique<SoftwareOutputSurface>(
         CreateSoftwareOutputDeviceForPlatform(surface_handle, display_client));
+#endif
   } else if (renderer_settings.use_skia_deferred_display_list) {
 #if defined(OS_MACOSX) || defined(OS_WIN)
     // TODO(penghuang): Support DDL for all platforms.
--- a/components/viz/service/display_embedder/server_shared_bitmap_manager.cc
+++ b/components/viz/service/display_embedder/server_shared_bitmap_manager.cc
@@ -16,6 +16,9 @@
 #include "base/strings/stringprintf.h"
 #include "base/trace_event/process_memory_dump.h"
 #include "components/viz/common/resources/resource_sizes.h"
+#if USE_SHARED_IMAGE_X11
+#include "components/viz/service/display_embedder/shared_image_x11.h"
+#endif
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "ui/gfx/geometry/size.h"
 
@@ -25,8 +28,36 @@
  public:
   explicit BitmapData(size_t buffer_size) : buffer_size(buffer_size) {}
   std::unique_ptr<base::SharedMemory> memory;
+#if USE_SHARED_IMAGE_X11
+  scoped_refptr<SharedImageX11> xshm_;
+#endif
   size_t buffer_size;
 
+  uint8_t * data() const {
+#if USE_SHARED_IMAGE_X11
+    if (xshm_)
+      return (uint8_t *)xshm_->memory();
+#endif
+    return (uint8_t *)memory->memory();
+  }
+
+  base::UnguessableToken mapped_id() const {
+#if USE_SHARED_IMAGE_X11
+    if (xshm_)
+      return xshm_->mapped_id();
+#endif
+    return memory->mapped_id();
+  }
+
+  bool map_memory() const {
+#if USE_SHARED_IMAGE_X11
+    if (xshm_ || memory->memory())
+      return true;
+#endif
+    memory->Map(buffer_size);
+    return memory->memory();
+  }
+
  private:
   friend class base::RefCounted<BitmapData>;
   ~BitmapData() {}
@@ -41,7 +72,7 @@
 class ServerSharedBitmap : public SharedBitmap {
  public:
   explicit ServerSharedBitmap(scoped_refptr<BitmapData> bitmap_data)
-      : SharedBitmap(static_cast<uint8_t*>(bitmap_data->memory->memory())),
+      : SharedBitmap(bitmap_data->data()),
         bitmap_data_(std::move(bitmap_data)) {}
 
   ~ServerSharedBitmap() override {
@@ -77,13 +108,44 @@
       bitmap_size > data->buffer_size)
     return nullptr;
 
-  if (!data->memory->memory()) {
+  if (!data->map_memory())
     return nullptr;
-  }
 
   return std::make_unique<ServerSharedBitmap>(data);
 }
 
+#if USE_SHARED_IMAGE_X11
+scoped_refptr<SharedImageX11>
+ServerSharedBitmapManager::GetSharedImageX11FromId(
+      const gfx::Size& size,
+      uint32_t stride,
+      ResourceFormat format,
+      const SharedBitmapId& id)
+{
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+
+  auto it = handle_map_.find(id);
+  if (it == handle_map_.end())
+    return nullptr;
+
+  BitmapData* data = it->second.get();
+
+  if (data->xshm_) {
+    return data->xshm_;
+  }
+
+  size_t bitmap_size;
+  if (!ResourceSizes::MaybeSizeInBytes(size, format, &bitmap_size) ||
+      bitmap_size > data->buffer_size)
+    return nullptr;
+
+  data->xshm_ = new SharedImageX11(std::move(data->memory));
+  data->xshm_->set_size(size, stride);
+
+  return data->xshm_;
+}
+#endif
+
 base::UnguessableToken
 ServerSharedBitmapManager::GetSharedBitmapTracingGUIDFromId(
     const SharedBitmapId& id) {
@@ -91,7 +153,7 @@
   if (it == handle_map_.end())
     return {};
   BitmapData* data = it->second.get();
-  return data->memory->mapped_id();
+  return data->mapped_id();
 }
 
 bool ServerSharedBitmapManager::ChildAllocatedSharedBitmap(
@@ -118,8 +180,8 @@
   // Map the memory to get a pointer to it, then close it to free up the fd so
   // it can be reused. This doesn't unmap the memory. Some OS have a very
   // limited number of fds and this avoids consuming them all.
-  data->memory->Map(data->buffer_size);
-  data->memory->Close();
+//  data->memory->Map(data->buffer_size);
+//  data->memory->Close();
 
   handle_map_[id] = std::move(data);
   return true;
--- a/components/viz/service/display_embedder/server_shared_bitmap_manager.h
+++ b/components/viz/service/display_embedder/server_shared_bitmap_manager.h
@@ -16,6 +16,12 @@
 #include "components/viz/service/display/shared_bitmap_manager.h"
 #include "components/viz/service/viz_service_export.h"
 
+#ifdef USE_X11
+#define USE_SHARED_IMAGE_X11 1
+#else
+#define USE_SHARED_IMAGE_X11 0
+#endif
+
 namespace viz {
 class BitmapData;
 
@@ -36,6 +42,13 @@
       const gfx::Size& size,
       ResourceFormat format,
       const SharedBitmapId& id) override;
+#if USE_SHARED_IMAGE_X11
+  scoped_refptr<SharedImageX11> GetSharedImageX11FromId(
+      const gfx::Size& size,
+      uint32_t stride,
+      ResourceFormat format,
+      const SharedBitmapId& id) override;
+#endif
   base::UnguessableToken GetSharedBitmapTracingGUIDFromId(
       const SharedBitmapId& id) override;
   bool ChildAllocatedSharedBitmap(mojo::ScopedSharedBufferHandle buffer,
--- /dev/null
+++ b/components/viz/service/display_embedder/shared_image_x11.cc
@@ -0,0 +1,443 @@
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+#include "components/viz/service/display_embedder/shared_image_x11.h"
+#include "ui/gfx/x/x11_types.h"
+
+#ifdef __ARMEL__
+#define XCB_IMAGE_SUPPORT 1
+#else
+#define XCB_IMAGE_SUPPORT 0
+#endif
+
+#include <X11/Xlib-xcb.h>
+#include <xcb/shm.h>
+#if XCB_IMAGE_SUPPORT
+#include <xcb/xcb_image.h>
+
+namespace viz
+{
+
+class XcbCookieTrue : public XcbCookie
+{
+public:
+  bool sync() override {return true;}
+};
+
+
+class XcbCookieVoid : public XcbCookie
+{
+  xcb_connection_t * const xcbc_;
+  const xcb_void_cookie_t cookie_;
+  xcb_generic_error_t * err_;
+  bool sync_done_;
+
+public:
+  XcbCookieVoid(xcb_connection_t * const xcbc, const xcb_void_cookie_t& cookie) :
+    xcbc_(xcbc),
+    cookie_(cookie),
+    sync_done_(false)
+  {
+  }
+
+  bool sync() override
+  {
+    if (!sync_done_)
+    {
+      err_ = xcb_request_check(xcbc_, cookie_);
+      sync_done_ = true;
+      if (err_)
+      {
+          LOG(ERROR) << "X sync fail: rtype=" << (int)err_->response_type << ", err=" << (int)err_->error_code;
+      }
+    }
+    return err_ == nullptr;
+  }
+
+  ~XcbCookieVoid() override
+  {
+    sync();
+    if (err_ != nullptr)
+      free(err_);
+  }
+};
+
+
+
+
+class SharedImageX11::X
+{
+  // ?? There must be a STL template that does this wrapping for me...
+  struct XcbImageDeleter
+  {
+    void operator ()(xcb_image_t * const img) {
+      xcb_image_destroy(img);
+    }
+  };
+
+  xcb_connection_t * xcbc_;
+  xcb_shm_seg_t shm_seg_;
+
+  // Use an image structure to store image info
+  // Will calculate expected strides for us
+  std::unique_ptr<xcb_image_t, XcbImageDeleter> img_;
+  bool attached_;
+
+public:
+  X(xcb_connection_t * const xcbc, unsigned int depth, const gfx::Size& size) :
+    xcbc_(xcbc),
+    shm_seg_(~0U),
+    img_(xcb_image_create_native(xcbc_, size.width(), size.height(), XCB_IMAGE_FORMAT_Z_PIXMAP, depth, nullptr, ~0U, nullptr)),
+    attached_(false)
+  {
+  }
+
+  ~X()
+  {
+//    LOG(ERROR) << __func__ << ": shmid=" << std::hex << shminfo_.shmid;
+    if (attached_)
+      xcb_shm_detach(xcbc_, shm_seg_);
+  }
+
+  bool check() const
+  {
+    return img_ != nullptr;
+  }
+
+  size_t stride() const
+  {
+    return img_ == nullptr ? 0 : img_->stride;
+  }
+
+  size_t image_size() const
+  {
+    if (img_ == nullptr)
+      return 0;
+
+    return img_->size;
+  }
+
+  bool attach_smh(const base::SharedMemoryHandle& shmfd)
+  {
+    if (attached_)
+    {
+      LOG(ERROR) << "Already attached";
+      return false;
+    }
+    if (img_ == nullptr)
+    {
+      LOG(ERROR) << "No image";
+      return false;
+    }
+
+    shm_seg_ = xcb_generate_id(xcbc_); // Error value is ~0U
+
+    // This closes the fd once sent so must dup to avoid local confusion
+    XcbCookieVoid err(xcbc_,
+      xcb_shm_attach_fd_checked(xcbc_, shm_seg_, dup(shmfd.GetHandle()), 1));
+    if (!err.sync())
+    {
+      LOG(ERROR) << "SHM attach failed";
+      return false;
+    }
+
+    attached_ = true;
+    return true;
+  }
+
+  // Messy declaration
+  std::unique_ptr<XcbCookie> put_image(const Drawable drawable, const xcb_gcontext_t cid, const gfx::Rect& rect, const gfx::Rect& src_rect)
+  {
+    if (!attached_)
+    {
+      LOG(ERROR) << "Not attached";
+      return nullptr;
+    }
+    if (img_ == nullptr)
+    {
+      LOG(ERROR) << "No image";
+      return nullptr;
+    }
+
+    // Xlib XID types should be compatible with xcb
+    // This includes Drawable, gcontext_t is extractable from GC
+
+//    LOG(INFO) << "Put image: " << img_->width << "x" << img_->height << ", rect=" << rect.ToString() << ", src_rect=" << src_rect.ToString() <<
+//        ", depth=" << img_->depth << ", format=" << img_->format;
+
+    return std::make_unique<XcbCookieVoid>(xcbc_,
+      xcb_shm_put_image_checked(xcbc_, drawable, cid,
+        img_->width, img_->height, /* total width/height */
+        src_rect.x(), src_rect.y(),
+        rect.width(), rect.height(),  /* ?? should be src_width, src_height ?? */
+        rect.x(), rect.y(),
+        (int)img_->depth,  // bits per pixel (probably)
+        img_->format,
+        0, /* send event */
+        shm_seg_,
+        0  /* offset */));
+  }
+
+  std::string ToString() const
+  {
+    if (img_ == nullptr)
+    {
+      return "<null>";
+    }
+
+    std::ostringstream s;
+    s << "imgsize=" << img_->width << "x" << img_->height;
+    return s.str();
+  }
+};
+
+
+
+
+SharedImageX11::SharedImageX11(std::unique_ptr<base::SharedMemory>&& shm) :
+  shm_(std::move(shm)),
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::SharedImageX11(const base::SharedMemoryHandle& shmh, const bool ro) :
+  shm_(std::make_unique<base::SharedMemory>(shmh, ro)),
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::SharedImageX11() :
+  shm_(std::make_unique<base::SharedMemory>()),
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::~SharedImageX11()
+{
+}
+
+
+// Check if the X Shared Memory extension is available.
+bool
+SharedImageX11::check_support(Display *const display)
+{
+#if !XCB_IMAGE_SUPPORT
+  return false;
+#else
+  xcb_connection_t * const xcbc = XGetXCBConnection(display);
+  bool rv = false;
+
+  if (xcbc == nullptr)
+  {
+    LOG(ERROR) << "Unable to get xcb connection";
+    return false;
+  }
+
+  // Do not free this result
+  const xcb_query_extension_reply_t * xd;
+  if ((xd = xcb_get_extension_data(xcbc, &xcb_shm_id)) == nullptr ||
+      xd->response_type != 1 ||  // X_Reply - doesn't seem to be defined in xcb
+      !xd->present)
+  {
+    LOG(WARNING) << "SHM extension not supported";
+    return false;
+  }
+
+  xcb_generic_error_t * err = nullptr;
+  xcb_shm_query_version_reply_t * const qvr =
+    xcb_shm_query_version_reply(xcbc, xcb_shm_query_version(xcbc), &err);
+
+  if (err != nullptr)
+    LOG(ERROR) << __func__ << ": Error reply: code=" << err->error_code;
+  else if (qvr == nullptr || qvr->response_type != 1)
+    LOG(ERROR) << "SHM query version reply bad";
+  else if (qvr->major_version < 1 || (qvr->major_version == 1 && qvr->minor_version < 2))
+    LOG(WARNING) << "SHM version " << qvr->major_version << "." << qvr->minor_version <<" is too low; need 1.2";
+  else
+  {
+      LOG(INFO) << "SHM version " << qvr->major_version << "." << qvr->minor_version << ": OK";
+      rv = true;
+  }
+
+  if (err != nullptr)
+    free(err);
+  if (qvr != nullptr)
+    free(qvr);
+
+  return rv;
+#endif
+}
+
+
+
+bool
+SharedImageX11::create_image(XDisplay * const display, const XWindowAttributes& attributes)
+{
+  if (x_ != nullptr)
+  {
+    // Assume everything matches
+    return true;
+  }
+
+  xcb_connection_t * const xcbc = XGetXCBConnection(display);
+  if (stride_ == 0)
+  {
+    // Let X pick our stride (probably creating a new image)
+    std::unique_ptr<X> x(std::make_unique<X>(xcbc, attributes.depth, size_));
+    if (!x->check())
+      return false;
+    x_ = std::move(x);
+  }
+  else
+  {
+    std::unique_ptr<X> x(std::make_unique<X>(xcbc, attributes.depth,
+      gfx::Size(stride_ / 4, size_.height())));
+    if (x->stride() != stride_)
+    {
+      LOG(ERROR) << "Generated mismatched strides: " << x->stride() << "/" << stride_;
+      return false;
+    }
+    x_ = std::move(x);
+  }
+
+  if (buffer_size_ == 0)
+    buffer_size_ = x_->image_size();
+  else if (buffer_size_ < x_->image_size())
+  {
+    LOG(ERROR) << "Image larger than buffer";
+    return false;
+  }
+
+  if (!base::SharedMemory::IsHandleValid(shm_->handle()))
+  {
+    if (!shm_->CreateAnonymous(buffer_size_))
+    {
+      LOG(ERROR) << "Failed to create anon shm: size=" << x_->image_size();
+      return false;
+    }
+  }
+
+  if (!x_->attach_smh(shm_->handle()))
+  {
+    x_ = nullptr;
+    return false;
+  }
+
+  return true;
+}
+
+std::unique_ptr<XcbCookie>
+SharedImageX11::put_image(const Drawable drawable, const GC gc,
+                            const gfx::Rect& rect, const gfx::Rect& src_rect)
+{
+  return x_ == nullptr ? nullptr :
+    x_->put_image(drawable, XGContextFromGC(gc), rect, src_rect);
+}
+
+size_t
+SharedImageX11::stride() const
+{
+  return x_ == nullptr ? 0 : x_->stride();
+}
+
+void *
+SharedImageX11::memory() const
+{
+  void * v = shm_->memory();
+  if (v != nullptr)
+    return v;
+  if (buffer_size_ == 0)
+  {
+    LOG(ERROR) << __func__ << ": No buffer size";
+    return nullptr;
+  }
+  if (!shm_->Map(buffer_size_))
+  {
+    LOG(ERROR) << __func__ << ": Map failed: size=" << buffer_size_;
+    return nullptr;
+  }
+  return shm_->memory();
+}
+
+}  // namespace viz
+
+#else
+
+namespace viz {
+
+// *** Stub for when we have no xcb-image
+//     For unknown reasons we end up compiling this for x86 without the expected lib
+
+class SharedImageX11::X
+{
+public:
+  X() {}
+
+  ~X() {}
+};
+
+SharedImageX11::SharedImageX11(std::unique_ptr<base::SharedMemory>&& shm) :
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::SharedImageX11(const base::SharedMemoryHandle& shmh, const bool ro) :
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::SharedImageX11() :
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::~SharedImageX11()
+{
+}
+
+// Check if the X Shared Memory extension is available.
+bool
+SharedImageX11::check_support(Display *const display)
+{
+  return false;
+}
+
+bool
+SharedImageX11::create_image(XDisplay * const display, const XWindowAttributes& attributes)
+{
+  return false;
+}
+
+std::unique_ptr<XcbCookie>
+SharedImageX11::put_image(const Drawable drawable, const GC gc,
+                            const gfx::Rect& rect, const gfx::Rect& src_rect)
+{
+  return nullptr;
+}
+
+size_t
+SharedImageX11::stride() const
+{
+  return 0;
+}
+
+void *
+SharedImageX11::memory() const
+{
+  return nullptr;
+}
+
+}  // namespace viz
+
+
+#endif
+
+
+
--- /dev/null
+++ b/components/viz/service/display_embedder/shared_image_x11.h
@@ -0,0 +1,74 @@
+#ifndef COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SHARED_IMAGE_X11_H_
+#define COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SHARED_IMAGE_X11_H_
+
+#include "base/memory/ref_counted.h"
+#include "base/memory/shared_memory.h"
+#include "components/viz/service/viz_service_export.h"
+#include "ui/gfx/x/x11_types.h"
+#include "ui/base/x/x11_util_internal.h"
+#include "ui/gfx/geometry/rect.h"
+
+namespace viz
+{
+
+class VIZ_SERVICE_EXPORT XcbCookie
+{
+public:
+  virtual ~XcbCookie() {};
+  virtual bool sync() = 0;
+};
+
+class VIZ_SERVICE_EXPORT SharedImageX11 : public base::RefCounted<SharedImageX11>
+{
+  class X;
+
+  const std::unique_ptr<base::SharedMemory> shm_;
+
+  // Hide all the X shm stuff so we don't have to include the X libs
+  // which conflict with a number standard defs.
+  std::unique_ptr<X> x_;
+  size_t stride_;
+  gfx::Size size_;
+  size_t buffer_size_;
+
+public:
+  SharedImageX11(std::unique_ptr<base::SharedMemory>&& shm); // Can move a shm pointer into this
+  SharedImageX11(const base::SharedMemoryHandle& shmh, const bool ro = false);
+  SharedImageX11();
+  void set_buffer_size(const size_t buffer_size) {
+    buffer_size_ = buffer_size;
+  }
+  void set_size(const gfx::Size& size, const size_t stride) {
+    stride_ = stride;
+    size_ = size;
+  }
+  const gfx::Size& get_size() const {
+    return size_;
+  }
+
+  static bool check_support(XDisplay * const display);
+  bool create_image(XDisplay * const display, const XWindowAttributes& attributes);
+  std::unique_ptr<XcbCookie> put_image(const Drawable drawable, const GC gc,
+                 const gfx::Rect& rect, const gfx::Rect& src_rect);
+
+  size_t stride() const;
+  void * memory() const;
+
+  // Returns an ID for the mapped region. This is ID of the SharedMemoryHandle
+  // that was mapped. The ID is valid even after the SharedMemoryHandle is
+  // Closed, as long as the region is not unmapped.
+  const base::UnguessableToken& mapped_id() const { return shm_->mapped_id(); }
+
+private:
+  friend class base::RefCounted<SharedImageX11>;
+  ~SharedImageX11();
+  DISALLOW_COPY_AND_ASSIGN(SharedImageX11);
+};
+
+}  // namespace viz
+
+#endif
+
+
+
+
--- a/components/viz/service/display_embedder/software_output_device_x11.cc
+++ b/components/viz/service/display_embedder/software_output_device_x11.cc
@@ -8,16 +8,86 @@
 #include <stdint.h>
 #include <string.h>
 
+#include "components/viz/service/display/display_resource_provider.h"
+#include "components/viz/service/display/overlay_candidate.h"
+#include "components/viz/service/display_embedder/shared_image_x11.h"
 #include "third_party/skia/include/core/SkImageInfo.h"
 #include "ui/base/x/x11_util.h"
 #include "ui/base/x/x11_util_internal.h"
 #include "ui/gfx/x/x11.h"
 #include "ui/gfx/x/x11_types.h"
+#include "ui/gfx/geometry/rect_conversions.h"
 
 namespace viz {
 
+int
+SoftwareOutputDeviceX11::ShmDesc::attach(XDisplay * const display,
+  const XWindowAttributes& attributes, const int w, const int h)
+{
+  // Clear out old allocation
+  xshm_ = nullptr;
+
+  scoped_refptr<SharedImageX11> xshm(new SharedImageX11());
+
+  // Set size to requested (min)w x h; let the code pick stride
+  xshm->set_size(gfx::Size(w, h), 0);
+
+  if (!xshm->create_image(display, attributes))
+      return -1;
+
+  xshm_ = std::move(xshm);
+  return 0;
+}
+
+std::unique_ptr<viz::XcbCookie> SoftwareOutputDeviceX11::ShmDesc::put_image(Drawable drawable, GC gc, const gfx::Rect& rect)
+{
+  return xshm_->put_image(drawable, gc, rect, rect);
+}
+
+void SoftwareOutputDeviceX11::ShmDesc::resize(const SkImageInfo& info)
+{
+//  LOG(ERROR) << "resize req:" << info.width() << "x" << info.height();
+  req_ii_ = info;
+}
+
+sk_sp<SkSurface>
+SoftwareOutputDeviceX11::ShmDesc::use_surface(XDisplay * const display, const XWindowAttributes& attributes)
+{
+  if (req_ii_ != cur_ii_) {
+//    LOG(ERROR) << "resize set:" << req_ii_.width() << "x" << req_ii_.height();
+
+    // Kill all current stuff
+    surface_.reset();
+
+    // Rebuild
+    if (attach(display, attributes, req_ii_.minRowBytes()/req_ii_.bytesPerPixel(), req_ii_.height()) != 0)
+    {
+      LOG(ERROR) << "Failed to make new XImage";
+    }
+    // Build a surface on it
+    else if (!(surface_ = SkSurface::MakeRasterDirect(req_ii_, xshm_->memory(), xshm_->stride())))
+    {
+      LOG(ERROR) << "Failed to make new SkSurface";
+    }
+    else
+    {
+      // Success
+      cur_ii_ = req_ii_;
+    }
+  }
+  return surface_;
+}
+
+
+SoftwareOutputDeviceX11::ShmDesc::ShmDesc() {
+}
+
+SoftwareOutputDeviceX11::ShmDesc::~ShmDesc() {
+}
+
+
 SoftwareOutputDeviceX11::SoftwareOutputDeviceX11(gfx::AcceleratedWidget widget)
-    : widget_(widget), display_(gfx::GetXDisplay()), gc_(nullptr) {
+    : widget_(widget), display_(gfx::GetXDisplay()), gc_(nullptr), shm_n_(0) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
 
   gc_ = XCreateGC(display_, widget_, 0, nullptr);
@@ -25,15 +95,69 @@
     LOG(ERROR) << "XGetWindowAttributes failed for window " << widget_;
     return;
   }
+
+  if (!(gfx::BitsPerPixelForPixmapDepth(display_, attributes_.depth) == 32 &&
+        attributes_.visual->red_mask == 0xff0000 &&
+        attributes_.visual->green_mask == 0xff00 &&
+        attributes_.visual->blue_mask == 0xff &&
+        SharedImageX11::check_support(display_)))
+  {
+    LOG(WARNING) << "Display attributes incompatible with SHM";
+    shm_n_ = -1;
+  }
+  else
+  {
+    for (int i = 0; i != 2; ++i) {
+      // Pick any old initial shape - it will be freed as soon as we start
+      // and know what size we actually want (even if it is 1024x768!)
+      // This also allows us to check here that SHM actually works
+      if (shm_descs_[i].attach(display_, attributes_, 1024, 768) != 0)
+      {
+        shm_n_ = -1;
+        break;
+      }
+    }
+	}
 }
 
 SoftwareOutputDeviceX11::~SoftwareOutputDeviceX11() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
 
+  overlay_lock_.release();  // Avoid shutdown crash
   XFreeGC(display_, gc_);
 }
 
-void SoftwareOutputDeviceX11::EndPaint() {
+bool SoftwareOutputDeviceX11::use_shm() const
+{
+  return shm_n_ >= 0;
+}
+
+void SoftwareOutputDeviceX11::Resize(const gfx::Size& viewport_pixel_size,
+                                  float scale_factor) {
+//  scale_factor_ = scale_factor;
+
+  if (viewport_pixel_size_ == viewport_pixel_size)
+    return;
+
+  const SkImageInfo info(SkImageInfo::MakeN32(viewport_pixel_size.width(),
+                                          viewport_pixel_size.height(),
+                                          kOpaque_SkAlphaType));
+  viewport_pixel_size_ = viewport_pixel_size;
+
+  if (shm_n_ < 0) {
+    surface_ = SkSurface::MakeRaster(info);
+  }
+  else
+  {
+    for (int i = 0; i != 2; ++i) {
+      shm_descs_[i].resize(info);
+    }
+
+    surface_ = shm_descs_[shm_n_].use_surface(display_, attributes_);
+  }
+}
+
+void SoftwareOutputDeviceX11::paint_surface() {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
 
   SoftwareOutputDevice::EndPaint();
@@ -100,15 +224,22 @@
     XRenderFreePicture(display_, picture);
     XRenderFreePicture(display_, dest_picture);
     XFreePixmap(display_, pixmap);
+  } else if (shm_n_ >= 0) {
+    last_cookie_ = shm_descs_[shm_n_].put_image(widget_, static_cast<GC>(gc_), rect);
+    // Swap to other surface for next draw
+    // Could use sync if we only want 1 surface but that wastes time
+    //  XSync(display_, false);
+    shm_n_ = (shm_n_ + 1) % 2;
+    surface_ = shm_descs_[shm_n_].use_surface(display_, attributes_);
   } else {
     // TODO(jbauman): Switch to XShmPutImage since it's async.
     SkPixmap pixmap;
     surface_->peekPixels(&pixmap);
     gfx::PutARGBImage(display_, attributes_.visual, attributes_.depth, widget_,
                       gc_, static_cast<const uint8_t*>(pixmap.addr()),
-                      viewport_pixel_size_.width(),
-                      viewport_pixel_size_.height(), rect.x(), rect.y(),
-                      rect.x(), rect.y(), rect.width(), rect.height());
+                      viewport_pixel_size_.width(), viewport_pixel_size_.height(),
+                      rect.x(), rect.y(), rect.x(), rect.y(), rect.width(),
+                      rect.height());
   }
 
   // Ensure the new window content appears immediately. On a TYPE_UI thread we
@@ -118,4 +249,53 @@
   XFlush(display_);
 }
 
+void SoftwareOutputDeviceX11::EndPaint() {
+  last_cookie_.reset();
+  overlay_lock_.reset();
+  paint_surface();
+  XFlush(display_);
+}
+
+void SoftwareOutputDeviceX11::EndPaint(const gfx::Rect& damage_rect,
+  DisplayResourceProvider * const resource_provider,
+  const OverlayCandidateList& overlay_list)
+{
+  // Release these locks at end of func - but allow reassignment before then
+  const std::unique_ptr<DisplayResourceProvider::ScopedReadLockSharedImageX11> lock(std::move(overlay_lock_));
+  // Ordering means sync will be released (on destruction) before overlay lock
+  const std::unique_ptr<XcbCookie> sync_cookie(std::move(last_cookie_));
+
+  damage_rect_ = damage_rect;
+  paint_surface();
+
+  for (const OverlayCandidate& ovly : overlay_list ) {
+
+    if (ovly.overlay_handled) {
+      if (!damage_rect.IsEmpty()) {
+        LOG(ERROR) << "Damage rect not empty: " << damage_rect.ToString();
+      }
+
+      overlay_lock_ = std::make_unique<DisplayResourceProvider::ScopedReadLockSharedImageX11>(
+          resource_provider, ovly.resource_id);
+
+      SharedImageX11 *const xshm = overlay_lock_->shared_image_x11();
+      if (xshm == nullptr){
+        LOG(ERROR) << "SharedMemory unexpectly null";
+        continue;
+      }
+
+      const gfx::Rect rect(gfx::ToEnclosingRect(ovly.display_rect));
+
+      if (!xshm->create_image(display_, attributes_))
+      {
+          LOG(ERROR) << "xshm.create_image failed!";
+          continue;
+      }
+
+      last_cookie_ = xshm->put_image(widget_, gc_, rect, gfx::Rect());
+    }
+  }
+  XFlush(display_);
+}
+
 }  // namespace viz
--- a/components/viz/service/display_embedder/software_output_device_x11.h
+++ b/components/viz/service/display_embedder/software_output_device_x11.h
@@ -5,9 +5,13 @@
 #ifndef COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_DEVICE_X11_H_
 #define COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_DEVICE_X11_H_
 
+#include <X11/Xlib.h>
+
 #include "base/macros.h"
 #include "base/threading/thread_checker.h"
+#include "components/viz/service/display/display_resource_provider.h"
 #include "components/viz/service/display/software_output_device.h"
+#include "components/viz/service/display_embedder/shared_image_x11.h"
 #include "components/viz/service/viz_service_export.h"
 #include "ui/gfx/native_widget_types.h"
 #include "ui/gfx/x/x11.h"
@@ -21,15 +25,48 @@
 
   ~SoftwareOutputDeviceX11() override;
 
+  void Resize(const gfx::Size& viewport_pixel_size, float scale_factor) override;
   void EndPaint() override;
+  void EndPaint(const gfx::Rect& damage_rect,
+    DisplayResourceProvider * const resource_provider,
+    const OverlayCandidateList& overlay_list) override;
+
+  bool use_shm() const;
 
  private:
+  void paint_surface();
+
   gfx::AcceleratedWidget widget_;
-  XDisplay* display_;
+  XDisplay* const display_;
   GC gc_;
   XWindowAttributes attributes_;
   THREAD_CHECKER(thread_checker_);
 
+  // Shared memory stuff
+
+  std::unique_ptr<DisplayResourceProvider::ScopedReadLockSharedImageX11> overlay_lock_;
+  std::unique_ptr<XcbCookie> last_cookie_;
+
+  int shm_n_;
+  class ShmDesc
+  {
+    sk_sp<SkSurface> surface_;
+    SkImageInfo req_ii_;
+    SkImageInfo cur_ii_;
+
+public:
+    scoped_refptr<SharedImageX11> xshm_;
+
+    ShmDesc();
+    virtual ~ShmDesc();
+    int attach(XDisplay * const display, const XWindowAttributes& attributes, const int stride, const int h);
+    void detach();
+    void destroy();
+    void resize(const SkImageInfo& info);
+    std::unique_ptr<XcbCookie> put_image(Drawable drawable, GC gc, const gfx::Rect& rect);
+    sk_sp<SkSurface> use_surface(XDisplay * const display, const XWindowAttributes& attributes);
+  } shm_descs_[2];
+
   DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceX11);
 };
 
--- /dev/null
+++ b/components/viz/service/display_embedder/software_output_surface_x_shm.cc
@@ -0,0 +1,24 @@
+#include "components/viz/service/display_embedder/software_output_surface_x_shm.h"
+
+#include "components/viz/service/display_embedder/compositor_overlay_candidate_validator_x_shm.h"
+
+namespace viz {
+
+SoftwareOutputSurfaceXShm::SoftwareOutputSurfaceXShm(
+    std::unique_ptr<SoftwareOutputDeviceX11> software_device_x11)
+  : SoftwareOutputSurface(std::unique_ptr<SoftwareOutputDevice>(std::move(software_device_x11))),
+    overlay_candidate_validator_(std::make_unique<CompositorOverlayCandidateValidatorXShm>(((SoftwareOutputDeviceX11 *)(software_device_.get()))->use_shm()))
+{
+}
+
+SoftwareOutputSurfaceXShm::~SoftwareOutputSurfaceXShm()
+{
+}
+
+OverlayCandidateValidator* SoftwareOutputSurfaceXShm::GetOverlayCandidateValidator() const
+{
+  return overlay_candidate_validator_.get();
+}
+
+} // viz
+
--- /dev/null
+++ b/components/viz/service/display_embedder/software_output_surface_x_shm.h
@@ -0,0 +1,26 @@
+#ifndef COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_SURFACE_X_SHM_H_
+#define COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_SURFACE_X_SHM_H_
+
+#include "components/viz/service/display_embedder/software_output_surface.h"
+#include "components/viz/service/display_embedder/software_output_device_x11.h"
+
+namespace viz {
+
+class VIZ_SERVICE_EXPORT SoftwareOutputSurfaceXShm : public SoftwareOutputSurface {
+ public:
+  explicit SoftwareOutputSurfaceXShm(
+    std::unique_ptr<SoftwareOutputDeviceX11> software_device_x11);
+  ~SoftwareOutputSurfaceXShm() override;
+
+  OverlayCandidateValidator* GetOverlayCandidateValidator() const override;
+
+ private:
+  std::unique_ptr<OverlayCandidateValidator> overlay_candidate_validator_;
+
+  DISALLOW_COPY_AND_ASSIGN(SoftwareOutputSurfaceXShm);
+};
+
+} // viz
+#endif
+
+
--- a/components/viz/service/frame_sinks/compositor_frame_sink_support.cc
+++ b/components/viz/service/frame_sinks/compositor_frame_sink_support.cc
@@ -547,6 +547,12 @@
   UpdateNeedsBeginFramesInternal();
 }
 
+void CompositorFrameSinkSupport::DidStretchFrame(uint32_t width, uint32_t height) {
+  if (client_)
+    client_->DidStretchFrame(width, height);
+}
+
+
 void CompositorFrameSinkSupport::DidRejectCompositorFrame(
     uint32_t presentation_token,
     bool request_presentation_feedback,
--- a/components/viz/service/frame_sinks/compositor_frame_sink_support.h
+++ b/components/viz/service/frame_sinks/compositor_frame_sink_support.h
@@ -104,6 +104,7 @@
       const std::vector<TransferableResource>& resources) override;
   void UnrefResources(const std::vector<ReturnedResource>& resources) override;
   void ReturnResources(const std::vector<ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override;
   void ReceiveFromChild(
       const std::vector<TransferableResource>& resources) override;
   // Takes the CopyOutputRequests that were requested for a surface with at
--- a/components/viz/service/frame_sinks/direct_layer_tree_frame_sink.h
+++ b/components/viz/service/frame_sinks/direct_layer_tree_frame_sink.h
@@ -95,6 +95,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   // ExternalBeginFrameSourceClient implementation:
--- a/components/viz/service/surfaces/surface.cc
+++ b/components/viz/service/surfaces/surface.cc
@@ -691,6 +691,13 @@
   }
 }
 
+void Surface::DidStretchFrame(uint32_t width, uint32_t height) {
+  if (surface_client_)
+    surface_client_->DidStretchFrame(width, height);
+  else
+    LOG(INFO) << "No surface_client_";
+}
+
 void Surface::ClearCopyRequests() {
   if (active_frame_data_) {
     for (const auto& render_pass : active_frame_data_->frame.render_pass_list) {
--- a/components/viz/service/surfaces/surface.h
+++ b/components/viz/service/surfaces/surface.h
@@ -119,6 +119,8 @@
   // Decrements the reference count on resources specified by |resources|.
   void UnrefResources(const std::vector<ReturnedResource>& resources);
 
+  void DidStretchFrame(uint32_t width, uint32_t height);
+
   bool needs_sync_tokens() const { return needs_sync_tokens_; }
 
   bool block_activation_on_parent() const {
--- a/components/viz/service/surfaces/surface_client.h
+++ b/components/viz/service/surfaces/surface_client.h
@@ -57,6 +57,9 @@
   // (where processed may mean the frame has been displayed, or discarded).
   virtual void OnSurfaceProcessed(Surface* surface) = 0;
 
+  // OK - this probably should be pure but that makes the patch bigger...
+  virtual void DidStretchFrame(uint32_t width, uint32_t height) {}
+
   // This is called when |surface| or one of its descendents is determined to be
   // damaged at aggregation time.
   virtual void OnSurfaceAggregatedDamage(
--- a/components/viz/test/fake_compositor_frame_sink_client.h
+++ b/components/viz/test/fake_compositor_frame_sink_client.h
@@ -25,6 +25,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   void clear_returned_resources() { returned_resources_.clear(); }
--- a/components/viz/test/test_layer_tree_frame_sink.h
+++ b/components/viz/test/test_layer_tree_frame_sink.h
@@ -105,6 +105,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   // DisplayClient implementation.
--- a/content/browser/browser_main_loop.cc
+++ b/content/browser/browser_main_loop.cc
@@ -587,7 +587,10 @@
 #endif
 
 #if defined(USE_X11)
-  if (UsingInProcessGpu()) {
+  // (Pi) The mmal shared memory passthrough requires MT X as the frame
+  // can be deleted (and detached) outside the display thread
+//  if (UsingInProcessGpu()) {
+  if (1) {
     if (!gfx::InitializeThreadedX11()) {
       LOG(ERROR) << "Failed to put Xlib into threaded mode.";
     }
--- a/content/browser/renderer_host/delegated_frame_host.h
+++ b/content/browser/renderer_host/delegated_frame_host.h
@@ -96,6 +96,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   // viz::HostFrameSinkClient implementation.
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -3133,6 +3133,15 @@
     switches::kIpcDumpDirectory,
     switches::kIpcFuzzerTestcase,
 #endif
+
+    switches::kMmalFrameBuffers,
+    switches::kMmalFrameCopy,    switches::kMmalSliceCopy,
+    switches::kMmalDecodeI420,   switches::kMmalDecodeOpaque,
+    switches::kMmalResizeIsp,    switches::kMmalResizeResizer,
+    switches::kMmalLowDelay,
+    switches::kMmalRedPixel,     switches::kMmalDecoders,
+    switches::kMmalDebugBench,   switches::kMmalDebugFps,
+    switches::kMmalDebugFixedSize,
   };
   renderer_cmd->CopySwitchesFrom(browser_cmd, kSwitchNames,
                                  arraysize(kSwitchNames));
--- a/content/browser/renderer_host/render_widget_host_view_child_frame.h
+++ b/content/browser/renderer_host/render_widget_host_view_child_frame.h
@@ -202,6 +202,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   // viz::HostFrameSinkClient implementation.
--- a/content/browser/sandbox_ipc_linux.cc
+++ b/content/browser/sandbox_ipc_linux.cc
@@ -8,6 +8,7 @@
 #include <stddef.h>
 #include <stdint.h>
 #include <string.h>
+#include <sys/ioctl.h>
 #include <sys/poll.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
@@ -123,6 +124,9 @@
       service_manager::SandboxLinux::METHOD_MAKE_SHARED_MEMORY_SEGMENT) {
     HandleMakeSharedMemorySegment(fd, iter, fds);
     return;
+  } else if (kind == service_manager::SandboxLinux::METHOD_OPEN_DEV_VCHIQ) {
+    HandleOpenDevVchiq(fd, iter, fds);
+    return;
   }
   NOTREACHED();
 }
@@ -146,6 +150,57 @@
   SendRendererReply(fds, reply, shm_fd);
 }
 
+#define IOCTL_MBOX_PROPERTY _IOWR(100, 0, char *)
+#define VCIO_PATH "/dev/vcio"
+
+static uint32_t pi_firmware_date()
+{
+  int vcio_fd = IGNORE_EINTR(open(VCIO_PATH, 0));
+
+  if (vcio_fd == -1) {
+    PLOG(ERROR) << "Failed to open " VCIO_PATH;
+    return 0;
+  }
+
+  uint32_t req_buf[256] = {
+    (4+3)*4, 0,  // 4 args, + 3 overhead
+    1, 4, 4, 0,  // args
+  };
+
+  int err = IGNORE_EINTR(ioctl(vcio_fd, IOCTL_MBOX_PROPERTY, req_buf));
+  uint32_t rv = req_buf[5];
+
+  if (err < 0) {
+    PLOG(ERROR) << VCIO_PATH ": ioctl";
+    rv = 0;
+  }
+
+  if (IGNORE_EINTR(close(vcio_fd)) < 0)
+    PLOG(ERROR) << VCIO_PATH ": close";
+  return rv;
+}
+
+void SandboxIPCHandler::HandleOpenDevVchiq(
+    int fd,
+    base::PickleIterator iter,
+    const std::vector<base::ScopedFD>& fds)
+{
+  const int vchiq_fd = IGNORE_EINTR(open("/dev/vchiq", O_RDWR));
+
+  if (vchiq_fd == -1) {
+    PLOG(ERROR) << "Failed to open vchiq";
+  }
+
+  base::Pickle reply;
+  reply.WriteUInt32(pi_firmware_date());
+  SendRendererReply(fds, reply, vchiq_fd);
+
+  if (vchiq_fd >= 0) {
+    if (IGNORE_EINTR(close(vchiq_fd)) < 0)
+      PLOG(ERROR) << "close";
+  }
+}
+
 void SandboxIPCHandler::SendRendererReply(
     const std::vector<base::ScopedFD>& fds,
     const base::Pickle& reply,
--- a/content/browser/sandbox_ipc_linux.h
+++ b/content/browser/sandbox_ipc_linux.h
@@ -37,6 +37,10 @@
                                      base::PickleIterator iter,
                                      const std::vector<base::ScopedFD>& fds);
 
+  void HandleOpenDevVchiq(int fd,
+                               base::PickleIterator iter,
+                               const std::vector<base::ScopedFD>& fds);
+
   void SendRendererReply(const std::vector<base::ScopedFD>& fds,
                          const base::Pickle& reply,
                          int reply_fd);
--- a/content/renderer/android/synchronous_layer_tree_frame_sink.h
+++ b/content/renderer/android/synchronous_layer_tree_frame_sink.h
@@ -116,6 +116,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   // viz::ExternalBeginFrameSourceClient overrides.
--- a/content/test/fake_renderer_compositor_frame_sink.h
+++ b/content/test/fake_renderer_compositor_frame_sink.h
@@ -34,6 +34,7 @@
   void OnBeginFramePausedChanged(bool paused) override {}
   void ReclaimResources(
       const std::vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
 
   // Resets test data.
   void Reset();
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -191,6 +191,21 @@
 
 }  // namespace autoplay
 
+const char kMmalFrameBuffers[]              = "mmal-frame-buffers";
+const char kMmalFrameCopy[]                 = "mmal-frame-copy";
+const char kMmalSliceCopy[]                 = "mmal-slice-copy";
+const char kMmalDecodeI420[]                = "mmal-decode-i420";
+const char kMmalDecodeOpaque[]              = "mmal-decode-opaque";
+const char kMmalResizeIsp[]                 = "mmal-resize-isp";
+const char kMmalResizeResizer[]             = "mmal-resize-resizer";
+const char kMmalLowDelay[]                  = "mmal-low-delay";
+const char kMmalRedPixel[]                  = "mmal-red-pixel";
+const char kMmalDecoders[]                  = "mmal-decoders";
+
+const char kMmalDebugBench[]                = "mmal-debug-bench";
+const char kMmalDebugFps[]                  = "mmal-debug-fps";
+const char kMmalDebugFixedSize[]            = "mmal-debug-fixed-size";
+
 }  // namespace switches
 
 namespace media {
--- a/media/base/media_switches.h
+++ b/media/base/media_switches.h
@@ -91,6 +91,21 @@
 
 }  // namespace autoplay
 
+MEDIA_EXPORT extern const char kMmalFrameBuffers[];
+MEDIA_EXPORT extern const char kMmalFrameCopy[];
+MEDIA_EXPORT extern const char kMmalSliceCopy[];
+MEDIA_EXPORT extern const char kMmalDecodeI420[];
+MEDIA_EXPORT extern const char kMmalDecodeOpaque[];
+MEDIA_EXPORT extern const char kMmalResizeIsp[];
+MEDIA_EXPORT extern const char kMmalResizeResizer[];
+MEDIA_EXPORT extern const char kMmalLowDelay[];
+MEDIA_EXPORT extern const char kMmalRedPixel[];
+MEDIA_EXPORT extern const char kMmalDecoders[];
+
+MEDIA_EXPORT extern const char kMmalDebugBench[];
+MEDIA_EXPORT extern const char kMmalDebugFps[];
+MEDIA_EXPORT extern const char kMmalDebugFixedSize[];
+
 }  // namespace switches
 
 namespace media {
--- a/media/base/video_decoder.h
+++ b/media/base/video_decoder.h
@@ -135,6 +135,9 @@
   // [|limits::kMinVideoDecodeThreads|, |limits::kMaxVideoDecodeThreads|].
   static int GetRecommendedThreadCount(int desired_threads);
 
+  // Alert that we would like a differet frame size
+  virtual void TryResizeFrame(uint32_t width, uint32_t height) {}
+
  protected:
   // Deletion is only allowed via Destroy().
   virtual ~VideoDecoder();
--- a/media/base/video_frame.cc
+++ b/media/base/video_frame.cc
@@ -1324,4 +1324,17 @@
   return plane_size;
 }
 
+// Frame tracking
+
+// Not supported by default
+bool VideoFrame::SetBitmapIdAndKillCB(const gpu::Mailbox& id, const base::Closure& kill) {
+  return false;
+}
+
+const gpu::Mailbox& VideoFrame::GetBitmapId() const {
+  static const gpu::Mailbox empty_mailbox;
+  NOTREACHED();
+  return empty_mailbox;
+}
+
 }  // namespace media
--- a/media/base/video_frame.h
+++ b/media/base/video_frame.h
@@ -42,6 +42,8 @@
 
 class MEDIA_EXPORT VideoFrame : public base::RefCountedThreadSafe<VideoFrame> {
  public:
+  typedef base::Callback<void(const gfx::Size&)> MmalResizeCB;
+
   enum {
     kFrameSizeAlignment = 16,
     kFrameSizePadding = 16,
@@ -422,6 +424,12 @@
   // Returns the offset into the shared memory where the frame data begins.
   size_t shared_memory_offset() const;
 
+#if 1
+  // Shared (mmal) frame tracking
+  virtual bool SetBitmapIdAndKillCB(const gpu::Mailbox& id, const base::Closure& kill);
+  virtual const gpu::Mailbox& GetBitmapId() const;
+#endif
+
 #if defined(OS_LINUX)
   // Returns a vector containing the backing DmaBufs for this frame. The number
   // of returned DmaBufs will be equal or less than the number of planes of
@@ -535,6 +543,10 @@
     data_[plane] = ptr;
   }
 
+  void set_mailbox_holder(const unsigned int plane, const gpu::MailboxHolder& mailbox_holder) {
+    mailbox_holders_[plane] = mailbox_holder;
+  }
+
  private:
   static scoped_refptr<VideoFrame> WrapExternalStorage(
       StorageType storage_type,
--- a/media/base/video_renderer_sink.h
+++ b/media/base/video_renderer_sink.h
@@ -38,6 +38,8 @@
     // not actually rendered.  Must be called before the next Render() call.
     virtual void OnFrameDropped() = 0;
 
+    virtual void TryResizeFrame(uint32_t width, uint32_t height) {}
+
     virtual ~RenderCallback() {}
   };
 
--- a/media/base/video_types.h
+++ b/media/base/video_types.h
@@ -77,6 +77,13 @@
       PIXEL_FORMAT_XBGR,  // Must always be equal to largest entry logged.
 };
 
+
+// *****
+// Alias MMAL to ARGB so it is easy to spot where I've used this
+// * In the fullness of time remove this and rename to actual fmt
+#define PIXEL_FORMAT_MMAL_BUFFER PIXEL_FORMAT_ARGB
+
+
 // Returns the name of a Format as a string.
 MEDIA_EXPORT std::string VideoPixelFormatToString(VideoPixelFormat format);
 
--- a/media/blink/video_frame_compositor.cc
+++ b/media/blink/video_frame_compositor.cc
@@ -179,6 +179,13 @@
   rendered_last_frame_ = true;
 }
 
+void VideoFrameCompositor::DidStretchFrame(uint32_t width, uint32_t height)
+{
+  base::AutoLock lock(callback_lock_);
+  if (callback_)
+    callback_->TryResizeFrame(width, height);
+}
+
 bool VideoFrameCompositor::UpdateCurrentFrame(base::TimeTicks deadline_min,
                                               base::TimeTicks deadline_max) {
   DCHECK(task_runner_->BelongsToCurrentThread());
--- a/media/blink/video_frame_compositor.h
+++ b/media/blink/video_frame_compositor.h
@@ -95,6 +95,7 @@
   bool HasCurrentFrame() override;
   scoped_refptr<VideoFrame> GetCurrentFrame() override;
   void PutCurrentFrame() override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override;
 
   // Returns |current_frame_|, without offering a guarantee as to how recently
   // it was updated. In certain applications, one might need to periodically
--- a/media/filters/BUILD.gn
+++ b/media/filters/BUILD.gn
@@ -5,6 +5,7 @@
 import("//build/config/jumbo.gni")
 import("//media/media_options.gni")
 import("//third_party/libaom/options.gni")
+import("//build/config/sysroot.gni")
 
 jumbo_source_set("filters") {
   # Do not expand the visibility here without double-checking with OWNERS, this
@@ -107,6 +108,7 @@
   ]
 
   libs = []
+  include_dirs = []
 
   if (proprietary_codecs) {
     sources += [
@@ -115,6 +117,19 @@
     ]
   }
 
+  # Really should have some sort of global enable_mmal switch
+  if (current_cpu == "arm" && is_linux) {
+    sources += [
+      "mmal_video_decoder.cc",
+      "mmal_video_decoder.h",
+    ]
+    include_dirs += [
+      "$target_sysroot/opt/vc/include",
+      "$target_sysroot/opt/vc/include/interface/vcos/pthreads",
+      "$target_sysroot/opt/vc/include/interface/vmcs_host/linux",
+    ]
+  }
+
   if (media_use_ffmpeg) {
     deps += [
       "//media/ffmpeg",
--- a/media/filters/decoder_stream.cc
+++ b/media/filters/decoder_stream.cc
@@ -993,6 +993,14 @@
   preparing_output_ = false;
 }
 
+template <DemuxerStream::Type StreamType>
+void DecoderStream<StreamType>::TryResizeFrame(uint32_t width, uint32_t height) const {}
+
+template <>
+void DecoderStream<DemuxerStream::VIDEO>::TryResizeFrame(uint32_t width, uint32_t height) const {
+  decoder_->TryResizeFrame(width, height);
+}
+
 template class DecoderStream<DemuxerStream::VIDEO>;
 template class DecoderStream<DemuxerStream::AUDIO>;
 
--- a/media/filters/decoder_stream.h
+++ b/media/filters/decoder_stream.h
@@ -153,6 +153,8 @@
     return fallback_buffers_.size();
   }
 
+  void TryResizeFrame(uint32_t width, uint32_t height) const;
+
  private:
   enum State {
     STATE_UNINITIALIZED,
@@ -309,6 +311,9 @@
 template <>
 int DecoderStream<DemuxerStream::AUDIO>::GetMaxDecodeRequests() const;
 
+template <>
+void DecoderStream<DemuxerStream::VIDEO>::TryResizeFrame(uint32_t width, uint32_t height) const;
+
 using VideoDecoderStream = DecoderStream<DemuxerStream::VIDEO>;
 using AudioDecoderStream = DecoderStream<DemuxerStream::AUDIO>;
 
--- /dev/null
+++ b/media/filters/mmal_video_decoder.cc
@@ -0,0 +1,4312 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+
+// ***
+// gpu_factories passed to constructor so we may consider generating h/w frames
+// * only want to do this is we have a h/w compositor
+// * if we can generate CMA handles we may be able to use then for full
+//   s/w passthrough, as we should both
+//      be able to use them in xcb_sm_put_image
+//      and be able to decode into them directly
+// Maybe look at
+//  media/video/gpu_memory_buffer_video_frame_pool.cc
+// for inspiration on what is needed.
+
+
+#include "media/filters/mmal_video_decoder.h"
+
+#include <GLES2/gl2.h>
+#include <GLES2/gl2ext.h>
+#include <stddef.h>
+#include <stdint.h>
+
+#include <algorithm>
+#include <string>
+
+//#include "base/base_switches.h"
+#include "base/bind.h"
+#include "base/callback_helpers.h"
+#include "base/command_line.h"
+#include "base/location.h"
+#include "base/single_thread_task_runner.h"
+#include "base/pickle.h"
+#include "base/memory/ptr_util.h"
+#include "base/posix/unix_domain_socket.h"
+//#include "content/public/common/content_switches.h"
+#include "media/base/bind_to_current_loop.h"
+#include "media/base/decoder_buffer.h"
+#include "media/base/limits.h"
+#include "media/base/media_switches.h"
+#include "media/base/timestamp_constants.h"
+#include "media/base/video_frame.h"
+#include "media/base/video_util.h"
+#include "media/video/gpu_video_accelerator_factories.h"
+#include "mojo/public/cpp/system/buffer.h"
+#include "mojo/public/cpp/system/platform_handle.h"
+#include "services/service_manager/sandbox/linux/sandbox_linux.h"
+#include "services/service_manager/zygote/common/common_sandbox_support_linux.h"
+
+extern "C" {
+#include <interface/mmal/mmal.h>
+#include <interface/mmal/mmal_buffer.h>
+#include <interface/mmal/mmal_parameters_video.h>
+#include <interface/mmal/util/mmal_util.h>
+#include <interface/mmal/util/mmal_util_params.h>
+#include <interface/mmal/util/mmal_default_components.h>
+#include <interface/mmal/util/mmal_connection.h>
+#include <interface/mmal/core/mmal_buffer_private.h>  // *** debug
+#include <interface/mmal/vc/mmal_vc_api.h>
+#include <interface/vmcs_host/vc_vchi_gencmd.h>
+}
+
+#include <iomanip>
+
+// Debug & test defines
+#define OPT_FRAME_COPY_STASHED 1
+#define TRACE_COMPONENT_CREATION 0
+#define TRACE_TRAMPOLINE 0
+#define TRACE_FRAME_STASH_NEW  0  // Traces memory allocated by FrameStash
+
+// Missing defn
+#define MMAL_COMPONENT_DEFAULT_RESIZER "vc.ril.resize"
+#define MMAL_COMPONENT_ISP_RESIZER "vc.ril.isp"
+
+#define MMAL_SLICE_HEIGHT 16
+#define MMAL_ALIGN_W      32
+#define MMAL_ALIGN_H      16
+
+#define MMAL_LIMIT_WIDTH  VCOS_ALIGN_UP(1920, MMAL_ALIGN_W)
+#define MMAL_LIMIT_HEIGHT VCOS_ALIGN_UP(1088, MMAL_ALIGN_H)
+//#define MMAL_LIMIT_WIDTH  VCOS_ALIGN_UP(2048, MMAL_ALIGN_W)
+//#define MMAL_LIMIT_HEIGHT VCOS_ALIGN_UP(1280, MMAL_ALIGN_H)
+
+#define FRAME_COPY_DEFAULT_BUFFERS      2
+#define SLICE_COPY_DEFAULT_BUFFERS      16
+
+#define MAX_COPY_FRAMES_IN_FLIGHT       8
+
+#define ipc_fd ::service_manager::GetSandboxFD
+
+namespace media {
+
+enum FrameCopyMode {
+  unset,
+  SLICE,
+  FRAME_I420,
+  FRAME_ARGB,
+  FRAME_GPU
+};
+
+// Not strictly a decoder count - this is inced @ initialisation
+static volatile base::subtle::Atomic32 decoder_count = 0;
+
+// Supported decoder bitmap (indexed by VideoCodec)
+static unsigned int supported_video_codecs = 0;
+
+// Task runner - current SingleThread - probably no reason
+// why it shouldn't be Sequenced so typedef for ease of changing
+typedef scoped_refptr<base::SequencedTaskRunner> MmalTaskRunner;
+
+
+// Some classes that we have fwd refs to
+class MmalConnectedPort;
+class MmalComponent;
+
+// ----------------------------------------------------------------------------
+//
+// Misc helper fns
+
+static inline size_t RoundUp(size_t value, size_t alignment) {
+  return ((value + (alignment - 1)) & ~(alignment - 1));
+}
+
+// Zap & release buffer
+static void buffer_release(MMAL_BUFFER_HEADER_T * const buffer)
+{
+  mmal_buffer_header_reset(buffer);
+  mmal_buffer_header_release(buffer);
+}
+
+// Calculate pixel aspect ratio
+static gfx::Size par_from_sizes(const gfx::Size& coded, const gfx::Size& natural)
+{
+  uint32_t a = coded.width() * natural.height();
+  uint32_t b = coded.height() * natural.width();
+
+  // Deal with the trivial case
+
+  if (a == b) {
+    return gfx::Size(1, 1);
+  }
+
+  // reduce - probably not needed but it might well save overflow
+  // or precision reduction later in the code
+  // We only expect to do this at init time so inefficiency isn't important
+
+  static const uint32_t primes[] = {2, 3, 5, 7, 11, 13, 17, 19};
+  for (int i = 0; i != sizeof(primes)/sizeof(primes[0]); ++i) {
+    const uint32_t p = primes[i];
+    while (a % p == 0 && b % p == 0) {
+      a /= p;
+      b /= p;
+    }
+  }
+
+  return gfx::Size(b, a);
+}
+
+// Convert a time_t to a printable string
+// * Surely there is a std C++ fn for this?
+static std::string strgmtimet(const time_t tt)
+{
+  char tbuf[32];
+  struct tm tm;
+  gmtime_r(&tt, &tm);
+  tbuf[sizeof(tbuf)-1] = 0;
+  snprintf(tbuf, sizeof(tbuf) - 1, "%04d-%02d-%02d %02d:%02d:%02d UTC",
+      tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
+      tm.tm_hour, tm.tm_min, tm.tm_sec);
+  return std::string(tbuf);
+}
+
+static std::string fourcc_string(const MMAL_FOURCC_T fourcc)
+{
+  char buf[10];
+  mmal_4cc_to_string(buf, sizeof(buf), fourcc);
+  return std::string(buf);
+}
+
+
+static VideoCodec fourcc_to_video_codec(const MMAL_FOURCC_T x)
+{
+  switch (x) {
+    case MMAL_ENCODING_H264:
+      return VideoCodec::kCodecH264;
+    case MMAL_ENCODING_WVC1:
+      return VideoCodec::kCodecVC1;
+    case MMAL_ENCODING_MP1V:
+    case MMAL_ENCODING_MP2V:
+      return VideoCodec::kCodecMPEG2;
+    case MMAL_ENCODING_MP4V:
+      return VideoCodec::kCodecMPEG4;
+    case MMAL_ENCODING_THEORA:
+      return VideoCodec::kCodecTheora;
+    case MMAL_ENCODING_VP8:
+      return VideoCodec::kCodecVP8;
+    // Missing FOURCC for
+    // kCodecVP9,
+    // kCodecHEVC,
+    default:
+      break;
+  }
+  return VideoCodec::kUnknownVideoCodec;
+}
+
+static MMAL_FOURCC_T video_codec_to_fourcc(const VideoCodec x)
+{
+  switch (x) {
+    case VideoCodec::kCodecH264:
+      return MMAL_ENCODING_H264;
+    case VideoCodec::kCodecVC1:
+      return MMAL_ENCODING_WVC1;
+    case VideoCodec::kCodecMPEG2:
+      return MMAL_ENCODING_MP2V;
+    case VideoCodec::kCodecMPEG4:
+      return MMAL_ENCODING_MP4V;
+    case VideoCodec::kCodecTheora:
+      return MMAL_ENCODING_THEORA;
+    case VideoCodec::kCodecVP8:
+      return MMAL_ENCODING_VP8;
+    // Missing FOURCC for
+    // kCodecVP9,
+    // kCodecHEVC,
+    default:
+      break;
+  }
+  return MMAL_ENCODING_UNKNOWN;
+}
+
+#if 0
+static MMAL_FOURCC_T video_pixel_format_to_fourcc(const VideoPixelFormat pixel_format)
+{
+  switch (pixel_format) {
+    case PIXEL_FORMAT_I420:
+      return MMAL_ENCODING_I420;
+    case PIXEL_FORMAT_ARGB:
+      return MMAL_ENCODING_BGRA;
+    case PIXEL_FORMAT_ABGR:
+      return MMAL_ENCODING_RGBA;
+    default:
+      break;
+  }
+  return MMAL_ENCODING_UNKNOWN;
+}
+#endif
+
+static gfx::BufferFormat fourcc_to_gfx_buffer_format(const MMAL_FOURCC_T frame_encoding)
+{
+  switch (frame_encoding) {
+    case MMAL_ENCODING_BGRA:
+      return gfx::BufferFormat::BGRA_8888;
+    case MMAL_ENCODING_RGBA:
+      return gfx::BufferFormat::RGBA_8888;
+    default:
+      LOG(WARNING) << __func__ << ": Unexpected fourcc: " << fourcc_string(frame_encoding);
+      break;
+  }
+  return gfx::BufferFormat::RGBA_8888;  // ** We don't have unknown
+}
+
+static const char * frame_copy_mode_str(const FrameCopyMode mode)
+{
+  switch (mode) {
+    case FrameCopyMode::unset:
+      return "unset";
+    case FrameCopyMode::SLICE:
+      return "SLICE";
+    case FrameCopyMode::FRAME_I420:
+      return "FRAME_I420";
+    case FrameCopyMode::FRAME_ARGB:
+      return "FRAME_ARGB";
+    case FrameCopyMode::FRAME_GPU:
+      return "FRAME_GPU";
+    default:
+      break;
+  }
+  return "???";
+}
+
+static inline uint32_t hashid(const gpu::Mailbox& id)
+{
+  uint32_t x = 0;
+  for (uint32_t c : id.name) {
+    x = x * 67 + c;
+  }
+  return x;
+}
+
+//-----------------------------------------------------------------------------
+
+
+class MmalVideoDecoder::Options
+{
+  const bool single_process_;
+  const bool frame_copy_;
+  const bool slice_copy_;
+  const bool red_pixel_;
+  const bool decode_opaque_;
+  const bool decode_i420_;
+  const bool resize_isp_;
+  const bool resize_resizer_;
+  const bool low_delay_;
+  const unsigned int frame_buffers_;
+  const unsigned int decoders_;
+
+  const bool debug_bench_;
+  const bool debug_fps_;
+  const gfx::Size debug_fixed_size_;
+
+  size_t gpu_mem_;
+  uint32_t firmware_date_;
+  bool gpu_frames_;
+
+  static unsigned int cl_uint(const base::CommandLine& cmd_line, const char name[], const unsigned int def_val = 0)
+  {
+      unsigned int val;
+      return base::StringToUint(cmd_line.GetSwitchValueNative(name), &val) ? val : def_val;
+  }
+
+  static bool cl_flag(const base::CommandLine& cmd_line, const char name[])
+  {
+      return cmd_line.HasSwitch(name);
+  }
+
+  static gfx::Size cl_size(const base::CommandLine& cmd_line, const char name[])
+  {
+      const char * const cl(cmd_line.GetSwitchValueNative(name).c_str());
+      char * eoi = NULL;
+      const unsigned long w = strtoul(cl, &eoi, 10);
+      if (*eoi != 'x' && *eoi != 'X') {
+        return gfx::Size();
+      }
+      const unsigned long h = strtoul(eoi + 1, &eoi, 10);
+      if (*eoi != '\0') {
+        return gfx::Size();
+      }
+      return gfx::Size(w, h);
+  }
+
+  struct FirmwareDates {
+    static constexpr uint32_t HasOpaque = 1477958400;  // 2016-11-01
+    static constexpr uint32_t HasIsp = 1477958400;  // 2016-11-01
+  };
+
+  Options(const base::CommandLine& cmd_line) :
+    single_process_(cl_flag(cmd_line, "single-process" /*switches::kSingleProcess*/)),  // Just too hard to get libs right
+    frame_copy_(cl_flag(cmd_line, switches::kMmalFrameCopy)),
+    slice_copy_(cl_flag(cmd_line, switches::kMmalSliceCopy)),
+    red_pixel_(cl_flag(cmd_line, switches::kMmalRedPixel)),
+    decode_opaque_(cl_flag(cmd_line, switches::kMmalDecodeOpaque)),
+    decode_i420_(cl_flag(cmd_line, switches::kMmalDecodeI420)),
+    resize_isp_(cl_flag(cmd_line, switches::kMmalResizeIsp)),
+    resize_resizer_(cl_flag(cmd_line, switches::kMmalResizeResizer)),
+    low_delay_(cl_flag(cmd_line, switches::kMmalLowDelay)),
+    frame_buffers_(cl_uint(cmd_line, switches::kMmalFrameBuffers)),
+    decoders_(cl_uint(cmd_line, switches::kMmalDecoders, 1)),
+    debug_bench_(cl_flag(cmd_line, switches::kMmalDebugBench)),
+    debug_fps_(cl_flag(cmd_line, switches::kMmalDebugFps)),
+    debug_fixed_size_(cl_size(cmd_line, switches::kMmalDebugFixedSize)),
+    gpu_mem_(0),
+    firmware_date_(0),
+    gpu_frames_(false)
+  {
+  }
+
+  bool opaque_good() const
+  {
+    return firmware_date_ >= FirmwareDates::HasOpaque;
+  }
+
+  bool isp_resize_good() const
+  {
+    return firmware_date_ >= FirmwareDates::HasIsp &&
+      gpu_mem_ >= (76 << 20);  // Take 76M as threshold for ISP use
+  }
+
+public:
+  static std::unique_ptr<Options> Create(const base::CommandLine& cmd_line = *base::CommandLine::ForCurrentProcess())
+  {
+    return std::unique_ptr<Options>(new Options(cmd_line));
+  }
+
+  // Default encoding now opaque
+  MMAL_FOURCC_T decoder_out_encoding() const
+  {
+    return  decode_i420_ || !(decode_opaque_ || opaque_good()) ?
+      MMAL_ENCODING_I420 :
+      MMAL_ENCODING_OPAQUE;
+  }
+
+  const char * resizer_component_name() const
+  {
+    return resize_resizer_ || !(resize_isp_ || isp_resize_good()) ?
+      MMAL_COMPONENT_DEFAULT_RESIZER :
+      MMAL_COMPONENT_ISP_RESIZER;
+  }
+
+  FrameCopyMode frame_copy_mode(const bool has_slice_resize) const
+  {
+    return frame_copy_ ? FrameCopyMode::FRAME_ARGB :
+      slice_copy_ ? FrameCopyMode::SLICE :
+      has_slice_resize && !isp_resize_good() ? FrameCopyMode::SLICE :
+//      gpu_frames_ ? FrameCopyMode::FRAME_GPU :
+      gpu_frames_ ? FrameCopyMode::FRAME_I420 :
+        FrameCopyMode::FRAME_ARGB;
+  }
+
+  unsigned int frame_buffers(const FrameCopyMode copy_mode) const
+  {
+    return frame_buffers_ != 0 ? frame_buffers_ :
+      copy_mode == FrameCopyMode::SLICE ? SLICE_COPY_DEFAULT_BUFFERS : FRAME_COPY_DEFAULT_BUFFERS;
+  }
+
+  bool single_process() const
+  {
+    return single_process_;
+  }
+
+  unsigned int max_decoders() const
+  {
+    return decoders_;
+  }
+
+  bool red_pixel() const
+  {
+    return red_pixel_;
+  }
+
+  bool low_delay(const bool low_delay_req = false) const
+  {
+    return low_delay_ || low_delay_req;
+  }
+
+  bool debug_bench() const
+  {
+    return debug_bench_;
+  }
+
+  bool debug_fps() const
+  {
+    return debug_bench_ || debug_fps_;
+  }
+
+  bool debug_fixed_size_set() const
+  {
+    return debug_fixed_size_.width() > 0 && debug_fixed_size_.height()  > 0;
+  }
+
+  gfx::Size debug_fixed_size() const
+  {
+    return debug_fixed_size_;
+  }
+
+  bool gpu_frames() const
+  {
+    return gpu_frames_;
+  }
+
+  void set_gpu_mem(const size_t size)
+  {
+    gpu_mem_ = size;
+  }
+
+  void set_firmware_date(const uint32_t date)
+  {
+    firmware_date_ = date;
+  }
+
+  void set_gpu_frames(const bool gpu_frames)
+  {
+    gpu_frames_ = gpu_frames;
+  }
+
+  std::string ToString() const
+  {
+    std::ostringstream s;
+    s << "mmal frame_buffers=" << frame_buffers_ <<
+       ", mmal_X_copy (f/s)=" << frame_copy_ << "/" << slice_copy_ <<
+       ", mmal_low_delay=" << low_delay_ <<
+       ", mmal_decode_i420/opaque=" << decode_i420_ << "/" << decode_opaque_ <<
+       ", mmal_resize_isp=" << resize_isp_ <<
+       ", mmal_decoders=" << decoders_ <<
+       ", mmal_debug_bench=" << debug_bench_ <<
+       ", mmal_debug_fps=" << debug_fps_ <<
+       ", mmal_debug_fixed_size=" << debug_fixed_size_.ToString() <<
+       ", gpu_mem=" << gpu_mem_ <<
+       ", firmware_date=" << strgmtimet(firmware_date_) <<
+       ", gpu_frames=" << gpu_frames_;
+    return s.str();
+  }
+
+  std::string OptString() const
+  {
+    std::ostringstream s;
+    s << "isp_resize_good=" << isp_resize_good() <<
+      ", frame_copy_mode=" << frame_copy_mode_str(frame_copy_mode(true)) <<
+      ", resizer_component=" << resizer_component_name() <<
+      ", encoding=" << fourcc_string(decoder_out_encoding());
+    return s.str();
+  }
+};
+
+
+//-----------------------------------------------------------------------------
+
+
+#if TRACE_FRAME_STASH_NEW
+volatile base::subtle::Atomic32 total_stash_alloc = 0;
+#endif
+
+#define TRACE_DESC 0
+
+class FrameDesc
+{
+protected:
+  const uint32_t buffer_size_;
+  const gfx::Size frame_size_;
+
+  FrameDesc(const size_t buffer_size, const gfx::Size& frame_size) :
+    buffer_size_(buffer_size),
+    frame_size_(frame_size)
+  {
+#if TRACE_DESC
+    LOG(INFO) << __func__ << ": " << (void *)this;
+#endif
+  }
+
+public:
+  virtual ~FrameDesc() {
+#if TRACE_DESC
+    LOG(INFO) << __func__ << ": " << (void *)this;
+#endif
+  };
+
+  size_t size() const {
+    return buffer_size_;
+  }
+
+  const gfx::Size& frame_size() const {
+    return frame_size_;
+  }
+
+  virtual uint8_t * frame() const = 0;
+  virtual base::SharedMemoryHandle shared_memory() const = 0;
+  virtual void set_id_and_kill_cb(const gpu::Mailbox& id, const base::Closure& kill_cb) = 0;
+  virtual const gpu::Mailbox& get_id() const = 0;
+  virtual bool reuse(const MMAL_FOURCC_T frame_encoding, const size_t buffer_size, const gfx::Size& frame_size) = 0;
+};
+
+
+class FrameDescShmSinglePlane : public FrameDesc
+{
+  std::unique_ptr<base::SharedMemory> shm_;
+  gpu::Mailbox id_;
+  base::Closure on_kill_cb_;
+
+public:
+  FrameDescShmSinglePlane(const size_t size, const gfx::Size& frame_size) :
+    FrameDesc(size, frame_size)
+  {
+#if TRACE_FRAME_STASH_NEW
+    const base::subtle::Atomic32 talloc = base::subtle::NoBarrier_AtomicIncrement(&total_stash_alloc, (base::subtle::Atomic32)size);
+    LOG(ERROR) << "New frame: size=" << size << ", total=" << talloc;
+#endif
+
+    auto mojo_buf = mojo::SharedBufferHandle::Create(size);
+    if (!mojo_buf->is_valid()) {
+      LOG(ERROR) << "Browser failed to allocate shared memory";
+      return;
+    }
+
+    base::SharedMemoryHandle shm;
+    if (mojo::UnwrapSharedMemoryHandle(std::move(mojo_buf), &shm, nullptr,
+                                       nullptr) != MOJO_RESULT_OK) {
+      LOG(ERROR) << "Browser failed to allocate shared memory";
+      return;
+    }
+    shm_ = std::unique_ptr<base::SharedMemory>(new base::SharedMemory(shm, false));
+
+    if (!shm_->Map(size))
+    {
+      LOG(ERROR) << "### Shm creation failed";
+      return;
+    }
+  }
+
+  ~FrameDescShmSinglePlane() override
+  {
+//    LOG(ERROR) << " destroy frame desc fd=" << (shm_ == nullptr ? -99 : shm_->handle().fd);
+    if (!on_kill_cb_.is_null()) {
+      on_kill_cb_.Run();
+    }
+#if TRACE_FRAME_STASH_NEW
+    if (shm_->memory() != nullptr) {
+      const base::subtle::Atomic32 talloc = base::subtle::NoBarrier_AtomicIncrement(&total_stash_alloc, -(base::subtle::Atomic32)size_);
+      LOG(ERROR) << "Delete frame: size=" << size_ << ", total=" << talloc;
+    }
+#endif
+  }
+
+  uint8_t * frame() const override
+  {
+    return (uint8_t *)shm_->memory();
+  }
+
+  base::SharedMemoryHandle shared_memory() const override
+  {
+    return shm_->handle();
+  }
+
+  void set_id_and_kill_cb(const gpu::Mailbox& id, const base::Closure& kill_cb) override
+  {
+    if (id.IsZero()) {
+      return;
+    }
+    if (!id_.IsZero()) {
+      if (id != id_) {
+        LOG(ERROR) << "FrameDesc::" << __func__ << " ids don't match: " << hashid(id) << " -> " << hashid(id_);
+      }
+      return;
+    }
+    id_ = id;
+//    LOG(ERROR) << "FrameDesc::" << __func__ << " id=" << MmalVideoFrame::hashid(id);
+    if (!kill_cb.is_null()) {
+      on_kill_cb_ = kill_cb;
+    }
+  }
+
+  const gpu::Mailbox& get_id() const override
+  {
+    return id_;
+  }
+
+  bool reuse(const MMAL_FOURCC_T frame_encoding, const size_t buffer_size, const gfx::Size& frame_size) override {
+    return buffer_size == buffer_size_;
+  }
+
+};
+
+
+
+class FrameDescGPUSinglePlane : public FrameDesc
+{
+  GpuVideoAcceleratorFactories* const gpu_factories_;
+
+  std::unique_ptr<gfx::GpuMemoryBuffer> gpu_buf_;
+  gpu::Mailbox id_;
+
+  const gfx::Size frame_size_;
+  const gfx::BufferFormat buffer_format_;
+  unsigned int texture_id_ = 0;
+  unsigned int image_id_ = 0;
+  gpu::Mailbox mailbox_;  // ?? Use Frame mailbox or id_ ??
+
+public:
+  FrameDescGPUSinglePlane(GpuVideoAcceleratorFactories* const gpu_factories,
+                          const size_t buffer_size, const gfx::Size& frame_size, const gfx::BufferFormat buffer_format) :
+    FrameDesc(buffer_size, frame_size),
+    gpu_factories_(gpu_factories),
+    gpu_buf_(gpu_factories->CreateGpuMemoryBuffer(frame_size, buffer_format, gfx::BufferUsage::SCANOUT_CPU_READ_WRITE)),
+    frame_size_(frame_size),
+    buffer_format_(buffer_format)
+  {
+    gpu::gles2::GLES2Interface* const gles2 = gpu_factories_->ContextGL();
+    gles2->ActiveTexture(GL_TEXTURE0);
+
+    unsigned texture_target = gpu_factories_->ImageTextureTarget(buffer_format_);
+    gles2->GenTextures(1, &texture_id_);
+    gles2->BindTexture(texture_target, texture_id_);
+    gles2->TexParameteri(texture_target, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    gles2->TexParameteri(texture_target, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+    gles2->TexParameteri(texture_target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+    gles2->TexParameteri(texture_target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+    gles2->ProduceTextureDirectCHROMIUM(texture_id_,
+                                        mailbox_.name);
+
+    gpu_buf_->Map();
+#if TRACE_DESC
+    LOG(INFO) << __func__ << ": " << frame_size.ToString() << ", type=" << gpu_buf_->GetType();
+#endif
+  }
+
+  void DeleteTexture()
+  {
+    gpu::gles2::GLES2Interface* const gles2 = gpu_factories_->ContextGL();
+    if (!gles2)
+      return;
+
+    if (image_id_) {
+      gles2->DestroyImageCHROMIUM(image_id_);
+      image_id_ = 0;
+    }
+    if (texture_id_) {
+      gles2->DeleteTextures(1, &texture_id_);
+      texture_id_ = 0;
+    }
+  }
+
+  ~FrameDescGPUSinglePlane() override {
+    DeleteTexture();
+  };
+
+  gpu::MailboxHolder Bind()
+  {
+    gpu::gles2::GLES2Interface* const gles2 = gpu_factories_->ContextGL();
+    if (!gles2) {
+      LOG(WARNING) << "GL context gone away!";
+      return gpu::MailboxHolder();
+    }
+
+    // Set up the planes creating the mailboxes needed to refer to the textures.
+    const unsigned int gl_format = buffer_format_ == gfx::BufferFormat::RGBA_8888 ? GL_RGBA : GL_BGRA_EXT;
+
+    unsigned texture_target = gpu_factories_->ImageTextureTarget(buffer_format_);
+
+    // Bind the texture and create or rebind the image.
+    gles2->BindTexture(texture_target, texture_id_);
+
+    if (gpu_buf_ && !image_id_) {
+      image_id_ = gles2->CreateImageCHROMIUM(
+          gpu_buf_->AsClientBuffer(), frame_size_.width(), frame_size_.height(), gl_format);
+    } else if (image_id_) {
+      gles2->ReleaseTexImage2DCHROMIUM(texture_target, image_id_);
+    }
+
+    if (image_id_)
+      gles2->BindTexImage2DCHROMIUM(texture_target, image_id_);
+
+     gpu::MailboxHolder mailbox_holder(mailbox_, gpu::SyncToken(), texture_target);
+
+     // Insert a sync_token, this is needed to make sure that the textures the
+     // mailboxes refer to will be used only after all the previous commands posted
+     // in the command buffer have been processed.
+     //
+     // * In a multi-plane form we would want to set all mailboxes with the same token
+     gpu::SyncToken sync_token;
+     gles2->GenUnverifiedSyncTokenCHROMIUM(sync_token.GetData());
+     mailbox_holder.sync_token = sync_token;
+
+     return mailbox_holder;
+  }
+
+  uint8_t * frame() const override {
+    return (uint8_t *)gpu_buf_->memory(0);
+  }
+
+  base::SharedMemoryHandle shared_memory() const override {
+    return base::SharedMemoryHandle();
+  }
+
+  void set_id_and_kill_cb(const gpu::Mailbox& id, const base::Closure& kill_cb) override {
+    // ****
+    id_ = id;
+  }
+
+  const gpu::Mailbox& get_id() const override {
+    return id_;
+  }
+
+  bool reuse(const MMAL_FOURCC_T frame_encoding, const size_t buffer_size, const gfx::Size& frame_size) override {
+    return frame_size == frame_size_;
+  }
+
+};
+
+
+
+// Simple class to stash frames
+// Thread unsafe - use external locks
+class FrameStash
+{
+  size_t size_ = 0;
+  gfx::Size frame_size_;
+  MMAL_FOURCC_T frame_encoding_ = MMAL_ENCODING_UNKNOWN;
+
+  std::stack<FrameDesc *> frames_;
+  GpuVideoAcceleratorFactories* const gpu_factories_;
+
+  FrameDesc * frame_pop()
+  {
+    FrameDesc * const frame = frames_.top();
+    frames_.pop();
+    return frame;
+  }
+
+  void empty_frames()
+  {
+    while (!frames_.empty()) {
+      delete frame_pop();
+    }
+  }
+
+public:
+  FrameStash(GpuVideoAcceleratorFactories* const gpu_factories) :
+    gpu_factories_(gpu_factories)
+  {
+  }
+
+  virtual ~FrameStash()
+  {
+    empty_frames();
+  }
+
+  void free_frame(FrameDesc * const frame)
+  {
+    if (!frame->reuse(frame_encoding_, size_, frame_size_)) {
+      delete frame;
+    }
+    else {
+      frames_.push(frame);
+    }
+  }
+
+  FrameDesc * alloc_frame(const MMAL_FOURCC_T frame_encoding, const size_t buffer_size, const gfx::Size& frame_size)
+  {
+    if (buffer_size != size_) {
+      empty_frames();
+    }
+
+    size_ = buffer_size;
+    frame_size_ = frame_size;
+    frame_encoding_ = frame_encoding;
+
+    FrameDesc * const frame = (buffer_size == 0) ? nullptr :
+      !frames_.empty() ?
+        frame_pop() :
+      gpu_factories_ ?
+        (FrameDesc *)new FrameDescGPUSinglePlane(gpu_factories_, buffer_size, frame_size,
+                                             fourcc_to_gfx_buffer_format(frame_encoding)) :
+        (FrameDesc *)new FrameDescShmSinglePlane(buffer_size, frame_size);
+
+    return frame;
+  }
+
+  void free_all_frames()
+  {
+    empty_frames();
+    size_ = 0;
+    frame_size_ = gfx::Size();
+    frame_encoding_ = MMAL_ENCODING_UNKNOWN;
+  }
+
+  GpuVideoAcceleratorFactories* gpu_factories() const {
+    return gpu_factories_;
+  }
+};
+
+//-----------------------------------------------------------------------------
+
+// Trampoline class
+// This allows us to attach callbacks from VideoFrames to our
+// component / port without it locking down the component.
+// If the component is dead by the time the callback arrives then it is simply
+// dropped on the floor
+//
+// * Extended well past original intention - rather more than just
+//   a trampoline now... Should be renamed
+
+// A number of functions in this class (in particular "kill") look like they
+// might cause suicide which would be bad as the AutoLock would be removed
+// after it was destroyed. This is prevented by the fact that this class should
+// only be accessed though scoped_refptrs so the calling fn should have a ref
+// on us for at least the duration of the call.
+
+class MmalTrampoline : public base::RefCountedThreadSafe<MmalTrampoline>
+{
+  typedef base::RepeatingCallback<void(const int)> MmalCopiedFramedDestructionCB;
+#if TRACE_TRAMPOLINE
+  // These two are only used for debug
+  static int seq_count_; // Seq number counter
+  const int seq_;  // Debugging sequence number
+#endif
+
+  base::Lock lock_;
+  int in_flight_;
+  bool low_traced_;
+  const int max_in_flight_;
+  MmalCopiedFramedDestructionCB destruction_cb_;
+  FrameStash frame_stash_;
+
+  friend base::RefCountedThreadSafe<MmalTrampoline>;
+  virtual ~MmalTrampoline()
+  {
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "@@@ " << __func__ << "[" << seq_ << "]";
+#endif
+  }
+public:
+  MmalTrampoline(
+      GpuVideoAcceleratorFactories* const gpu_factories,
+      const int max_in_flight,
+      const MmalCopiedFramedDestructionCB& destruction_cb) :
+#if TRACE_TRAMPOLINE
+    seq_(++seq_count_),
+#endif
+    in_flight_(0),
+    low_traced_(true),
+    max_in_flight_(max_in_flight),
+    destruction_cb_(destruction_cb),
+    frame_stash_(gpu_factories)
+  {
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "@@@ " <<  __func__ << "[" << seq_ << "]";
+#endif
+  }
+
+  void kill()
+  {
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "--- "  << "[" << seq_ << "] Trampoline::kill";
+#endif
+    base::AutoLock lock(lock_);
+    destruction_cb_.Reset();
+    frame_stash_.free_all_frames();
+  }
+
+  void free_frame(FrameDesc * const frame, const int buffer_count)
+  {
+    lock_.Acquire();
+
+    // Some callbacks can call us back
+    // We don't have recursive locks - so copy the callback for later use
+    // outside the lock
+    const MmalCopiedFramedDestructionCB cb = destruction_cb_;
+
+    frame_stash_.free_frame(frame);
+
+    // in_flight_ can exceed max_in_flight_ by the number of frames
+    // that can fit in the mmal port.  Avoid stuffing more than we have had returned.
+    const int stuff_count = std::min(in_flight_ - max_in_flight_, buffer_count);
+
+    if ((in_flight_ -= buffer_count) < 0)
+      LOG(FATAL) << "Buffers in flight underflow";
+
+#if TRACE_TRAMPOLINE
+    LOG(ERROR)  << "[" << seq_ << "] killed=" << destruction_cb_.is_null() << ", in_flight:" << in_flight_ << "/" << max_in_flight_ <<
+      ", BCount=" << buffer_count <<
+      ", Stuff=" << stuff_count;
+#endif
+    // Some hysteresis on in_flight logging - do not log if killed
+    if (in_flight_ < max_in_flight_ / 2 && !low_traced_ && !cb.is_null()) {
+      low_traced_ = true;
+      LOG(INFO) << "--- In flight low: " << in_flight_ << "/" << max_in_flight_;
+    }
+    else if (in_flight_ >= max_in_flight_ - 1 && low_traced_) {
+      low_traced_ = false;
+      LOG(INFO) << "--- In flight OK: " << in_flight_ << "/" << max_in_flight_;
+    }
+
+    lock_.Release();
+
+    if (stuff_count > 0 && !cb.is_null())
+      cb.Run(std::min(buffer_count, stuff_count));
+  }
+
+  FrameDesc * alloc_frame(const MMAL_FOURCC_T es_format, const size_t buffer_size, const gfx::Size& frame_size)
+  {
+    base::AutoLock lock(lock_);
+    return frame_stash_.alloc_frame(es_format, buffer_size, frame_size);
+  }
+
+  bool recycle_buffer_in_flight(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    lock_.Acquire();
+    const bool wants_recycle = (++in_flight_ <= max_in_flight_);
+    lock_.Release();
+
+    if (wants_recycle)
+    {
+#if TRACE_TRAMPOLINE
+      LOG(ERROR) << "[" << seq_ << "] recycle: in flight=" << in_flight_;
+#endif
+      return true;
+    }
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "[" << seq_ << "] release, in_flight=" << in_flight_;
+#endif
+
+    // Was Deadlock opportunity
+    // ?? pool starvation opportunity now
+
+    buffer_release(buffer);
+    return false;
+  }
+
+  bool is_stalling() const
+  {
+    return in_flight_ >= max_in_flight_;
+  }
+
+  // GPU frame only callbacks
+
+  void MailboxHoldersWaited(FrameDescGPUSinglePlane * frame_desc)
+  {
+#if TRACE_DESC
+    LOG(INFO) << __func__ << ": " << (void*)frame_desc;
+#endif
+    free_frame(frame_desc, 1);
+  }
+
+  void MailboxHoldersReleased(FrameDescGPUSinglePlane * frame_desc, const gpu::SyncToken& release_sync_token)
+  {
+    // ?? Check running thread
+#if TRACE_DESC
+    LOG(INFO) << __func__ << ": " << (void*)frame_desc;
+#endif
+
+    // TODO(sandersd): Remove once https://crbug.com/819914 is fixed. Correct
+    // clients must wait for READ_LOCK_FENCES_ENABLED frames to be read before
+    // returning the frame, so waiting on the sync token should be a no-op.
+    //
+    // If the context is lost, SignalSyncToken() drops its callbacks. Using a
+    // ScopedClosureRunner ensures MailboxHoldersWaited() is called if that
+    // happens.
+    std::unique_ptr<base::ScopedClosureRunner> waited_cb =
+        std::make_unique<base::ScopedClosureRunner>(base::BindOnce(
+            &::media::MmalTrampoline::MailboxHoldersWaited, this,
+            frame_desc));
+    frame_stash_.gpu_factories()->SignalSyncToken(
+        release_sync_token,
+        base::BindOnce(&base::ScopedClosureRunner::RunAndReset,
+                       std::move(waited_cb)));
+  }
+
+};
+
+#if TRACE_TRAMPOLINE
+int MmalTrampoline::seq_count_ = 0;
+#endif
+
+//--------------------------------------------- --------------------------------
+
+
+class MmalVideoFrame : public VideoFrame
+{
+protected:
+  gpu::Mailbox id_;
+  base::Closure kill_id_;
+//  int shmid_;
+
+  ~MmalVideoFrame() override {
+#if TRACE_DESC
+    LOG(INFO) << "@@@ " << __func__ << ": " << (void*)this;
+#endif
+  };
+
+public:
+  MmalVideoFrame(
+      const VideoFrameLayout& vfl,
+      const gfx::Rect& visible_rect,
+      const gfx::Size& natural_size,
+      const base::TimeDelta timestamp,
+      const gpu::Mailbox& id) :
+      VideoFrame(vfl,
+        STORAGE_UNOWNED_MEMORY, visible_rect, natural_size, timestamp),
+    id_(id)
+  {
+#if TRACE_DESC
+    LOG(INFO) << "@@@ " << __func__ << ": " << (void*)this << ": " << visible_rect.ToString();
+#endif
+  }
+
+
+  static scoped_refptr<MmalVideoFrame> Coerce(const scoped_refptr<VideoFrame>& frame)
+  {
+    if (frame->format() != PIXEL_FORMAT_MMAL_BUFFER) {
+      NOTREACHED();
+      return scoped_refptr<MmalVideoFrame>();
+    }
+    return scoped_refptr<MmalVideoFrame>(static_cast<MmalVideoFrame *>(frame.get()));
+  }
+
+//  int get_shmid() const
+//  {
+//    return shmid_;
+//  }
+
+  uint32_t hashid() const
+  {
+    return media::hashid(id_);
+  }
+
+  bool SetBitmapIdAndKillCB(const gpu::Mailbox& id, const base::Closure& kill) override {
+    kill_id_ = kill;
+    id_ = id;
+    return true;
+  }
+
+  const gpu::Mailbox& GetBitmapId() const override {
+    return id_;
+  }
+};
+
+class MmalVideoFrameYUV : public MmalVideoFrame
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  FrameDesc * const frame_desc_;
+protected:
+  ~MmalVideoFrameYUV() override
+  {
+//  LOG(ERROR) << "@@@ " << __func__ << ", fd=" << frame_desc_->shared_memory().fd << ", pid=" << getpid();
+//    frame_desc_->set_id_and_kill_cb(id_, kill_id_);
+    trampoline_->free_frame(frame_desc_, 1);
+  }
+
+public:
+  MmalVideoFrameYUV(
+      MMAL_BUFFER_HEADER_T * const buffer,
+      const scoped_refptr<MmalTrampoline>& trampoline,
+      const gfx::Size& coded_size,
+      const size_t stride,
+      const gfx::Rect& visible_rect,
+      const gfx::Size& natural_size,
+      const base::TimeDelta timestamp) :
+    MmalVideoFrame(VideoFrameLayout::CreateWithStrides(PIXEL_FORMAT_I420, visible_rect.size(),
+        {stride, stride / 2, stride / 2},
+        {stride * coded_size.height(), stride * coded_size.height() / 4, stride * coded_size.height() / 4}).value(),
+      visible_rect, natural_size, timestamp, gpu::Mailbox()),
+    trampoline_(trampoline),
+    frame_desc_((FrameDesc *)buffer->user_data)
+  {
+    set_data(0, buffer->data + buffer->type->video.offset[0]);
+    set_data(1, buffer->data + buffer->type->video.offset[1]);
+    set_data(2, buffer->data + buffer->type->video.offset[2]);
+
+    AddSharedMemoryHandle(frame_desc_->shared_memory());
+//    shmid_ = frame_desc_->shmid();
+
+    buffer->data = nullptr;
+    buffer->alloc_size = 0;
+    buffer->user_data = nullptr;
+
+  }
+};
+
+//-----------------------------------------------------------------------------
+
+class MmalCopiedVideoFrame : public media::MmalVideoFrame
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  FrameDesc * frame_desc_;
+  int buffer_count_;
+
+  ~MmalCopiedVideoFrame() override;
+
+public:
+  // ****** fixme
+  MmalCopiedVideoFrame(const scoped_refptr<MmalTrampoline>& trampoline,
+      const gfx::Size& size,
+      const base::TimeDelta timestamp = kNoTimestamp) :
+      MmalVideoFrame(
+        VideoFrameLayout::CreateWithStrides(PIXEL_FORMAT_MMAL_BUFFER, size,
+                {size.width()},
+                {size.width() * size.height()}).value(),
+        gfx::Rect(size), size, timestamp, gpu::Mailbox()),
+    trampoline_(trampoline),
+    buffer_count_(0)
+  {
+    // Allow 1 line overread (see VideoFrame::AllocateYUV)
+    const size_t height = RoundUp(rows(0) + 1, kFrameSizeAlignment * 2);
+    const size_t stride = RoundUp(row_bytes(0), kFrameSizeAlignment);
+    const size_t data_size = height * stride + kFrameSizePadding;
+
+    frame_desc_ = trampoline_->alloc_frame(MMAL_ENCODING_BGRA, data_size, gfx::Size(stride, height));
+    set_data(0, frame_desc_->frame());
+    AddSharedMemoryHandle(frame_desc_->shared_memory());
+//    shmid_ = frame_desc_->shmid();
+    id_ = frame_desc_->get_id();
+  }
+
+  void inc_buffer_count()
+  {
+    ++buffer_count_;
+  }
+};
+
+MmalCopiedVideoFrame::~MmalCopiedVideoFrame()
+{
+  frame_desc_->set_id_and_kill_cb(id_, kill_id_);
+  trampoline_->free_frame(frame_desc_, buffer_count_);
+}
+
+//-----------------------------------------------------------------------------
+//
+// VideoFrame class that deals with the case where the frame is copied into
+// an mmal buffer by the firmware and we then move the frame buffer from the mmal
+// buffer header to our frame.  This requires more careful buffer management than
+// the copy variation.  See MmalFramePool for the buffer pool logic.
+
+class MmalStashedVideoFrame : public media::MmalVideoFrame
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  FrameDesc * const frame_desc_;
+  const int buffer_count_;
+
+  ~MmalStashedVideoFrame() override;
+
+public:
+  // Create a VideoFrame and move the frame stash into it from
+  // the mmal buffer
+  MmalStashedVideoFrame(MMAL_BUFFER_HEADER_T * const buffer,
+      const scoped_refptr<MmalTrampoline>& trampoline,
+      const gfx::Size& coded_size,
+      const size_t stride,
+      const gfx::Rect& visible_rect,
+      const gfx::Size& natural_size,
+      const base::TimeDelta timestamp = kNoTimestamp) :
+    MmalVideoFrame(
+      VideoFrameLayout::CreateWithStrides(PIXEL_FORMAT_MMAL_BUFFER, visible_rect.size(),
+        {stride},
+        {stride * coded_size.height()}).value(),
+      visible_rect, natural_size, timestamp,
+        ((const FrameDesc *)buffer->user_data)->get_id()),
+    trampoline_(trampoline),
+    frame_desc_((FrameDesc *)buffer->user_data),
+    buffer_count_(1)
+  {
+    set_data(0, buffer->data);
+    AddSharedMemoryHandle(frame_desc_->shared_memory());
+//    shmid_ = frame_desc_->shmid();
+
+    buffer->data = nullptr;
+    buffer->alloc_size = 0;
+    buffer->user_data = nullptr;
+  }
+};
+
+MmalStashedVideoFrame::~MmalStashedVideoFrame()
+{
+//  LOG(ERROR) << "@@@ " << __func__ << ", fd=" << frame_desc_->shared_memory().fd << ", pid=" << getpid();
+  frame_desc_->set_id_and_kill_cb(id_, kill_id_);
+  trampoline_->free_frame(frame_desc_, buffer_count_);
+}
+
+// ----------------------------------------------------------------------------
+
+class MmalGPUVideoFrame : public media::MmalVideoFrame
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  FrameDescGPUSinglePlane * const frame_desc_;
+//  const int buffer_count_;
+
+  ~MmalGPUVideoFrame() override;
+
+public:
+  // Create a VideoFrame and move the frame stash into it from
+  // the mmal buffer
+  MmalGPUVideoFrame(MMAL_BUFFER_HEADER_T * const buffer,
+      const scoped_refptr<MmalTrampoline>& trampoline,
+      const gfx::Size& coded_size,
+      const size_t stride,
+      const gfx::Rect& visible_rect,
+      const gfx::Size& natural_size,
+      const base::TimeDelta timestamp = kNoTimestamp) :
+    MmalVideoFrame(
+      VideoFrameLayout::CreateWithStrides(PIXEL_FORMAT_MMAL_BUFFER, visible_rect.size(),
+        {stride},
+        {stride * coded_size.height()}).value(),
+      visible_rect, natural_size, timestamp,
+        ((const FrameDesc *)buffer->user_data)->get_id()),
+    trampoline_(trampoline),
+    frame_desc_(static_cast<FrameDescGPUSinglePlane *>((FrameDesc *)buffer->user_data))
+//    buffer_count_(1)
+  {
+    set_data(0, buffer->data);
+    AddSharedMemoryHandle(frame_desc_->shared_memory());
+//    shmid_ = frame_desc_->shmid();
+
+    buffer->data = nullptr;
+    buffer->alloc_size = 0;
+    buffer->user_data = nullptr;
+
+    set_mailbox_holder(0, frame_desc_->Bind());
+
+    SetReleaseMailboxCB(
+        base::BindOnce(&MmalTrampoline::MailboxHoldersReleased, trampoline_, base::Unretained(frame_desc_))); // ** Do I need ref counting on this??
+
+#if TRACE_DESC
+    LOG(INFO) << __func__ << ": HasTextures: " << HasTextures() << ", this=" << (void*)this << ", desc=" << (void*)frame_desc_;
+#endif
+
+    bool allow_overlay = true;  // Output format dependant, but I think true for everything we care about
+
+    metadata()->SetBoolean(VideoFrameMetadata::ALLOW_OVERLAY, allow_overlay);
+    metadata()->SetBoolean(VideoFrameMetadata::READ_LOCK_FENCES_ENABLED, true);
+  }
+
+
+
+};
+
+MmalGPUVideoFrame::~MmalGPUVideoFrame()
+{
+//  LOG(ERROR) << "@@@ " << __func__ << ", fd=" << frame_desc_->shared_memory().fd << ", pid=" << getpid();
+//  frame_desc_->set_id_and_kill_cb(id_, kill_id_);
+//  trampoline_->free_frame(frame_desc_, buffer_count_);
+}
+
+
+// ----------------------------------------------------------------------------
+
+class VcGenCmd {
+  bool init_good;
+  VCHI_INSTANCE_T vchi_instance;
+  VCHI_CONNECTION_T *vchi_connection = nullptr;
+
+public:
+  VcGenCmd() :
+    init_good(false),
+    vchi_instance(0),
+    vchi_connection(nullptr)
+  {
+    if (vchi_initialise(&vchi_instance) != 0) {
+      LOG(ERROR) << "VCHI initialization failed";
+      return;
+    }
+
+    //create a vchi connection
+    if (vchi_connect(NULL, 0, vchi_instance) != 0) {
+      LOG(ERROR) << "VCHI connection failed";
+      return;
+    }
+
+    vc_vchi_gencmd_init(vchi_instance, &vchi_connection, 1);
+    init_good = true;
+  }
+
+  ~VcGenCmd()
+  {
+    if (init_good) {
+      int err;
+
+      vc_gencmd_stop();
+
+      //close the vchi connection
+      if ((err = vchi_disconnect(vchi_instance)) != 0) {
+        LOG(ERROR) << "VCHI disconnect failed, err=" << err;
+      }
+    }
+  }
+
+  size_t get_memory_gpu() const
+  {
+    int err;
+
+    if (!init_good) {
+      return 0;
+    }
+
+    //send the gencmd for the argument
+    if ((err = vc_gencmd_send("get_mem gpu")) != 0) {
+      LOG(ERROR) << "vc_gencmd_send returned " << err;
+      return 0;
+    }
+
+    char rbuf[1024] = {0};
+    if ((err = vc_gencmd_read_response(rbuf, sizeof(rbuf) - 1)) != 0) {
+      LOG(ERROR) << "vc_gencmd_read_response returned " << err;
+      return 0;
+    }
+
+    if (strncmp(rbuf, "gpu=", 4) != 0) {
+      LOG(ERROR) << "Unexpected response for get_mem gpu: '" << rbuf << "'";
+      return 0;
+    }
+
+    char * p;
+    unsigned long m = strtoul(rbuf + 4, &p, 10);
+
+    if (p[0] != 'M' || p[1] !='\0') {
+      LOG(ERROR) << "Unexpected numeric for get_mem gpu: '" << rbuf << "'";
+      return 0;
+    }
+
+    return m << 20;
+  }
+};
+
+class MmalVcInit : public base::RefCountedThreadSafe<MmalVcInit>
+{
+  static base::Lock& lock_;
+  static int ref_count_;
+
+  // Firmware & gpu_mem aren't going to change mid run so read once and
+  // use everywhere
+  static uint32_t firmware_date_;
+  static size_t gpu_mem_;
+
+  bool init_done_;
+
+  friend base::RefCountedThreadSafe<MmalVcInit>;
+  virtual ~MmalVcInit()
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ Destroy MmalVcInit done=" << init_done_ << ", count=" << ref_count_;
+#endif
+
+    if (init_done_) {
+      base::AutoLock lock(lock_);
+      if (--ref_count_ == 0) {
+        mmal_vc_deinit();
+      }
+    }
+  }
+
+  MmalVcInit(const bool single_process) :
+    init_done_(false)
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ Create MmalVcInit";
+#endif
+
+    base::AutoLock lock(lock_);
+
+    // Already done?
+    if (ref_count_ != 0)
+    {
+      ++ref_count_;
+      init_done_ = true;
+      return;
+    }
+
+    int vfd = -1;
+    if (!single_process) {
+      base::Pickle request;
+      request.WriteInt(::service_manager::SandboxLinux::METHOD_OPEN_DEV_VCHIQ);
+
+      uint8_t reply_buf[512];
+      const ssize_t reply_len = base::UnixDomainSocket::SendRecvMsg(
+          ipc_fd(), reply_buf, sizeof(reply_buf), &vfd, request);
+
+      if (reply_len == -1 || vfd == -1) {
+        LOG(ERROR) << "### Failed to open /dev/vchiq";
+        return;
+      }
+
+      // * Single process version of this?
+      base::Pickle reply(reinterpret_cast<char *>(reply_buf), reply_len);
+      base::PickleIterator pickle_iter(reply);
+      if (!pickle_iter.ReadUInt32(&firmware_date_))
+      {
+        LOG(ERROR) << "### Failed to get firmware date";
+      }
+    }
+
+    MMAL_STATUS_T err = mmal_vc_init_fd(vfd);
+
+    // The passed fd is at a minimum duped so close now
+    // we want to close on error too
+    IGNORE_EINTR(close(vfd));
+
+    if (err != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_vc_init_fd failed: fd=" << vfd << ", err=" << err;
+      return;
+    }
+
+    ++ref_count_;
+    init_done_ = true;
+
+    gpu_mem_ = VcGenCmd().get_memory_gpu();
+  }
+
+public:
+  static scoped_refptr<MmalVcInit> Init(const bool single_process)
+  {
+    scoped_refptr<MmalVcInit> vci(new MmalVcInit(single_process));
+
+    if (!vci->init_done_)
+      return nullptr;
+
+    return vci;
+  }
+
+  uint32_t firmware_date() const
+  {
+    return firmware_date_;
+  }
+
+  uint32_t gpu_mem() const
+  {
+    return gpu_mem_;
+  }
+};
+
+
+base::Lock& MmalVcInit::lock_ = *new base::Lock();  // Somewhat nasty way of avoiding exit-time destruction
+int MmalVcInit::ref_count_ = 0;
+uint32_t MmalVcInit::firmware_date_;
+size_t MmalVcInit::gpu_mem_;
+
+// ----------------------------------------------------------------------------
+
+// Pool base class - can be instantiated
+class MmalPool
+{
+  const scoped_refptr<MmalVcInit> vc_init_;
+
+public:
+  typedef base::Callback<bool(MMAL_BUFFER_HEADER_T * buffer)> MmalPoolBufferReleaseCB;
+
+private:
+  MmalPoolBufferReleaseCB pool_cb_;
+
+protected:
+  virtual bool do_pool_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    return pool_cb_.Run(buffer);
+  }
+
+private:
+  static MMAL_BOOL_T static_pool_cb(MMAL_POOL_T *pool, MMAL_BUFFER_HEADER_T *buffer, void *userdata)
+  {
+    return ((MmalPool *)userdata)->do_pool_cb(buffer);
+  }
+
+protected:
+  MMAL_POOL_T * pool_;
+
+  MmalPool(const scoped_refptr<MmalVcInit>& vc_init) :
+    vc_init_(vc_init),
+    pool_(nullptr)
+  {
+  }
+
+  // Must be called as part of create if you ever want callbacks to work
+  void set_static_pool_cb()
+  {
+    mmal_pool_callback_set(pool_, static_pool_cb, this);
+  }
+
+public:
+  // N.B. Overriding classes are responsible for freeing pool_ correctly
+  virtual ~MmalPool()
+  {
+  }
+
+  virtual MMAL_BUFFER_HEADER_T * get_timeout(const uint32_t timeout_ms)
+  {
+    return mmal_queue_timedwait(pool_->queue, timeout_ms);
+  }
+
+  virtual MMAL_BUFFER_HEADER_T * get()
+  {
+    return mmal_queue_get(pool_->queue);
+  }
+
+  virtual void put(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    mmal_queue_put(pool_->queue, buffer);
+  }
+
+  // Do the equivalent of put then get
+  // Will refresh buffer->data if required
+  virtual MMAL_BUFFER_HEADER_T * put_get(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    return buffer;
+  }
+
+  uint32_t length() const
+  {
+    return mmal_queue_length(pool_->queue);
+  }
+
+  // Pool size (not data size)
+  uint32_t size() const
+  {
+    return pool_->headers_num;
+  }
+
+  // Thing we are servicing may have changed shape
+  // By default ignore
+  virtual int port_resized(const uint32_t num, const uint32_t buf_size, const gfx::Size& frame_size)
+  {
+    return 0;
+  }
+
+  virtual int create(const MMAL_FOURCC_T es_format, const uint32_t num, const uint32_t buf_size, const gfx::Size& frame_size) = 0;
+
+  // Enable/disable aren't required fns but add helpful hints
+  // to some derived classes
+  // * Could be used to debug unexpected pool movement
+  virtual int disable()
+  {
+    pool_cb_.Reset();
+    return 0;
+  }
+
+  virtual int enable(const MmalPoolBufferReleaseCB& cb)
+  {
+    pool_cb_ = cb;
+    return 0;
+  }
+
+  // This isn't exactly part of a base pool implementation
+  // but it saves a spurious extra layer
+  virtual void set_trampoline(const scoped_refptr<MmalTrampoline>& trampoline)
+  {
+  }
+};
+
+//-----------------------------------------------------------------------------
+//
+// Pool attached to a port
+class MmalPortPool : public MmalPool
+{
+  MMAL_PORT_T * const port_;
+public:
+  MmalPortPool(const scoped_refptr<MmalVcInit>& vc_init, MMAL_PORT_T * const port) :
+    MmalPool(vc_init),
+    port_(port)
+  {
+  }
+
+  ~MmalPortPool() override
+  {
+    if (pool_ != NULL) {
+      mmal_port_pool_destroy(port_, pool_);
+    }
+  }
+
+  int create(const MMAL_FOURCC_T es_format, const uint32_t num, const uint32_t buf_size, const gfx::Size& frame_size) override
+  {
+    if ((pool_ = mmal_port_pool_create(port_, num, buf_size)) == NULL)
+    {
+      LOG(ERROR) << "### mmal_port_pool_create failed: " << num << "*" << buf_size;
+      return -1;
+    }
+    set_static_pool_cb();
+    return 0;
+  }
+};
+
+//-----------------------------------------------------------------------------
+//
+// Pool not attached to a port
+
+class MmalUserPool : public MmalPool
+{
+public:
+  MmalUserPool(const scoped_refptr<MmalVcInit>& vc_init) :
+    MmalPool(vc_init)
+  {
+  }
+
+  ~MmalUserPool() override
+  {
+    if (pool_ != NULL) {
+      mmal_pool_destroy(pool_);
+    }
+  }
+
+  int create(const MMAL_FOURCC_T es_format, const uint32_t num, const uint32_t buf_size, const gfx::Size& frame_size) override
+  {
+    if ((pool_ = mmal_pool_create(num, buf_size)) == NULL)
+    {
+      LOG(ERROR) << "### mmal_pool_create failed: " << num << "*" << buf_size;
+      return -1;
+    }
+    set_static_pool_cb();
+    return 0;
+  }
+};
+
+//-----------------------------------------------------------------------------
+//
+// Pool that has detachable frame buffers allocated by our trampoline
+// Buffers in the pool have no frame buffers attached
+// Buffers are attached on get and detached on release
+// * For a more generic version we could have callback alloc/free fns
+class MmalFramePool : public MmalUserPool
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  size_t buffer_size_ = 0;
+  gfx::Size frame_size_;
+  MMAL_FOURCC_T frame_encoding_;
+
+  MMAL_BUFFER_HEADER_T * attach_data_buffer(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    // Ignore null
+    if (buffer != nullptr) {
+      if (buffer->data != NULL) {
+        LOG(FATAL) << "Buffer already in use";
+      }
+
+      FrameDesc * frame;
+      if ((frame = trampoline_->alloc_frame(frame_encoding_, buffer_size_, frame_size_)) == nullptr)
+      {
+        LOG(ERROR) << "### " << __func__ << ": alloc frame failed";
+        // If we cannot alloc then release buffer back to pool as we are about
+        // to lose track of it
+        buffer_release(buffer);
+        return nullptr;
+      }
+      buffer->user_data = frame;
+      buffer->data = frame->frame();
+      buffer->alloc_size = frame->size();
+    }
+    return buffer;
+  }
+
+  MMAL_BUFFER_HEADER_T * detach_data_buffer(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer != nullptr && buffer->data != nullptr) {
+      // This is called on buffer release so should have no "in-flight" component
+      trampoline_->free_frame((FrameDesc *)buffer->user_data, 0);
+      buffer->user_data = nullptr;
+      buffer->data = nullptr;
+      buffer->alloc_size = 0;
+    }
+    return buffer;  // For convienience
+  }
+
+protected:
+  bool do_pool_cb(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    return MmalUserPool::do_pool_cb(detach_data_buffer(buffer));
+  }
+
+public:
+  MmalFramePool(const scoped_refptr<MmalVcInit>& vc_init) :
+    MmalUserPool(vc_init)
+  {
+  }
+
+  int create(const MMAL_FOURCC_T es_format, const uint32_t num, const uint32_t buf_size, const gfx::Size& frame_size) override
+  {
+    if (MmalUserPool::create(es_format, num, 0, frame_size) != 0) {
+      return -1;
+    }
+
+    buffer_size_ = buf_size;
+    frame_encoding_ = es_format;
+    frame_size_ = frame_size;
+    return 0;
+  }
+
+  MMAL_BUFFER_HEADER_T * get_timeout(const uint32_t timeout_ms) override
+  {
+    return attach_data_buffer(MmalUserPool::get_timeout(timeout_ms));
+  }
+
+  MMAL_BUFFER_HEADER_T * get() override
+  {
+    return attach_data_buffer(MmalUserPool::get());
+  }
+
+  void put(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    MmalUserPool::put(detach_data_buffer(buffer));
+  }
+
+  // This is effectively a realloc to the current size and will
+  // attach a buffer if none was attached before
+  // Useful when recycling a buffer directly back into a port
+  MMAL_BUFFER_HEADER_T * put_get(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    if (buffer->alloc_size == buffer_size_)
+      return buffer;
+
+    return attach_data_buffer(detach_data_buffer(buffer));
+  }
+
+  int disable() override
+  {
+    // Avoid keeping an otherwise unused trampoline alive longer than needed
+    trampoline_ = nullptr;
+    return MmalUserPool::disable();
+  }
+
+  int port_resized(const uint32_t num, const uint32_t buf_size, const gfx::Size& frame_size) override
+  {
+    // Remember for future allocation and that is all we want to do
+    buffer_size_ = buf_size;
+    frame_size_ = frame_size;
+    return 0;
+  }
+
+  // As this has no locking this should only be called when disabled
+  // (in most cases this means that the port we are servicing is disabled)
+  void set_trampoline(const scoped_refptr<MmalTrampoline>& trampoline) override
+  {
+    trampoline_ = trampoline;
+  }
+};
+
+//=============================================================================
+//
+// Wrapper for an mmal port
+
+class MmalPort
+{
+  // Actually connection should be a subclass?
+  friend class MmalConnection;
+
+protected:
+  const scoped_refptr<MmalVcInit> vc_init_;
+
+  MMAL_PORT_T * port_;
+  bool killing_;
+
+public:
+  virtual void event_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    LOG(ERROR) << "### Unexpected ES data";
+    mmal_buffer_header_release(buffer);
+  }
+
+  virtual void cmd_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer->cmd == MMAL_EVENT_ERROR) {
+      LOG(WARNING) << "### Mmal reports error " << *(uint32_t *)buffer->data;
+    } else if (buffer->cmd == MMAL_EVENT_FORMAT_CHANGED) {
+      mmal_log_dump_port(port_);
+      const MMAL_EVENT_FORMAT_CHANGED_T *const fc = mmal_event_format_changed_get(buffer);
+      LOG(INFO) << "Mmal format changed: size_min:" << fc->buffer_size_min <<
+        ", num_min:" << fc->buffer_num_min <<
+          ", size_rec:" << fc->buffer_size_recommended <<
+          ", num_rec:" << fc->buffer_num_recommended;
+      if (fc->format != NULL) {
+        mmal_log_dump_format(fc->format);
+      }
+    } else {
+        char s[20];
+        LOG(WARNING) << "### Mmal unexpected command: " << mmal_4cc_to_string(s, sizeof(s), buffer->cmd);
+    }
+
+    // Commands are allocated from a different pool to ES data
+    // return to sender...
+    mmal_buffer_header_release(buffer);
+  }
+
+private:
+  void callback_common(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer->cmd != 0) {
+      // Cmd buffers are not allocated from the main pool
+      cmd_cb(buffer);
+    }
+    else
+    {
+      if (killing_) {
+        // If flushing always release the buffer
+        mmal_buffer_header_release(buffer);
+      }
+      else {
+        event_cb(buffer);
+      }
+    }
+  }
+
+  static void callback(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buffer)
+  {
+    MmalPort *p = static_cast<MmalPort*>((void*)port->userdata);
+
+    if (p == NULL) {
+      LOG(ERROR) << __func__ << "### Port NULL";
+    }
+    else
+    {
+      p->callback_common(buffer);
+    }
+  }
+
+public:
+  virtual int enable()
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+
+    if (killing_) {
+      LOG(ERROR) << "### port enable when killed";
+      return -1;
+    }
+
+    if ((err = mmal_port_enable(port_, callback)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_enable failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  virtual int disable()
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+
+    if (port_ != NULL && port_->is_enabled) {
+      err = mmal_port_disable(port_);
+    }
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  bool is_enabled() const
+  {
+    return port_ != nullptr && port_->is_enabled;
+  }
+
+  virtual int commit()
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+
+    if ((err = mmal_port_format_commit(port_)) != MMAL_SUCCESS)
+    {
+      LOG(ERROR) << "### mmal_port_format_commit failed: err=" << err;
+      mmal_log_dump_port(port_);
+    }
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  // (stride_in_pixels , (padded_)height)
+  gfx::Size frame_size() const
+  {
+    // * Could have a Video sub-class and lose this test
+    return port_->format->type != MMAL_ES_TYPE_VIDEO ? gfx::Size() :
+        gfx::Size(port_->format->es->video.width, port_->format->es->video.height);
+  }
+
+  uint32_t buffer_size() const
+  {
+    return port_->buffer_size;
+  }
+
+  uint32_t buffer_num() const
+  {
+    return port_->buffer_num;
+  }
+
+  // This set of fns are overridden by MmalConnectedPort
+  // to provide max of connected ports
+  virtual uint32_t buffer_size_recommended() const
+  {
+    return port_->buffer_size_recommended;
+  }
+
+  virtual uint32_t buffer_size_min() const
+  {
+    return port_->buffer_size_recommended;
+  }
+
+  virtual uint32_t buffer_num_recommended() const
+  {
+    return port_->buffer_num_recommended;
+  }
+
+  virtual uint32_t buffer_num_min() const
+  {
+    return port_->buffer_num_min;
+  }
+
+  virtual int set_buffers(const uint32_t size, const uint32_t num)
+  {
+    port_->buffer_num = num;
+    port_->buffer_size = size;
+    return 0;
+  }
+
+  int set_buffers_recommended()
+  {
+    return set_buffers(buffer_size_recommended(), buffer_num_recommended());
+  }
+
+  int set_parameter(const uint32_t param, const uint32_t val) const
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+    if ((err = mmal_port_parameter_set_uint32(port_, param, val)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_parameter_set_uint32 failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  inline int set_parameter(const uint32_t param, const int val) const
+  {
+    return set_parameter(param, (uint32_t)(val));
+  }
+
+  int set_parameter(const uint32_t param, const bool val) const
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+    if ((err = mmal_port_parameter_set_boolean(port_, param, val ? MMAL_TRUE : MMAL_FALSE)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_parameter_set_boolean failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  int get_parameter(MMAL_PARAMETER_HEADER_T * const param) const
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+    if ((err = mmal_port_parameter_get(port_, param)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_parameter_get failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  // class for storing the supported encodings parameter info
+  class SupportedEncodings
+  {
+    static const int max_encodings_ = 64;
+    struct {
+       MMAL_PARAMETER_HEADER_T header_;
+       MMAL_FOURCC_T encodings_[max_encodings_];
+    } supported_;
+    int n_;
+
+  public:
+    typedef const MMAL_FOURCC_T * iterator;
+
+    SupportedEncodings(const MmalPort& port) :
+      supported_({{MMAL_PARAMETER_SUPPORTED_ENCODINGS, sizeof(supported_)}, {0}}),
+      n_(-1)
+    {
+      if (port.get_parameter(&supported_.header_) == 0)
+      {
+        n_ = (supported_.header_.size - sizeof(supported_.header_)) /
+          sizeof(supported_.encodings_[0]);
+      }
+    }
+
+    virtual ~SupportedEncodings()
+    {
+    }
+
+    // Default copy is OK
+
+    iterator begin() const
+    {
+      return supported_.encodings_;
+    }
+
+    iterator end() const
+    {
+      return supported_.encodings_ + n_;
+    }
+
+    bool is_supported(const MMAL_FOURCC_T x) const
+    {
+      // If we end up doing this a lot for any reason then use a better lookup
+      for (auto &enc : *this) {
+        if (x == enc) {
+          return true;
+        }
+      }
+      return false;
+    }
+
+    std::string ToString() const
+    {
+      std::ostringstream s;
+      for (int i = 0; i < n_; ++i) {
+        char buf[8];
+        if (i != 0)
+          s << ",";
+        s << mmal_4cc_to_string(buf, sizeof(buf), supported_.encodings_[i]);
+      }
+      return s.str();
+    }
+  };
+
+  SupportedEncodings get_parameter_supported_encodings() const
+  {
+    return SupportedEncodings(*this);
+  }
+
+  static MMAL_FOURCC_T color_space_to_mmal(const VideoColorSpace &color_space)
+  {
+    switch (color_space.primaries) {
+      case VideoColorSpace::PrimaryID::BT709:
+        return color_space.range == gfx::ColorSpace::RangeID::LIMITED ?
+          MMAL_COLOR_SPACE_ITUR_BT709 :
+          MMAL_COLOR_SPACE_JPEG_JFIF;
+
+      case VideoColorSpace::PrimaryID::SMPTE170M:
+        return MMAL_COLOR_SPACE_ITUR_BT601;
+
+      case VideoColorSpace::PrimaryID::SMPTE240M:
+        return MMAL_COLOR_SPACE_SMPTE240M;
+
+      case VideoColorSpace::PrimaryID::BT470M:
+        return MMAL_COLOR_SPACE_BT470_2_M;
+
+      case VideoColorSpace::PrimaryID::BT470BG:
+        return MMAL_COLOR_SPACE_BT470_2_BG;
+
+      default:
+        break;
+    }
+    return MMAL_COLOR_SPACE_UNKNOWN;
+  }
+
+  int set_video_encoding(
+    const MMAL_FOURCC_T encoding,
+    const MMAL_FOURCC_T encoding_variant = MMAL_ENCODING_VARIANT_DEFAULT,
+    const uint32_t flags = 0)
+  {
+    MMAL_ES_FORMAT_T *const format = port_->format;
+
+    format->type = MMAL_ES_TYPE_VIDEO;
+    format->encoding = encoding;
+    format->encoding_variant = encoding_variant;
+    format->flags = 0;
+    format->bitrate = 0;
+    return 0;
+  }
+
+  // Fill in all of a MMAL_VIDEO_FORMAT_T
+  int set_video_format(
+      const gfx::Size& size,
+      const gfx::Rect& crop,
+      const gfx::Size& par,
+      const VideoColorSpace& color_space) const
+  {
+    MMAL_ES_FORMAT_T *const format = port_->format;
+    MMAL_VIDEO_FORMAT_T *const video = &format->es->video;
+    const bool isyuv = format->encoding == MMAL_ENCODING_I420;
+
+    const uint32_t w = size.width();
+    const uint32_t h = size.height();
+
+    video->width = VCOS_ALIGN_UP(w, isyuv ? 32 : 16);
+    video->height = VCOS_ALIGN_UP(h, 16);
+    video->crop.x = crop.x();
+    video->crop.y = crop.y();
+    video->crop.width = crop.width();
+    video->crop.height = crop.height();
+    video->frame_rate.num = 30000;  // Not in config - make something valid up
+    video->frame_rate.den = 1001;
+    video->par.num = par.width();
+    video->par.den = par.height();
+    video->color_space = color_space_to_mmal(color_space);
+    return 0;
+  }
+
+  // Disable once we forget about it
+  virtual ~MmalPort()
+  {
+    disable();
+  }
+
+  MmalPort(const scoped_refptr<MmalVcInit>& vc_init) :
+    vc_init_(vc_init),
+    port_(NULL),
+    killing_(false)
+  {
+  }
+
+  virtual void set_port(MMAL_PORT_T * const port)
+  {
+    if (port_ != NULL) {
+      LOG(ERROR) << "### Port not null";
+      return;
+    }
+
+    port->userdata = (struct MMAL_PORT_USERDATA_T *)(void *)this;
+    port_ = port;
+  }
+
+  // Submit a buffer - on failure (or kill) buffer is released
+  int submit(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    MMAL_STATUS_T err;
+
+    if (killing_ || !port_->is_enabled) {
+      mmal_buffer_header_release(buffer);
+      return 0;
+    }
+
+    if ((err = mmal_port_send_buffer(port_, buffer)) != MMAL_SUCCESS)
+    {
+      // Release buffer on error
+      mmal_buffer_header_release(buffer);
+      LOG(ERROR) << "#### mmal_send_buffer (" << buffer << ") failed: err=" << err;
+    }
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  virtual void kill()
+  {
+    killing_ = true;
+    disable();
+  }
+
+  void dump_video_format()
+  {
+    const MMAL_ES_FORMAT_T * const format = port_->format;
+    const MMAL_VIDEO_FORMAT_T *const video = &format->es->video;
+    char buf1[10], buf2[10];
+
+    LOG(ERROR) << port_->name << ": Encoding:" << mmal_4cc_to_string(buf1, sizeof(buf1), format->encoding) <<
+    ":" << mmal_4cc_to_string(buf2, sizeof(buf2), format->encoding_variant) <<
+        ", " << video->width << "x" << video->height <<
+        ", crop: " << video->crop.x << "," << video->crop.y <<
+        " " << video->crop.width << "x" << video->crop.height;
+  }
+
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalConnection : public base::RefCountedThreadSafe<MmalConnection>
+{
+  friend MmalConnectedPort;
+
+  const scoped_refptr<MmalVcInit> vc_init_;
+
+  bool enabled_;
+  MMAL_CONNECTION_T * connection_;
+  MmalConnectedPort * src_;
+  MmalConnectedPort * dest_;
+
+  friend base::RefCountedThreadSafe<MmalConnection>;
+  virtual ~MmalConnection()
+  {
+    if (connection_ != NULL) {
+      mmal_connection_destroy(connection_);
+    }
+  }
+
+  MmalConnection(const scoped_refptr<MmalVcInit>& vc_init) :
+    vc_init_(vc_init),
+    enabled_(false),
+    connection_(NULL),
+    src_(NULL),
+    dest_(NULL)
+  {
+  }
+
+  void disconnect();
+  int connect(MmalConnectedPort * const src, MmalConnectedPort * const dest);
+
+  int enable()
+  {
+    MMAL_STATUS_T err;
+
+    if (enabled_) {
+      // Bad stuff (tm) seems to happen if we multiply en/disable connections
+      return 0;
+    }
+
+    if ((err = mmal_connection_enable(connection_)) != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_connection_enable failed: err=" << err;
+      return -1;
+    }
+
+    enabled_ = true;
+    return 0;
+  }
+
+  int disable()
+  {
+    MMAL_STATUS_T err;
+
+    if (!enabled_) {
+      // Bad stuff (tm) seems to happen if we multiply en/disable connections
+      return 0;
+    }
+
+    // Mark as disabled even if we fail as in this case I have no idea how
+    // to recover and retry is very unlikely to help
+    enabled_ = false;
+
+    if ((err = mmal_connection_disable(connection_)) != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_connection_disable failed: err=" << err;
+      return -1;
+    }
+
+    return 0;
+  }
+
+  uint32_t buffer_size_recommended() const;
+  uint32_t buffer_num_recommended() const;
+  uint32_t buffer_size_min() const;
+  uint32_t buffer_num_min() const;
+  int set_buffers(uint32_t s, uint32_t n);
+};
+
+// ----------------------------------------------------------------------------
+//
+// Port that we are expecting to be attached to another port by an MmalConnection
+
+class MmalConnectedPort : public MmalPort
+{
+  scoped_refptr<MmalConnection> connection_;
+
+public:
+  void set_connection(MmalConnection * connection)
+  {
+    connection_ = connection;
+  }
+
+  int disconnect()
+  {
+    if (connection_ != NULL) {
+      connection_->disconnect();
+    }
+    return 0;
+  }
+
+  int enable() override
+  {
+    return connection_->enable();
+  }
+
+  int disable() override
+  {
+    return connection_ == NULL ? 0 : connection_->disable();
+  }
+
+  void kill() override
+  {
+    MmalPort::kill();
+    disconnect();
+  }
+
+  int connect_to_src(MmalConnectedPort * const src)
+  {
+    scoped_refptr<MmalConnection> connection(new MmalConnection(vc_init_));
+    return connection->connect(src, this);
+  }
+
+  uint32_t buffer_size_recommended() const override
+  {
+    return connection_->buffer_size_recommended();
+  }
+
+  uint32_t buffer_num_recommended() const override
+  {
+    return connection_->buffer_num_recommended();
+  }
+
+  uint32_t buffer_size_min() const override
+  {
+    return connection_->buffer_size_min();
+  }
+
+  uint32_t buffer_num_min() const override
+  {
+    return connection_->buffer_num_min();
+  }
+
+  int set_buffers(const uint32_t s, const uint32_t n) override
+  {
+    return connection_->set_buffers(s, n);
+  }
+
+  MmalConnectedPort(const scoped_refptr<MmalVcInit>& vc_init) :
+    MmalPort(vc_init)
+  {
+  }
+
+  ~MmalConnectedPort() override
+  {
+    disconnect();
+  }
+};
+
+// ----------------------------------------------------------------------------
+
+class MmalPortAndPool : public MmalPort
+{
+  typedef scoped_refptr<MmalPortAndPool> AutoRef;
+
+  MmalComponent * const component_;
+
+  std::unique_ptr<MmalPool> pool_;
+
+public:
+  // These allow us to use scoped_refptr on this object
+  // They trampoline to the enclosing component
+  void AddRef();
+  void Release();
+  bool HasOneRef() const;
+  bool HasAtLeastOneRef() const;
+
+  const MmalTaskRunner& task_runner() const;
+
+protected:
+  virtual void buffer_event_cb(MMAL_BUFFER_HEADER_T * const buffer) = 0;
+
+private:
+  static bool pool_cb(scoped_refptr<MmalPortAndPool> mpp, MMAL_BUFFER_HEADER_T *buffer)
+  {
+    // As the release can cause us to commit suicide we must put the buffer
+    // back by hand before calling Release as if we try to do it afterwards
+    // the Q may have vanished and we would crash.
+    mpp->pool_->put(buffer);
+    mpp->Release();
+    return false;  // We did the put back ourselves
+  }
+
+  // Given that we now have ref counts that can hit zero when all buffers are
+  // returned to the pool ensure that we can't commit untimely suicide by
+  // holding a ref on ourselves until the callback is over.
+  // This could probably be ensured by careful coding of the overriding
+  // callbacks but this removes the possibility of unexpected surprises
+  void event_cb(MMAL_BUFFER_HEADER_T * const buffer) final
+  {
+    AutoRef(this)->buffer_event_cb(buffer);
+  }
+
+protected:
+  int set_pool(MmalPool *const pool, const uint32_t num)
+  {
+    pool_ = std::unique_ptr<MmalPool>(pool);
+    if (pool_->create(port_->format->encoding, num, port_->buffer_size, frame_size()) != 0) {
+      return -1;
+    }
+    return 0;
+  }
+
+  int set_pool(MmalPool *const pool)
+  {
+    if (pool == nullptr) {
+      pool_.reset();
+      return 0;
+    }
+    return set_pool(pool, port_->buffer_num);
+  }
+
+public:
+  void task_run(base::OnceClosure cb)
+  {
+    task_runner()->PostTask(FROM_HERE, std::move(cb));
+  }
+
+  MmalPortAndPool(const scoped_refptr<MmalVcInit>& vc_init, MmalComponent * const component) :
+    MmalPort(vc_init),
+    component_(component)
+  {
+//    LOG(ERROR) << __func__;
+  }
+
+  ~MmalPortAndPool() override
+  {
+    disable();
+  }
+
+  int create_port_pool()
+  {
+    return set_pool(new MmalPortPool(vc_init_, port_));
+  }
+
+  int create_user_pool(const uint32_t buffer_num)
+  {
+    return set_pool(new MmalUserPool(vc_init_), buffer_num);
+  }
+
+  MMAL_BUFFER_HEADER_T * pool_get(const bool wait = false)
+  {
+    if (pool_ == NULL) {
+      LOG(ERROR) << "### Pool not set up\n";
+      return NULL;
+    }
+
+    MMAL_BUFFER_HEADER_T * const header =  wait ?
+      pool_->get_timeout(5000) : pool_->get();
+
+    if (header != NULL) {
+      AddRef();
+    }
+
+    return header;
+  }
+
+  int pool_size() const
+  {
+    return pool_->size();
+  }
+
+  int queue_length() const
+  {
+    return pool_->length();
+  }
+
+  // Stuff all the pool entries into the port
+  int stuff()
+  {
+    MMAL_BUFFER_HEADER_T * buffer;
+    while ((buffer = pool_get()) != NULL) {
+      // When flushing/disabling we may have left stuff with lengths in the pool
+      mmal_buffer_header_reset(buffer);
+      if (submit(buffer) != 0)
+        return -1;
+    }
+    return 0;
+  }
+
+  int stuff(int stuff_count, const bool wait = false)
+  {
+    while (--stuff_count >= 0)
+    {
+      MMAL_BUFFER_HEADER_T * buffer;
+      if ((buffer = pool_get(wait)) == NULL)
+      {
+        LOG(ERROR) << "### Unexpected pool_get_failure";
+        return -1;
+      }
+
+      // When flushing/disabling we may have left stuff with lengths in the pool
+      mmal_buffer_header_reset(buffer);
+      if (submit(buffer) != 0)
+        return -1;
+    }
+    return 0;
+  }
+
+  void recycle(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    submit(pool_->put_get(buffer));
+  }
+
+  int enable() override
+  {
+    if (pool_ == nullptr)
+    {
+      LOG(ERROR) << "MmalPoolAndPort::enable: pool NULL";
+      return -1;
+    }
+
+    if (pool_->port_resized(buffer_num(), buffer_size(), frame_size()) != 0 ||
+        pool_->enable(base::BindRepeating(MmalPortAndPool::pool_cb, scoped_refptr<MmalPortAndPool>(this))) != 0)
+      return -1;
+
+    return MmalPort::enable();
+  }
+
+  int disable() override
+  {
+    const int rv = MmalPort::disable();
+    return (pool_ != nullptr && pool_->disable() != 0) ? -1 : rv;
+  }
+
+  int commit() override
+  {
+    const int rv = MmalPort::commit();
+    // ** Notify pool that size may have changed
+    return rv;
+  }
+
+  void set_trampoline(scoped_refptr<MmalTrampoline>& trampoline)
+  {
+    pool_->set_trampoline(trampoline);
+  }
+};
+
+// ----------------------------------------------------------------------------
+
+class MmalVideoESPort : public MmalPortAndPool
+{
+  VideoDecoder::DecodeCB decode_cb_;
+  scoped_refptr<DecoderBuffer> submit_buffer_;
+  uint32_t submit_offset_;
+  bool low_delay_;
+
+public:
+  MmalVideoESPort(const scoped_refptr<MmalVcInit>& vc_init, MmalComponent * const component) :
+    MmalPortAndPool(vc_init, component),
+    low_delay_(false)
+  {
+  }
+  ~MmalVideoESPort() override
+  {
+  }
+
+  void set_port(MMAL_PORT_T * const port) override
+  {
+    MmalPort::set_port(port);
+  }
+
+  // Only checks the codec type if we had to set the encoding bitmask
+  bool set_supported_video_codecs() const
+  {
+    if (supported_video_codecs != 0)
+      return false;
+
+    const MmalPort::SupportedEncodings encodings(get_parameter_supported_encodings());
+
+    // We always claim to support H264
+    unsigned int bits = 1 << VideoCodec::kCodecH264;
+
+    for (auto& enc : encodings) {
+      bits |= 1 << fourcc_to_video_codec(enc);
+    }
+
+    // Mask out unknown
+    supported_video_codecs = bits & ~(1 << VideoCodec::kUnknownVideoCodec);
+
+    LOG(INFO) << "Supported video encodings: " << encodings.ToString() << ", bits=" << std::hex << bits;
+    return true;
+  }
+
+  int config(const VideoDecoderConfig& config, const bool low_delay)
+  {
+    const VideoCodec codec = config.codec();
+
+    if (set_supported_video_codecs())
+    {
+      // We set the supported mask - check if we expect this to work...
+      // If we didn't set it then assume we have already checked
+      if ((supported_video_codecs & (1 << codec)) == 0) {
+        // return silently
+        return -1;
+      }
+    }
+
+    low_delay_ = low_delay;
+
+    const MMAL_FOURCC_T encoding = video_codec_to_fourcc(codec);
+
+    if (encoding == MMAL_ENCODING_UNKNOWN) {
+      LOG(ERROR) << "### Unexpected video codec:" << config.codec();
+      return -1;
+    }
+
+    set_video_encoding(encoding, MMAL_ENCODING_VARIANT_DEFAULT, MMAL_ES_FORMAT_FLAG_FRAMED);
+
+    set_video_format(config.coded_size(),
+        config.visible_rect(),
+        par_from_sizes(config.visible_rect().size(), config.natural_size()),
+        config.color_space_info());
+
+    return 0;
+  }
+
+private:
+  int submit_data(const uint8_t * const data, const uint32_t len,
+      const base::TimeDelta& pts,
+      const bool is_start, const bool not_pkt)
+  {
+    uint32_t bsent = 0;
+
+    MMAL_BUFFER_HEADER_T * const buffer = pool_get(not_pkt);
+    if (buffer == NULL) {
+      return 0;
+    }
+
+//    LOG(ERROR) << "-- submit len=" << len << ", pts=" << pts;
+
+    // resets length, offset, flags, pts, dts
+    mmal_buffer_header_reset(buffer);
+    buffer->cmd = 0;
+
+    if (data == NULL)
+    {
+        buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
+        // As this is zero length avoid poking the data
+        bsent = 1; // 0 means did nothing so pick another number
+    }
+    else
+    {
+        if (is_start)
+        {
+            buffer->pts = (pts == kNoTimestamp) ? MMAL_TIME_UNKNOWN : pts.InMicroseconds();
+//            buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
+            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START | MMAL_BUFFER_HEADER_FLAG_USER0;
+        }
+
+        bsent = buffer->length = std::min(len, buffer->alloc_size);
+
+        if (mmal_buffer_header_mem_lock(buffer) != MMAL_SUCCESS)
+        {
+            LOG(ERROR) << "#### Cannot lock buffer";
+            buffer_release(buffer);
+            return -1;
+        }
+
+        memcpy(buffer->data, data, buffer->length);
+
+        mmal_buffer_header_mem_unlock(buffer);
+
+        if (len == bsent)
+            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
+
+        if (not_pkt)
+            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
+    }
+
+//    LOG(ERROR) << "Submit: flags=" << std::hex << buffer->flags << std::dec << ", len=" << buffer->length << ", pts=" << buffer->pts;
+
+    if (MmalPortAndPool::submit(buffer) != 0)
+    {
+      return -1;
+    }
+
+    return (int)bsent;
+  }
+
+  void submit_done(const DecodeStatus status)
+  {
+    VideoDecoder::DecodeCB cb(decode_cb_);
+
+    decode_cb_.Reset();
+    submit_buffer_ = NULL;
+
+//    LOG(ERROR) << ">>> decode_cb.Run(" << status << ")";
+    cb.Run(status);
+  }
+
+  void submit_poll()
+  {
+    if (submit_buffer_ == NULL) {
+//      LOG(ERROR) << "ES CB null";
+      return;
+    }
+
+    if (submit_buffer_->end_of_stream()) {
+      LOG(INFO) << "<<< EOS";
+
+      int bsent = submit_data(NULL, 0, kNoTimestamp, true, false);
+
+      if (bsent != 0)
+      {
+        decode_cb_.Reset();
+        submit_buffer_ = NULL;
+
+        // The callback on EOS takes place much later & from the resizer output
+      }
+    }
+    else
+    {
+//      LOG(ERROR) << "submit";
+      const uint32_t size = submit_buffer_->data_size();
+
+      while (submit_offset_ < size) {
+        const int bsent = submit_data(submit_buffer_->data() + submit_offset_,
+            size - submit_offset_,
+            submit_buffer_->timestamp(),
+            submit_offset_ == 0, false);
+
+//        LOG(ERROR) << "es submit bsent=" << bsent << ", pql=" << queue_length();
+
+        if (bsent <= 0)
+        {
+          if (bsent != 0)
+            submit_done(DecodeStatus::DECODE_ERROR);
+          return;
+        }
+
+        submit_offset_ += bsent;
+      }
+
+      // If we've got here then we've got a finished submit_buffer_
+      // wait for pool empty before signalling "next"
+      if (!low_delay_ || queue_length() == pool_size()) {
+//        LOG(ERROR) << "submit done";
+        submit_done(DecodeStatus::OK);
+      }
+    }
+  }
+
+  void buffer_event_cb(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    buffer_release(buffer);
+
+    task_run(base::BindOnce(&MmalVideoESPort::submit_poll, this));
+  }
+
+
+public:
+  int submit(const scoped_refptr<DecoderBuffer>& buffer, const VideoDecoder::DecodeCB& decode_cb)
+  {
+    if (submit_buffer_ != NULL) {
+      LOG(ERROR) << "### Submit already active";
+      return -1;
+    }
+
+    if (decode_cb.is_null()) {
+      // If null CB then assume we need sync output
+      return submit_data(buffer->data(), buffer->data_size(), buffer->timestamp(), true, true) < 0 ? -1 : 0;
+    }
+    else
+    {
+      // * If we aren't in the same thread as task_runner_ at this point
+      //   then this lot is unsafe...
+
+      submit_buffer_ = buffer;
+      submit_offset_ = 0;
+      decode_cb_ = decode_cb;
+
+      submit_poll();
+    }
+    return 0;
+  }
+
+  int disable() override
+  {
+    // Get and kill any pending submit_callback
+    if (submit_buffer_ != NULL) {
+      submit_done(DecodeStatus::ABORTED);
+    }
+    return MmalPortAndPool::disable();
+  }
+};
+
+
+// ----------------------------------------------------------------------------
+//
+// * It might be nice to split this into ZC & Copy versions but as it stands
+//   the port is declared directly in the component which makes that tricky
+
+class MmalVideoARGBPort : public MmalPortAndPool
+{
+  GpuVideoAcceleratorFactories* const gpu_factories_;
+
+  FrameCopyMode copy_mode_;
+  gfx::Size req_size_;
+  unsigned int stride_ = 0;
+  VideoDecoder::OutputCB output_cb_;
+  VideoDecoder::DecodeCB eos_cb_;
+  base::Lock resize_lock_;
+  base::Lock req_lock_;
+  bool red_pixel_;
+  scoped_refptr<MmalTrampoline> frame_trampoline_;
+  scoped_refptr<MmalCopiedVideoFrame> sliced_frame_;
+  int sliced_y_;
+  base::TimeDelta last_pts_;
+  bool debug_bench_;
+  bool resize_disabled_;
+
+  class FpS
+  {
+    // Average over this number of frames for running average
+    static const size_t avg_size_ = 128;
+
+    static uint64_t utime()
+    {
+      struct timespec ts;
+      clock_gettime(CLOCK_MONOTONIC, &ts);
+      return (uint64_t)ts.tv_sec * 1000000 + ts.tv_nsec / 1000;
+    }
+
+    uint64_t start_time_;
+    uint64_t period_time_;
+    unsigned int frame_count_;
+
+    uint64_t time_stash_[avg_size_];
+    size_t stash_n_;
+
+    void do_start(const uint64_t now)
+    {
+      start_time_ = now;
+      period_time_ = now;
+      stash_n_ = 0;
+    }
+
+  public:
+    FpS() :
+      start_time_(0),
+      period_time_(0),
+      frame_count_(0),
+      time_stash_{0}
+    {
+    }
+
+    void start()
+    {
+      frame_count_ = 0;
+    }
+
+    void inc_frames()
+    {
+      const uint64_t now = utime();
+      if (frame_count_++ == 0)
+        do_start(now);
+      time_stash_[stash_n_] = now;
+      if (++stash_n_ >= avg_size_)
+        stash_n_ = 0;
+    }
+
+    bool period_expired(const uint64_t duration_us)
+    {
+      const uint64_t now = utime();
+      if (period_time_ + duration_us <= now) {
+        period_time_ += duration_us;
+        return true;
+      }
+      return false;
+    }
+
+    std::string ToString()
+    {
+      if (start_time_ == 0) {
+        return std::string("<uninit>");
+      }
+      const uint64_t now = utime();
+      if (start_time_ == now) {
+        return std::string("<inf>");
+      }
+
+      const uint64_t mFpS = ((uint64_t)frame_count_ * 1000000000) / (now - start_time_);
+      const uint64_t mFpS_avg = frame_count_ < avg_size_ ? 0 :
+        ((uint64_t)avg_size_ * 1000000000) / (now - time_stash_[stash_n_]);
+      std::ostringstream s;
+      s << frame_count_  << " @ "
+        << mFpS / 1000 << "." << std::setfill('0') << std::setw(3) << mFpS % 1000 << std::setw(0)
+        << ", avg: " << mFpS_avg / 1000 << "." << std::setfill('0') << std::setw(3) << mFpS_avg % 1000;
+
+      return s.str();
+    }
+  };
+
+  std::unique_ptr<FpS> fps_;
+
+  bool inline eos_pending() const
+  {
+    return !eos_cb_.is_null();
+  }
+
+  void kill_trampoline()
+  {
+    if (frame_trampoline_)
+    {
+      frame_trampoline_->kill();
+      frame_trampoline_ = NULL;
+    }
+  }
+
+  // Mostly required to discard the return value
+  void posted_submit(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+//    LOG(ERROR) << "--- " << __func__;
+    submit(buffer);
+  }
+
+  void recycle_buffer(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    mmal_buffer_header_reset(buffer);
+
+    if (resize_lock_.Try()) {
+      recycle(buffer);
+      resize_lock_.Release();
+    }
+    else
+    {
+      // Move the recycle onto the main thread which should be the one running
+      // the resize so no further locking required
+      //
+      // ??? Interaction with max_in_flight_ ???
+      task_run(base::BindOnce(&MmalVideoARGBPort::recycle, this, buffer));
+    }
+  }
+
+  // Unlocks buffer & recycles it
+  // Called from trampoline on free_frame
+  // so may come from a random thread
+  void copied_frame_destruction_cb(const int buffer_count)
+  {
+    // stuff may have to wait for a buffer as the recycling
+    // cannot be protected by the trampoline lock with the current
+    // code so we have a race
+    if (stuff(buffer_count, true) == -1)
+      LOG(FATAL) << "No buffers to back up recycle request";
+  }
+
+  void resize_posted()
+  {
+    gfx::Size req_size;
+
+    {
+      base::AutoLock lock(req_lock_);
+
+      // Take consistent copy inside lock (no blocking ops inside this lock)
+      req_size = req_size_;
+
+      // ?? and likely the same size
+
+      if (req_size == size())
+        return;
+
+      // Must avoid disable/enable if
+      //   (a) Already disabled
+      //   (b) EOS pending (will confuse the process)
+
+      if (eos_pending()) {
+        LOG(INFO) << __func__ << ": abort due to EOS";
+        // If EOS pending then do nothing - we shouldn't get more stream
+        // until at least a reset
+        // Reset req_size to whatever we are so we will get recalled if needed
+        // * Locking ??
+        req_size_ = size();
+        return;
+      }
+    }
+
+    LOG(INFO) << "Resize to " << req_size.ToString();
+
+    const bool was_enabled = is_enabled();
+
+    if (was_enabled) {
+      disable();
+    }
+
+    base::AutoLock lock(resize_lock_);
+    set_size(req_size);
+    commit();
+    if (copy_mode_ != FrameCopyMode::SLICE) {
+      set_buffers(buffer_size_recommended(), buffer_num());
+#if !OPT_FRAME_COPY_STASHED
+      // In this case the allocation is done by mmal so we need to recreate the
+      set_pool(nullptr);  // Kill before realloc so we never have 2 sets alloce
+      create_port_pool();
+#endif
+    }
+
+    if (was_enabled)
+      enable();
+
+//    LOG(INFO) << __func__ << " done";
+  }
+
+public:
+  void reset_reqs()
+  {
+    base::AutoLock lock(req_lock_);
+    req_size_ = gfx::Size(port_->format->es->video.crop.width, port_->format->es->video.crop.height);
+  }
+
+  void resize_cb(const gfx::Size& size)
+  {
+    {
+      base::AutoLock lock(req_lock_);
+
+      if (size == req_size_ || resize_disabled_) {
+        return;
+      }
+      req_size_ = size;
+    }
+
+    // Avoid running in the callback - run on our own thread
+    task_run(base::BindOnce(&MmalVideoARGBPort::resize_posted, this));
+  }
+
+  gfx::Size size() const
+  {
+    return gfx::Size(port_->format->es->video.crop.width, port_->format->es->video.crop.height);
+  }
+
+  gfx::Rect visible_rect() const
+  {
+    return gfx::Rect(
+        port_->format->es->video.crop.x, port_->format->es->video.crop.y,
+        port_->format->es->video.crop.width, port_->format->es->video.crop.height);
+  }
+
+  gfx::Size coded_size() const
+  {
+    return gfx::Size(port_->format->es->video.width, port_->format->es->video.height);
+  }
+
+  gfx::Size natural_size() const
+  {
+    const unsigned int par_n = port_->format->es->video.par.num;
+    const unsigned int par_d = port_->format->es->video.par.den;
+    const unsigned int width = port_->format->es->video.crop.width;
+    const unsigned int height = port_->format->es->video.crop.height;
+
+    if (par_n == 0 || par_d == 0)
+      return gfx::Size(width, height);
+
+    return gfx::Size((width * par_n + par_d / 2) / par_d, height);
+  }
+
+  size_t stride() const
+  {
+    return stride_;
+  }
+
+private:
+
+  void mov_frame_block(const scoped_refptr<MmalCopiedVideoFrame>& frame,
+      MMAL_BUFFER_HEADER_T * const buffer,
+      const size_t stride,
+      const size_t width,
+      const size_t start_y,
+      const int lines)
+  {
+    MMAL_STATUS_T err;
+
+    if ((err = mmal_buffer_header_mem_lock(buffer)) != MMAL_SUCCESS)
+    {
+      LOG(ERROR) << "### Unable to lock buffer; err=" << err;
+      return;
+    }
+
+    const uint8_t * s = buffer->data + buffer->type->video.offset[0];
+    const size_t d_stride = frame->stride(0);
+    uint8_t * d = frame->data(0) + start_y * d_stride;
+    const size_t line_size = width * 4;
+
+    for (int i = 0; i < lines; ++i, s += stride, d += d_stride)
+      memcpy(d, s, line_size);
+
+    // Unlock & recycles
+    mmal_buffer_header_mem_unlock(buffer);
+
+    // Count buffers used by this frame
+    frame->inc_buffer_count();
+
+    if (frame_trampoline_->recycle_buffer_in_flight(buffer)) {
+      recycle_buffer(buffer);
+    }
+  }
+
+  void emit_copied_frame(const scoped_refptr<VideoFrame>& frame, MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer && frame_trampoline_->recycle_buffer_in_flight(buffer)) {
+      recycle_buffer(buffer);
+    }
+
+    if (frame->timestamp() != kNoTimestamp)
+      last_pts_ = frame->timestamp();
+
+    if (debug_bench_) {
+      // In bench mode just drop the frame on the floor
+      return;
+    }
+    if (red_pixel_) {
+      // Mark our frames with happy red pixels
+      uint8_t * d = frame->data(0);
+      const size_t d_stride = frame->stride(0);
+
+      for (int i = 0; i != 8; ++i, d += d_stride) {
+          for (int j = 0; j != 8 * 4; j += 4) {
+              d[j+0] = 0;
+              d[j+1] = 0;
+              d[j+2] = 0xff;
+              d[j+3] = 0xff;
+          }
+      }
+    }
+
+    output_cb_.Run(frame);
+  }
+
+protected:
+  void buffer_event_cb(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    // One might have hoped that buffer->type->video.pitch[0] held this info...
+    const gfx::Size cur_size = size();
+
+//    const base::TimeDelta pts(kNoTimestamp);
+
+    const base::TimeDelta pts(buffer->pts == MMAL_TIME_UNKNOWN ?
+        kNoTimestamp :
+        base::TimeDelta::FromMicroseconds(buffer->pts));
+
+#if 0
+    if ((buffer->flags & MMAL_BUFFER_HEADER_FLAG_FRAME_END) != 0) {
+      LOG(INFO) << "-- Got frame from resizer: copy_mode=" << copy_mode_ << ", len=" << buffer->length <<
+          ", size = " << port_->format->es->video.width << "x" << port_->format->es->video.height << ", req=" << cur_size.ToString() <<
+          ", stride=" << buffer->type->video.pitch[0] << "/" << stride() << ", pts=" << buffer->pts <<
+          ", flags=" << std::hex << buffer->flags << std::dec << ", enabled=" << port_->is_enabled <<
+          ", pts_delta=" << (pts - last_pts_).InMicroseconds() << ", user=" << (void *)buffer->user_data;
+        ;
+    }
+#endif
+
+    if ((buffer->flags & MMAL_BUFFER_HEADER_FLAG_EOS) != 0) {
+      LOG(INFO) << ">>> EOS";
+      if (fps_ != nullptr) {
+        LOG(ERROR) << "@@@@ EOS: fps=" << fps_->ToString();
+      }
+      // Finally call the decode CB
+      if (eos_pending()) {
+        eos_cb_.Run(DecodeStatus::OK);
+        eos_cb_.Reset();
+      }
+      // Remember to recycle the buffer!
+      recycle_buffer(buffer);
+      return;
+    }
+
+    if (buffer->length == 0) {
+      // Empty flushed buffer
+      recycle_buffer(buffer);
+      return;
+    }
+
+    switch (copy_mode_) {
+      case FrameCopyMode::unset:
+        LOG(ERROR) << "### copy mode unset";
+        recycle_buffer(buffer);
+        break;
+
+      case FrameCopyMode::FRAME_ARGB:
+      {
+        // * Arguably we should be creating ARGB buffers here rather than MMAL
+        //   but we have only carved a path through the rest of the video
+        //   render stack for MMAL
+
+#if OPT_FRAME_COPY_STASHED
+        // Firmware-side frame copy
+        scoped_refptr<VideoFrame> frame (new MmalStashedVideoFrame(
+            buffer,
+            frame_trampoline_,
+            coded_size(), stride(),
+            visible_rect(), natural_size(),
+            pts));
+
+        emit_copied_frame(frame, buffer);
+#else
+        // Arm-side frame copy
+        scoped_refptr<MmalCopiedVideoFrame> frame(new MmalCopiedVideoFrame(
+          frame_trampoline_,
+          cur_size,
+          pts));
+
+        mov_frame_block(frame, buffer, stride(), cur_size.width(), 0, cur_size.height());
+
+        emit_copied_frame(frame, nullptr);
+#endif
+        break;
+      }
+
+      case FrameCopyMode::FRAME_I420:
+      {
+        // Firmware-side frame copy
+        scoped_refptr<VideoFrame> frame(new MmalVideoFrameYUV(
+            buffer,
+            frame_trampoline_,
+            coded_size(), stride(),
+            visible_rect(), natural_size(),
+            pts));
+
+        emit_copied_frame(frame, buffer);
+        break;
+      }
+
+      case FrameCopyMode::FRAME_GPU:
+      {
+        // Firmware-side frame copy
+        scoped_refptr<VideoFrame> frame(new MmalGPUVideoFrame(
+            buffer,
+            frame_trampoline_,
+            coded_size(), stride(),
+            visible_rect(), natural_size(),
+            pts));
+
+        emit_copied_frame(frame, buffer);
+        break;
+      }
+
+      case FrameCopyMode::SLICE:
+      {
+        // Remember end of frame flag as we kill the buffer before using it
+        const bool eof = (buffer->flags & MMAL_BUFFER_HEADER_FLAG_FRAME_END) != 0;
+
+        if (sliced_frame_ == NULL) {
+          sliced_y_ = 0;
+          // pts only correct at eof
+          sliced_frame_ = new MmalCopiedVideoFrame(frame_trampoline_, cur_size);
+        }
+
+        mov_frame_block(sliced_frame_, buffer, stride(), cur_size.width(), sliced_y_,
+            std::min(MMAL_SLICE_HEIGHT, sliced_frame_->rows(0) - sliced_y_));
+
+        if ((sliced_y_ += MMAL_SLICE_HEIGHT) < sliced_frame_->rows(0))
+        {
+          // Partial - stop now
+          if (eof) {
+            // Partial frame - discard
+            sliced_frame_ = NULL;
+            LOG(WARNING) << "### frame underrun";
+          }
+          return;
+        }
+        if (!eof) {
+          // Overrun
+          LOG(WARNING) << "### frame overrun";
+        }
+        sliced_frame_->set_timestamp(pts);
+
+        // Make sure sliced_frame_ is NULL before we do output callbacks
+        // that might cause us to look at it
+        emit_copied_frame(std::move(sliced_frame_), nullptr);
+        break;
+      }
+    }
+
+    if (fps_ != nullptr) {
+      fps_->inc_frames();
+      if (fps_->period_expired(1000000))
+      {
+        LOG(ERROR) << "--- fps = " << fps_->ToString();
+      }
+    }
+  }
+
+
+public:
+  MmalVideoARGBPort(const scoped_refptr<MmalVcInit>& vc_init, MmalComponent * const component, GpuVideoAcceleratorFactories* const gpu_factories) :
+    MmalPortAndPool(vc_init, component),
+    gpu_factories_(gpu_factories),
+    red_pixel_(false),
+    last_pts_(kNoTimestamp),
+    debug_bench_(false),
+    resize_disabled_(false)
+  {
+  }
+
+  ~MmalVideoARGBPort() override
+  {
+    kill_trampoline();
+  }
+
+  int create_frame_pool()
+  {
+    return set_pool(new MmalFramePool(vc_init_));
+  }
+
+  void set_port(MMAL_PORT_T * const port) override
+  {
+    MmalPort::set_port(port);
+
+    port_->format->type = MMAL_ES_TYPE_VIDEO;
+  }
+
+  void set_copy_mode(const FrameCopyMode copy_mode)
+  {
+    copy_mode_ = copy_mode;
+
+    //??? probably should refactor this lot for req/cur s.t. everything happens on commit
+    switch (copy_mode_) {
+      case FrameCopyMode::SLICE:
+        port_->format->encoding = MMAL_ENCODING_BGRA_SLICE;
+        break;
+      case FrameCopyMode::FRAME_ARGB:
+        port_->format->encoding = MMAL_ENCODING_BGRA;
+        break;
+      case FrameCopyMode::FRAME_I420:
+        port_->format->encoding = MMAL_ENCODING_I420;
+        break;
+      case FrameCopyMode::FRAME_GPU:
+        port_->format->encoding = MMAL_ENCODING_BGRA;
+        break;
+      case FrameCopyMode::unset:
+        port_->format->encoding = MMAL_ENCODING_UNKNOWN;
+        LOG(ERROR) << "Frame copy mode unset";
+        break;
+    }
+    port_->format->encoding_variant = MMAL_ENCODING_VARIANT_DEFAULT;
+  }
+
+  int set_size(const gfx::Size& req_size)
+  {
+    set_video_format(req_size, gfx::Rect(req_size), gfx::Size(), VideoColorSpace::REC709());
+    stride_ = mmal_encoding_width_to_stride(port_->format->encoding, port_->format->es->video.width);
+    return 0;
+  }
+
+  void set_eos_cb(const VideoDecoder::DecodeCB& eos_cb)
+  {
+    eos_cb_ = eos_cb;
+  }
+
+  int set_debug_bench(const bool enable_bench, const bool enable_fps)
+  {
+    debug_bench_ = enable_bench;
+    fps_ = std::unique_ptr<FpS>(!enable_fps ? nullptr : new FpS());
+    return 0;
+  }
+
+  int set_resize_disabled(const bool disable)
+  {
+    resize_disabled_ = disable;
+    return 0;
+  }
+
+  void set_red_pixel(const bool red)
+  {
+    red_pixel_ = red;
+  }
+
+public:
+  int enable() override
+  {
+    kill_trampoline();  // Shouldn't be needed but good to make sure
+
+    const int buffers_per_frame = copy_mode_ != FrameCopyMode::SLICE ? 1 :
+        (port_->format->es->video.crop.height + MMAL_SLICE_HEIGHT - 1) / MMAL_SLICE_HEIGHT;
+
+    frame_trampoline_ = new MmalTrampoline(gpu_factories_,
+        buffers_per_frame * MAX_COPY_FRAMES_IN_FLIGHT,
+        base::BindRepeating(&MmalVideoARGBPort::copied_frame_destruction_cb, this));
+
+    set_trampoline(frame_trampoline_);
+
+    if (MmalPortAndPool::enable() != 0)
+      return  -1;
+
+    if (fps_ != nullptr) {
+      fps_->start();
+    }
+
+    return stuff();
+  }
+
+  int enable(const VideoDecoder::OutputCB& output_cb)
+  {
+    output_cb_ = output_cb;
+    return enable();
+  }
+
+  int disable() override
+  {
+    int rv = MmalPortAndPool::disable();
+
+    // Worry about class status vars after disable to avoid race conditions
+    kill_trampoline();
+
+    sliced_frame_ = NULL;  // Forget any partial frame info
+
+    if (eos_pending()) {
+      LOG(INFO) << ">>> EOS (abort)";
+      eos_cb_.Run(DecodeStatus::ABORTED);
+      eos_cb_.Reset();
+    }
+
+//    LOG(ERROR) << "@@@@ disable: fps=" << fps.ToString();
+
+    return rv;
+  }
+
+  bool is_stalling() const
+  {
+    // If trampoline is null for some reason e.g. decoder reset
+    // then assume that in_flight is 0 as it will be when we regenerate the
+    // trampoline
+    return frame_trampoline_ != nullptr && frame_trampoline_->is_stalling();
+  }
+};
+
+  // ---------------------------------------------------------------------------
+
+class MmalComponent : public base::RefCountedThreadSafe<MmalComponent>
+{
+  const scoped_refptr<MmalVcInit> vc_init_;
+
+protected:
+  MMAL_COMPONENT_T * component_;
+private:
+  MmalTaskRunner task_runner_;
+
+protected:
+  int create_by_name(const char * const name)
+  {
+    MMAL_STATUS_T err;
+    if ((err = mmal_component_create(name, &component_)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_component_create(" << name << ") failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  friend class base::RefCountedThreadSafe<MmalComponent>;
+  virtual ~MmalComponent()
+  {
+    if (component_ != NULL) {
+      mmal_component_release(component_);
+    }
+  }
+
+  virtual MmalConnectedPort * input_port() = 0;
+  virtual MmalConnectedPort * output_port() = 0;
+
+public:
+  MmalComponent(const scoped_refptr<MmalVcInit>& vc_init) :
+    vc_init_(vc_init),
+    component_(NULL),
+//    task_runner_(base::ThreadTaskRunnerHandle::Get())
+    task_runner_(base::SequencedTaskRunnerHandle::Get())
+  {
+  }
+
+  const MmalTaskRunner& task_runner() const
+  {
+    return task_runner_;
+  }
+
+  virtual const char * name() const = 0;
+
+  int connect_to_output(scoped_refptr<MmalComponent> src)
+  {
+    MmalConnectedPort * const dest = input_port();
+    if (dest->connect_to_src(src->output_port()) != 0)
+      return -1;
+    if (dest->enable() != 0) {
+      dest->disconnect();
+      return -1;
+    }
+    return 0;
+  }
+
+  int enable()
+  {
+    MMAL_STATUS_T err;
+
+    if ((err = mmal_component_enable(component_)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_component_enable failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  int disable()
+  {
+    MMAL_STATUS_T err;
+    if ((err = mmal_component_disable(component_)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_component_disable failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  // Shut this component down
+  // Reclaim all resources as they return & attempt to zero our internal
+  // ref count so we will die when the decoder derefs us.
+  // The reclaim process may be async so we may die some time later
+  virtual void kill() = 0;
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalVideoDecoderComponent : public MmalComponent
+{
+  MmalVideoESPort port_in_;
+  MmalConnectedPort port_out_;
+  MmalPort port_ctrl_;
+
+protected:
+  ~MmalVideoDecoderComponent() override
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ ~MmalVideoDecoderComponent";
+#endif
+  }
+
+  MmalConnectedPort * input_port() override
+  {
+    return NULL;
+  }
+
+  MmalConnectedPort * output_port() override
+  {
+    return &port_out_;
+  }
+
+
+public:
+  MmalVideoDecoderComponent(const scoped_refptr<MmalVcInit>& vc_init) :
+    MmalComponent(vc_init),
+    port_in_(vc_init, this),
+    port_out_(vc_init),
+    port_ctrl_(vc_init)
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ MmalVideoDecoderComponent";
+#endif
+  }
+
+  const char * name() const override
+  {
+    return "VideoDecoder";
+  }
+
+  int create(const MmalVideoDecoder::Options& opt, const VideoDecoderConfig& config, const bool low_delay)
+  {
+    if (create_by_name(MMAL_COMPONENT_DEFAULT_VIDEO_DECODER) != 0) {
+      return -1;
+    }
+
+    // Attach control structures to ports
+    port_in_.set_port(component_->input[0]);
+    port_out_.set_port(component_->output[0]);
+    port_ctrl_.set_port(component_->control);
+
+    if (
+        port_ctrl_.enable() != 0 ||
+
+        port_in_.set_parameter(MMAL_PARAMETER_VIDEO_MAX_NUM_CALLBACKS, low_delay ? -5 : -10) != 0 ||
+//        port_in_.set_parameter(MMAL_PARAMETER_VIDEO_MAX_NUM_CALLBACKS, -3) != 0 ||
+        port_in_.config(config, low_delay) != 0 ||
+        port_in_.commit() != 0 ||
+
+//        port_out_.set_parameter(MMAL_PARAMETER_EXTRA_BUFFERS, 6) != 0 ||
+        port_out_.set_parameter(MMAL_PARAMETER_VIDEO_INTERPOLATE_TIMESTAMPS, false) != 0 ||
+        port_out_.set_video_encoding(opt.decoder_out_encoding()) != 0 ||
+        port_out_.set_video_format(config.coded_size(),
+            config.visible_rect(),
+            par_from_sizes(config.visible_rect().size(), config.natural_size()),
+            config.color_space_info()) != 0 ||
+        port_out_.commit() != 0 ||
+
+        port_in_.set_buffers(0x10000, 8) != 0 ||
+        port_in_.set_parameter(MMAL_PARAMETER_ZERO_COPY, false) != 0 ||  // ### Z-Copy is bust here
+        port_in_.create_port_pool() != 0 ||
+
+        port_in_.enable() != 0)
+    {
+      goto fail;
+    }
+
+    return 0;
+
+fail:
+    return -1;
+  }
+
+  void kill() override
+  {
+    port_in_.kill();
+    port_out_.kill();
+  }
+
+  void reset1()
+  {
+    port_in_.disable();
+    port_out_.disable();
+  }
+
+  void reset2()
+  {
+    port_out_.enable();
+    port_in_.enable();
+  }
+
+
+  int submit(const scoped_refptr<DecoderBuffer>& buffer, const VideoDecoder::DecodeCB& decode_cb)
+  {
+    return port_in_.submit(buffer, decode_cb);
+  }
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalVideoResizerComponent : public MmalComponent
+{
+  FrameCopyMode copy_mode_;
+  gfx::Size cur_size_;
+  MmalConnectedPort port_in_;
+  MmalVideoARGBPort port_out_;
+  MmalPort port_ctrl_;
+
+protected:
+  ~MmalVideoResizerComponent() override
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ ~MmalVideoResizerComponent";
+#endif
+  }
+
+  MmalConnectedPort * input_port() override
+  {
+    return &port_in_;
+  }
+
+  MmalConnectedPort * output_port() override
+  {
+    return NULL;
+  }
+
+
+public:
+  MmalVideoResizerComponent(const scoped_refptr<MmalVcInit>& vc_init, GpuVideoAcceleratorFactories* const gpu_factories) :
+    MmalComponent(vc_init),
+    copy_mode_(FrameCopyMode::unset),
+    port_in_(vc_init),
+    port_out_(vc_init, this, gpu_factories),
+    port_ctrl_(vc_init)
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ MmalVideoResizerComponent";
+#endif
+  }
+
+  const char * name() const override
+  {
+    return "Resizer";
+  }
+
+  int create(const MmalVideoDecoder::Options& opt)
+  {
+    if (create_by_name(opt.resizer_component_name()) != 0) {
+      return -1;
+    }
+
+    // Attach control structures to ports
+    port_in_.set_port(component_->input[0]);
+    port_out_.set_port(component_->output[0]);
+    port_ctrl_.set_port(component_->control);
+    return 0;
+  }
+
+  bool is_copy_mode_supported(const FrameCopyMode mode) const
+  {
+    return port_out_.get_parameter_supported_encodings().is_supported(mode == FrameCopyMode::SLICE ? MMAL_ENCODING_BGRA_SLICE : MMAL_ENCODING_BGRA);
+  }
+
+  int configure(const MmalVideoDecoder::Options& opt,
+      const gfx::Size& size, const VideoDecoder::OutputCB& output_cb)
+  {
+    copy_mode_ = opt.frame_copy_mode(is_copy_mode_supported(FrameCopyMode::SLICE));
+
+    port_out_.set_copy_mode(copy_mode_);
+
+    if (port_ctrl_.enable() != 0 ||
+        port_out_.set_size(opt.debug_fixed_size_set() ? opt.debug_fixed_size() : size) != 0 ||
+        port_out_.set_resize_disabled(opt.debug_fixed_size_set()) != 0 ||
+        port_out_.set_debug_bench(opt.debug_bench(), opt.debug_fps()) != 0 ||
+        port_out_.commit() != 0)
+    {
+      goto fail;
+    }
+
+    // Set req values to current values
+    port_out_.reset_reqs();
+
+    switch (copy_mode_) {
+      case FrameCopyMode::SLICE:
+        if (port_out_.set_buffers(MMAL_SLICE_HEIGHT * MMAL_LIMIT_WIDTH * 4, opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, true) != 0 ||
+          port_out_.create_port_pool() != 0)
+        {
+          goto fail;
+        }
+        break;
+
+      case FrameCopyMode::FRAME_I420:
+      case FrameCopyMode::FRAME_ARGB:
+      case FrameCopyMode::FRAME_GPU:
+        // Firmware-side frame copy
+#if OPT_FRAME_COPY_STASHED
+        if (port_out_.set_buffers(port_out_.buffer_size_recommended(), opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, false) != 0 ||
+          port_out_.create_frame_pool() != 0)
+#else
+        if (port_out_.set_buffers(port_out_.buffer_size_recommended(), opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, true) != 0 ||
+          port_out_.create_port_pool() != 0)
+#endif
+        {
+          goto fail;
+        }
+        break;
+
+      default:
+        goto fail;
+    }
+
+    if (port_out_.enable(output_cb) != 0)
+      goto fail;
+
+    cur_size_ = size;
+    return 0;
+
+fail:
+    return -1;
+  }
+
+  void kill() override
+  {
+    port_in_.kill();
+    port_out_.kill();
+  }
+
+  void reset1()
+  {
+    port_in_.disable();
+    port_out_.disable();
+  }
+
+  void reset2()
+  {
+    port_out_.enable();
+    port_in_.enable();
+  }
+
+  void set_eos_cb(const VideoDecoder::DecodeCB& eos_cb)
+  {
+    port_out_.set_eos_cb(eos_cb);
+  }
+
+  void set_red_pixel(const bool red)
+  {
+    port_out_.set_red_pixel(red);
+  }
+
+  bool is_output_stalling() const
+  {
+    return port_out_.is_stalling();
+  }
+
+  void resize(const gfx::Size& new_size)
+  {
+    port_out_.resize_cb(new_size);
+  }
+};
+
+
+// ---------------------------------------------------------------------------
+
+void MmalConnection::disconnect()
+{
+  if (src_ == NULL || dest_ == NULL) {
+    LOG(ERROR) << "#### src or dest NULL";
+    return;
+  }
+
+  disable();
+
+  // Commit suicide by killing our refs
+  // Both ends should still exist as the destruction of either
+  // should call this fn
+  src_->set_connection(NULL);
+  dest_->set_connection(NULL);
+}
+
+int MmalConnection::connect(MmalConnectedPort * const src, MmalConnectedPort * const dest)
+{
+  MMAL_STATUS_T err;
+
+  // MMAL_CONNECTION_FLAG_KEEP_BUFFER_REQUIREMENTS means
+  // that enable will actually observe the buffer_num
+  // and size fields - otherwise it will always ignore
+  // them
+  if ((err = mmal_connection_create(&connection_, src->port_, dest->port_,
+      MMAL_CONNECTION_FLAG_KEEP_BUFFER_REQUIREMENTS | MMAL_CONNECTION_FLAG_TUNNELLING)) != MMAL_SUCCESS) {
+    LOG(ERROR) << "### mmal_connection_create failed: err=" << err;
+    connection_ = NULL;  // Just in case
+    return -1;
+  }
+
+  src->set_connection(this);
+  dest->set_connection(this);
+
+  src_ = src;
+  dest_ = dest;
+
+  // As we have asked for our choices to be respected we should make sure they
+  // are set to something sensible
+  set_buffers(buffer_size_recommended(), buffer_num_recommended());
+
+  mmal_log_dump_port(src->port_);
+  mmal_log_dump_port(dest->port_);
+  return 0;
+}
+
+uint32_t MmalConnection::buffer_size_recommended() const
+{
+  return std::max(src_->MmalPort::buffer_size_recommended(), dest_->MmalPort::buffer_size_recommended());
+}
+
+uint32_t MmalConnection::buffer_num_recommended() const
+{
+  return std::max(src_->MmalPort::buffer_num_recommended(), dest_->MmalPort::buffer_num_recommended());
+}
+
+uint32_t MmalConnection::buffer_size_min() const
+{
+  return std::max(src_->MmalPort::buffer_size_min(), dest_->MmalPort::buffer_size_min());
+}
+
+uint32_t MmalConnection::buffer_num_min() const
+{
+  return std::max(src_->MmalPort::buffer_num_min(), dest_->MmalPort::buffer_num_min());
+}
+
+int MmalConnection::set_buffers(uint32_t s, uint32_t n)
+{
+  src_->MmalPort::set_buffers(s, n);
+  dest_->MmalPort::set_buffers(s, n);
+  return 0;
+}
+
+
+// ---------------------------------------------------------------------------
+
+// Any refs required are applied to our enclosing object
+void MmalPortAndPool::AddRef()
+{
+  component_->AddRef();
+}
+
+// Any refs required are applied to our enclosing object
+void MmalPortAndPool::Release()
+{
+  component_->Release();
+}
+
+bool MmalPortAndPool::HasOneRef() const
+{
+  return component_->HasOneRef();
+}
+
+bool MmalPortAndPool::HasAtLeastOneRef() const
+{
+  return component_->HasAtLeastOneRef();
+}
+
+const MmalTaskRunner& MmalPortAndPool::task_runner() const
+{
+  return component_->task_runner();
+}
+
+// ---------------------------------------------------------------------------
+
+// static
+bool MmalVideoDecoder::IsCodecSupported(VideoCodec codec) {
+//  LOG(ERROR) << "Test codec: " << codec;
+  // If we have checked what we can do then use that otherwise press on
+  // if we have any chance (i.e. can find a valid 4cc)
+  return (supported_video_codecs & (1 << codec)) != 0 ||
+         (supported_video_codecs == 0 && video_codec_to_fourcc(codec) != MMAL_ENCODING_UNKNOWN);
+}
+
+bool MmalVideoDecoder::IsSizeSupported(const gfx::Size& size)
+{
+  return size.width() <= MMAL_LIMIT_WIDTH &&
+    size.height() <= MMAL_LIMIT_HEIGHT &&
+    size.width() >= 32 &&
+    size.height() >= 32;
+}
+
+// Resizer can deal with larger values than the limits we want on the decoder
+// Pick limits that might not kill us (at least till Pi4)
+static bool IsResizeSizeSupported(const gfx::Size& size)
+{
+  return size.width() <= 2048 &&
+    size.height() <= 1280 &&
+    size.width() >= 32 &&
+    size.height() >= 32;
+}
+
+
+
+MmalVideoDecoder::MmalVideoDecoder(GpuVideoAcceleratorFactories* gpu_factories) :
+  gpu_factories_(gpu_factories->ShouldUseGpuMemoryBuffersForVideoFrames(false) ? gpu_factories : nullptr),
+  state_(MmalDecoderState::kNew),
+  counted_(false),
+  wants_extra_data_(false),
+  opt_(Options::Create()),
+  vc_init_(MmalVcInit::Init(opt_->single_process())),
+  weak_factory_(this)
+{
+#if TRACE_COMPONENT_CREATION || 1
+  LOG(INFO) << "@@@ Create Decoder pid=" << getpid() << ", ppid=" << getppid() << ", gpu=" << (void *)gpu_factories <<
+      ", pf:" << (int)gpu_factories->VideoFrameOutputFormat(media::PIXEL_FORMAT_I420A) <<
+    ", context:" << (void *)gpu_factories->ContextGL() << ", use_gpu:" << gpu_factories->ShouldUseGpuMemoryBuffersForVideoFrames(false);
+#endif
+
+  if (!vc_init_) {
+    state_ = MmalDecoderState::kFatal;
+    return;
+  }
+
+  opt_->set_firmware_date(vc_init_->firmware_date());
+  opt_->set_gpu_mem(vc_init_->gpu_mem());
+  opt_->set_gpu_frames(gpu_factories->ShouldUseGpuMemoryBuffersForVideoFrames(false));
+
+  LOG(INFO) << opt_->ToString();
+  LOG(INFO) << opt_->OptString();
+
+  state_ = MmalDecoderState::kUninitialised;
+  return;
+}
+
+MmalVideoDecoder::~MmalVideoDecoder() {
+#if TRACE_COMPONENT_CREATION
+  LOG(INFO) << "@@@ Destroy Decoder";
+#endif
+
+  uninitialise();
+
+  if (counted_) {
+    base::subtle::NoBarrier_AtomicIncrement(&decoder_count, -1);
+  }
+}
+
+
+
+std::string MmalVideoDecoder::GetDisplayName() const {
+  return "MmalVideoDecoder";
+}
+
+
+void MmalVideoDecoder::uninitialise(const MmalDecoderState new_state)
+{
+  if (decoder_ != NULL) {
+    decoder_->kill();
+    decoder_ = NULL;
+  }
+  if (resizer_ != NULL) {
+    resizer_->kill();
+    resizer_ = NULL;
+  }
+
+  extra_data_ = NULL;
+  wants_extra_data_ = false;
+
+  state_ = new_state;
+}
+
+// EOS callback - accessed via WeakPtr so if we are destroyed
+// whilst EOS is still pending this won't happen
+//
+// We call Reset on EOS.  This has a couple of benefits
+// 1) It reclaims memory as soon as possible (there's a decent chance we
+//    are done with this decoder now)
+// 2) It should allow us to go <decode> <eos> <decode> which is defined to
+//    work in the Decode spec (even if it doesn't seem to happen in reality)
+
+void MmalVideoDecoder::eos_cb(const DecodeCB decode_cb, DecodeStatus status)
+{
+//  LOG(ERROR) << "+++ EOS(" << status << ")";
+  Reset(base::Bind(decode_cb, status));
+}
+
+// Initializes a VideoDecoder with the given |config|, executing the
+// |init_cb| upon completion. |output_cb| is called for each output frame
+// decoded by Decode().
+//
+// If |low_delay| is true then the decoder is not allowed to queue frames,
+// except for out-of-order frames, i.e. if the next frame can be returned it
+// must be returned without waiting for Decode() to be called again.
+// Initialization should fail if |low_delay| is true and the decoder cannot
+// satisfy the requirements above.
+//
+// |cdm_context| can be used to handle encrypted buffers. May be null if the
+// stream is not encrypted.
+//
+// |waiting_cb| is called whenever the decoder is stalled waiting for
+// something, e.g. decryption key. May be called at any time after
+// Initialize().
+//
+// Note:
+// 1) The VideoDecoder will be reinitialized if it was initialized before.
+//    Upon reinitialization, all internal buffered frames will be dropped.
+// 2) This method should not be called during pending decode or reset.
+// 3) No VideoDecoder calls should be made before |init_cb| is executed.
+// 4) VideoDecoders should take care to run |output_cb| as soon as the frame
+// is ready (i.e. w/o thread trampolining) since it can strongly affect frame
+// delivery times with high-frame-rate material.  See Decode() for additional
+// notes.
+// 5) |init_cb| may be called before this returns.
+void MmalVideoDecoder::Initialize(const VideoDecoderConfig& config,
+                        bool low_delay,
+                        CdmContext* cdm_context,
+                        const InitCB& init_cb,
+                        const OutputCB& output_cb,
+                        const WaitingForDecryptionKeyCB& waiting_for_decryption_key_cb)
+{
+  LOG(INFO) << "Mmal Init: low_delay=" << low_delay << ", config=" << config.AsHumanReadableString();
+
+  DCHECK(config.IsValidConfig());
+  DCHECK(!output_cb.is_null());
+
+  InitCB bound_init_cb = BindToCurrentLoop(init_cb);
+
+  // If dead - give up now
+  if (state_ <= MmalDecoderState::kFatal) {
+    LOG(ERROR) << __func__ << ": FATAL";
+    bound_init_cb.Run(false);
+    return;
+  }
+
+  // If already inited (or failed) then kill
+  if (state_ != kUninitialised) {
+    // * This is unsubtle in the extreme
+    // and we would really prefer to wait for the kill ops to finish
+    // before continuing so we don't have an overlap where we have
+    // two sets of resizer buffers ... or preserve the resizer...
+    // or something...
+    uninitialise();
+  }
+
+  if (state_ != kUninitialised) {
+    LOG(ERROR) << __func__ << ": Unexpected state: " << state_;
+    goto fail;
+  }
+
+  // Do we support this?
+  if (config.is_encrypted() || !IsCodecSupported(config.codec()) ||
+      !IsSizeSupported(config.coded_size())) {
+//    LOG(ERROR) << "Encrypted or unsupported";
+    // No
+    goto fail;
+  }
+
+  // Check count
+  // 0 will effectively turn off mmal decode
+  if (!counted_)
+  {
+    const int n = (int)base::subtle::NoBarrier_AtomicIncrement(&decoder_count, 1);
+    const int max_dec = (int)opt_->max_decoders();
+    counted_ = true;
+    if (n > max_dec) {
+      LOG(WARNING) << __func__ << ": Exceeded decoder limit: " << n << "/" << max_dec;
+      goto fail;
+    }
+  }
+
+  LOG(INFO) << "Decoder count:" << decoder_count << "/" << opt_->max_decoders();
+
+  // Stash for later reset
+  decoder_config_ = config;
+  low_delay_ = opt_->low_delay(low_delay);
+
+  if (config.extra_data().size() != 0)
+  {
+    extra_data_ = DecoderBuffer::CopyFrom(&config.extra_data()[0], config.extra_data().size());
+    wants_extra_data_ = true;
+  }
+
+  decoder_ = new MmalVideoDecoderComponent(vc_init_);
+  if (decoder_->create(*opt_, config, low_delay_) != 0)
+    goto fail;
+  if (decoder_->enable() != 0)
+    goto fail;
+
+  resizer_ = new MmalVideoResizerComponent(vc_init_,
+    opt_->frame_copy_mode(false) == FrameCopyMode::FRAME_GPU ? gpu_factories_ : nullptr);
+
+  if (resizer_->create(*opt_) != 0)
+    goto fail;
+
+  if (resizer_->configure(*opt_,
+      config.natural_size(),
+      BindToCurrentLoop(output_cb)) != 0)
+    goto fail;
+
+  resizer_->set_red_pixel(opt_->red_pixel());
+  if (resizer_->enable() != 0)
+    goto fail;
+
+  if (resizer_->connect_to_output(decoder_) != 0)
+    goto fail;
+
+  state_ = MmalDecoderState::kInitialised;
+
+  // Success!
+  bound_init_cb.Run(true);
+  return;
+
+
+fail:
+  LOG(INFO) << __func__ << ": FAILED";
+  uninitialise(std::min(state_, MmalDecoderState::kFail));
+  if (counted_) {
+    counted_ = false;
+    base::subtle::NoBarrier_AtomicIncrement(&decoder_count, -1);
+  }
+  bound_init_cb.Run(false);
+}
+
+// Requests a |buffer| to be decoded. The status of the decoder and decoded
+// frame are returned via the provided callback. Some decoders may allow
+// decoding multiple buffers in parallel. Callers should call
+// GetMaxDecodeRequests() to get number of buffers that may be decoded in
+// parallel.
+//
+// Implementations guarantee that the |decode_cb| will not be called from
+// within this method, and that it will be called even if Decode() is never
+// called again.
+//
+// After decoding is finished the decoder calls |output_cb| specified in
+// Initialize() for each decoded frame. |output_cb| may be called before or
+// after |decode_cb|, including before Decode() returns.
+//
+// If |buffer| is an EOS buffer then the decoder must be flushed, i.e.
+// |output_cb| must be called for each frame pending in the queue and
+// |decode_cb| must be called after that. Callers will not call Decode()
+// again until after the flush completes.
+void MmalVideoDecoder::Decode(const scoped_refptr<DecoderBuffer> buffer,
+                                const DecodeCB& decode_cb) {
+  DCHECK(buffer.get());
+  DCHECK(!decode_cb.is_null());
+
+  const bool eos_req = buffer->end_of_stream();
+
+  DecodeCB decode_cb_bound(BindToCurrentLoop(decode_cb));
+
+  // If we are in any state except running (reset, never sent data, eos)
+  // then EOS won't propagate and we should ack here & now
+  if (eos_req && state_ != MmalDecoderState::kRunning) {
+    LOG(INFO) << "<<< >>> EOS";
+    decode_cb_bound.Run(DecodeStatus::OK);
+    return;
+  }
+
+  if (state_ == MmalDecoderState::kResetEOS) {
+    // * Really we should be able to do half this work
+    //   and drop into ResetRun but the enables don't currently work
+    //   correctly for that
+
+    decoder_ = new MmalVideoDecoderComponent(vc_init_);
+    if (decoder_->create(*opt_, decoder_config_, low_delay_) != 0)
+      goto fail;
+    if (decoder_->enable() != 0)
+      goto fail;
+
+    if (resizer_->connect_to_output(decoder_) != 0)
+      goto fail;
+
+    resizer_->reset2();
+
+    wants_extra_data_ = (extra_data_ != NULL);
+
+    state_ = MmalDecoderState::kInitialised;
+  }
+  else if (state_ == MmalDecoderState::kResetRun) {
+    resizer_->reset2();
+    decoder_->reset2();
+    wants_extra_data_ = (extra_data_ != NULL);
+    state_ = MmalDecoderState::kInitialised;
+  }
+
+  if (state_ < MmalDecoderState::kInitialised)
+  {
+    LOG(ERROR) << "### Decode in bad state: " << state_;
+    goto fail;
+  }
+
+  if (wants_extra_data_) {
+    if (extra_data_ == NULL) {
+      LOG(ERROR) << "### extra_data_ NULL";
+      goto fail;
+    }
+
+    wants_extra_data_ = false;
+    if (decoder_->submit(extra_data_, DecodeCB()) < 0)
+      goto fail;
+  }
+
+  if (eos_req) {
+    // eos_cb must be called on the current thread
+    resizer_->set_eos_cb(BindToCurrentLoop(
+        base::Bind(&MmalVideoDecoder::eos_cb, GetWeakPtr(), decode_cb)));
+
+    // The decode_cb we pass here isn't ever used - it just indicates that
+    // we want Qed submission.  * Mucky.
+    if (decoder_->submit(buffer, decode_cb_bound) < 0)
+      goto fail;
+
+    state_ = MmalDecoderState::kEOS;
+  }
+  else
+  {
+    if (decoder_->submit(buffer, decode_cb_bound) < 0)
+      goto fail;
+
+    state_ = MmalDecoderState::kRunning;
+  }
+
+//  LOG(ERROR) << ">>> Decode";
+  return;
+
+fail:
+  LOG(WARNING) << ">>> Decode: FAIL";
+  decode_cb_bound.Run(DecodeStatus::DECODE_ERROR);
+}
+
+// Resets decoder state. All pending Decode() requests will be finished or
+// aborted before |closure| is called.
+// Note: No VideoDecoder calls should be made before |closure| is executed.
+//
+// This fn shuts stuff down - restart is managed at the beginning of Decode
+
+void MmalVideoDecoder::Reset(const base::Closure& closure) {
+  switch (state_) {
+    case MmalDecoderState::kRunning:
+      LOG(INFO) << "--- Reset (running)";
+      decoder_->reset1();
+      resizer_->reset1();
+      state_ = MmalDecoderState::kResetRun;
+      break;
+
+    case MmalDecoderState::kEOS:
+      LOG(INFO) << "--- Reset (EOS)";
+      decoder_->kill();
+      decoder_.reset();
+      resizer_->reset1();
+      state_ = MmalDecoderState::kResetEOS;
+      break;
+
+    default:
+      LOG(INFO) << "--- Reset (null)";
+      break;
+  }
+
+  // Ensure the closure is scheduled after any callbacks triggered by
+  // the reset sequence
+  base::SequencedTaskRunnerHandle::Get()->PostTask(FROM_HERE, closure);
+  return;
+}
+
+bool MmalVideoDecoder::CanReadWithoutStalling() const
+{
+  return resizer_ == nullptr || !resizer_->is_output_stalling();
+}
+
+int MmalVideoDecoder::GetMaxDecodeRequests() const
+{
+  return 1;
+}
+
+void MmalVideoDecoder::TryResizeFrame(uint32_t width, uint32_t height)
+{
+  const gfx::Size size_req(width, height);
+  if (IsResizeSizeSupported(size_req) && resizer_)
+    resizer_->resize(size_req);
+}
+
+}  // namespace media
+
+
+
--- /dev/null
+++ b/media/filters/mmal_video_decoder.h
@@ -0,0 +1,117 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef MEDIA_FILTERS_MMAL_VIDEO_DECODER_H_
+#define MEDIA_FILTERS_MMAL_VIDEO_DECODER_H_
+
+#include <list>
+
+#include "base/callback.h"
+#include "base/macros.h"
+#include "base/memory/weak_ptr.h"
+#include "base/threading/thread_checker.h"
+#include "media/base/video_decoder.h"
+#include "media/base/video_decoder_config.h"
+#include "media/base/video_frame_pool.h"
+#include "base/command_line.h"
+#include "base/strings/string_number_conversions.h"
+
+
+
+struct AVCodecContext;
+struct AVFrame;
+
+namespace base {
+class SingleThreadTaskRunner;
+}
+
+namespace media {
+
+class DecoderBuffer;
+class MmalVideoDecoderComponent;
+class MmalVideoResizerComponent;
+class MmalVcInit;
+class GpuVideoAcceleratorFactories;
+
+class MEDIA_EXPORT MmalVideoDecoder : public VideoDecoder {
+public:
+  class Options;
+
+private:
+  enum MmalDecoderState {
+      kFatal = -2,
+      kFail = -1,
+      kNew = 0,
+      kUninitialised,
+      kReseting,
+      kResetEOS,     // Reset from EOS
+      kResetRun,     // Reset from running
+      kInitialised,  // Init but no decode yet
+      kRunning,      // Have successful decode
+      kEOS           // EOS rxed
+  };
+
+  GpuVideoAcceleratorFactories* const gpu_factories_;
+
+  MmalDecoderState state_;
+
+  // Have we counted this decoder (for decoder count limits) yet?
+  bool counted_;
+
+  scoped_refptr<DecoderBuffer> extra_data_;
+  bool wants_extra_data_;
+
+  scoped_refptr<MmalVideoDecoderComponent> decoder_;
+  // Resizer may persist after VideoDecoder dies if it maintains frames
+  // with shared VC memory
+  scoped_refptr<MmalVideoResizerComponent> resizer_;
+
+  VideoDecoderConfig decoder_config_;
+  bool low_delay_;
+
+  const std::unique_ptr<Options> opt_;
+  scoped_refptr<MmalVcInit> vc_init_;
+
+  void uninitialise(const MmalDecoderState new_state = kUninitialised);
+  void eos_cb(const DecodeCB decode_cb, DecodeStatus status);
+  void format_req_cb(VideoPixelFormat pixel_format);
+
+ public:
+  static bool IsCodecSupported(VideoCodec codec);
+  static bool IsSizeSupported(const gfx::Size& size);
+
+  MmalVideoDecoder(GpuVideoAcceleratorFactories* gpu_factories);
+  ~MmalVideoDecoder() override;
+
+  // VideoDecoder implementation.
+  std::string GetDisplayName() const override;
+
+  void Initialize(const VideoDecoderConfig& config,
+                          bool low_delay,
+                          CdmContext* cdm_context,
+                          const InitCB& init_cb,
+                          const OutputCB& output_cb,
+                          const WaitingForDecryptionKeyCB& waiting_for_decryption_key_cb) override;
+
+  void Decode(const scoped_refptr<DecoderBuffer> buffer,
+              const DecodeCB& decode_cb) override;
+  void Reset(const base::Closure& closure) override;
+  bool CanReadWithoutStalling() const override;
+  int GetMaxDecodeRequests() const override;
+  void TryResizeFrame(uint32_t width, uint32_t height) override;
+
+  inline base::WeakPtr<MmalVideoDecoder> GetWeakPtr() {
+    return weak_factory_.GetWeakPtr();
+  }
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(MmalVideoDecoder);
+  base::WeakPtrFactory<MmalVideoDecoder> weak_factory_;
+};
+
+}  // namespace media
+
+#endif  // MEDIA_FILTERS_MMAL_VIDEO_DECODER_H_
+
+
--- a/media/renderers/default_decoder_factory.cc
+++ b/media/renderers/default_decoder_factory.cc
@@ -43,6 +43,10 @@
 #include "media/filters/vpx_video_decoder.h"
 #endif
 
+#ifdef __ARM_ARCH
+#include "media/filters/mmal_video_decoder.h"
+#endif
+
 namespace media {
 
 DefaultDecoderFactory::DefaultDecoderFactory(
@@ -115,6 +119,10 @@
   video_decoders->push_back(CreateFuchsiaVideoDecoder());
 #endif
 
+#ifdef __ARM_ARCH
+  video_decoders->push_back(std::make_unique<MmalVideoDecoder>(gpu_factories));
+#endif
+
 #if BUILDFLAG(ENABLE_LIBVPX)
   video_decoders->push_back(std::make_unique<OffloadingVpxVideoDecoder>());
 #endif
--- a/media/renderers/paint_canvas_video_renderer.cc
+++ b/media/renderers/paint_canvas_video_renderer.cc
@@ -487,6 +487,7 @@
   // frame has an unexpected format.
   if (!video_frame.get() || video_frame->natural_size().IsEmpty() ||
       !(media::IsYuvPlanar(video_frame->format()) ||
+        video_frame->format() == media::PIXEL_FORMAT_MMAL_BUFFER ||
         video_frame->format() == media::PIXEL_FORMAT_Y16 ||
         video_frame->HasTextures())) {
     cc::PaintFlags black_with_alpha_flags;
@@ -784,7 +785,20 @@
   SkYUVColorSpace color_space = kRec601_SkYUVColorSpace;
   video_frame->ColorSpace().ToSkYUVColorSpace(&color_space);
 
+
   switch (video_frame->format()) {
+    case PIXEL_FORMAT_ARGB:
+#if 1
+      // * Really shouldn't be using this, but temp fallback
+      libyuv::CopyPlane((const uint8_t *)video_frame->data(0), video_frame->stride(0),
+                        (uint8_t *)rgb_pixels, row_bytes,
+                        video_frame->row_bytes(0), video_frame->rows(0));
+      break;
+#else
+      NOTREACHED() << "Only YUV formats and Y16 are supported, got: "
+                   << media::VideoPixelFormatToString(video_frame->format());
+      break;
+#endif
     case PIXEL_FORMAT_YV12:
     case PIXEL_FORMAT_I420:
       switch (color_space) {
@@ -928,7 +942,6 @@
     case PIXEL_FORMAT_NV21:
     case PIXEL_FORMAT_UYVY:
     case PIXEL_FORMAT_YUY2:
-    case PIXEL_FORMAT_ARGB:
     case PIXEL_FORMAT_XRGB:
     case PIXEL_FORMAT_RGB24:
     case PIXEL_FORMAT_RGB32:
--- a/media/renderers/video_renderer_impl.cc
+++ b/media/renderers/video_renderer_impl.cc
@@ -324,6 +324,11 @@
   algorithm_->OnLastFrameDropped();
 }
 
+void VideoRendererImpl::TryResizeFrame(uint32_t width, uint32_t height)
+{
+  video_decoder_stream_->TryResizeFrame(width, height);
+}
+
 void VideoRendererImpl::OnVideoDecoderStreamInitialized(bool success) {
   DCHECK(task_runner_->BelongsToCurrentThread());
   base::AutoLock auto_lock(lock_);
--- a/media/renderers/video_renderer_impl.h
+++ b/media/renderers/video_renderer_impl.h
@@ -84,6 +84,8 @@
                                    base::TimeTicks deadline_max,
                                    bool background_rendering) override;
   void OnFrameDropped() override;
+  void TryResizeFrame(uint32_t width, uint32_t height) override;
+
 
  private:
   // Callback for |video_decoder_stream_| initialization.
--- a/media/renderers/video_resource_updater.cc
+++ b/media/renderers/video_resource_updater.cc
@@ -38,6 +38,7 @@
 #include "media/base/video_frame.h"
 #include "media/renderers/paint_canvas_video_renderer.h"
 #include "media/video/half_float_maker.h"
+#include "mojo/public/cpp/system/platform_handle.h"
 #include "third_party/khronos/GLES2/gl2.h"
 #include "third_party/khronos/GLES2/gl2ext.h"
 #include "third_party/libyuv/include/libyuv.h"
@@ -199,6 +200,7 @@
 
   // Casts |this| to SoftwarePlaneResource for software compositing.
   SoftwarePlaneResource* AsSoftware();
+  SoftwarePlaneVideoFrameResource* AsVideoFrame();
 
   // Casts |this| to HardwarePlaneResource for GPU compositing.
   HardwarePlaneResource* AsHardware();
@@ -219,6 +221,10 @@
     has_unique_frame_id_and_plane_index_ = true;
   }
 
+  virtual bool kill_me() const {  // Recycle wanted ASAP - VideoFrames want to be kiled when refs hit zero
+    return false;
+  }
+
   // Accessors for resource identifiers provided at construction time.
   uint32_t plane_resource_id() const { return plane_resource_id_; }
   const gfx::Size& resource_size() const { return resource_size_; }
@@ -229,17 +235,17 @@
   void remove_ref() { --ref_count_; }
   void clear_refs() { ref_count_ = 0; }
   bool has_refs() const { return ref_count_ != 0; }
+  virtual bool overlay_candidate() const { return false; }
+  virtual uint32_t stride() const { return 0; }
 
  private:
   const uint32_t plane_resource_id_;
   const gfx::Size resource_size_;
   const viz::ResourceFormat resource_format_;
   const bool is_software_;
-
   // The number of times this resource has been imported vs number of times this
   // resource has returned.
   int ref_count_ = 0;
-
   // These two members are used for identifying the data stored in this
   // resource; they uniquely identify a VideoFrame plane.
   int unique_frame_id_ = 0;
@@ -252,16 +258,43 @@
 
 class VideoResourceUpdater::SoftwarePlaneResource
     : public VideoResourceUpdater::PlaneResource {
- public:
+protected:
+  viz::SharedBitmapReporter* const shared_bitmap_reporter_;
+  const viz::SharedBitmapId shared_bitmap_id_;
+
+public:
   SoftwarePlaneResource(uint32_t plane_resource_id,
+                const gfx::Size& resource_size,
+                const viz::SharedBitmapId& shared_bitmap,
+                viz::SharedBitmapReporter* const shared_bitmap_reporter)
+      : PlaneResource(plane_resource_id, resource_size, viz::ResourceFormat::RGBA_8888, true),
+        shared_bitmap_reporter_(shared_bitmap_reporter),
+        shared_bitmap_id_(shared_bitmap)
+  {
+  }
+
+  ~SoftwarePlaneResource() override {
+  }
+
+  const viz::SharedBitmapId& shared_bitmap_id() const {
+    return shared_bitmap_id_;
+  }
+
+  virtual void* pixels() = 0;
+
+  // Returns a memory dump GUID consistent across processes.
+  virtual base::UnguessableToken GetSharedMemoryGuid() const = 0;
+};
+
+class VideoResourceUpdater::SoftwarePlaneBitmapResource
+    : public VideoResourceUpdater::SoftwarePlaneResource {
+ public:
+  SoftwarePlaneBitmapResource(uint32_t plane_resource_id,
                         const gfx::Size& size,
                         viz::SharedBitmapReporter* shared_bitmap_reporter)
-      : PlaneResource(plane_resource_id,
-                      size,
-                      viz::ResourceFormat::RGBA_8888,
-                      /*is_software=*/true),
-        shared_bitmap_reporter_(shared_bitmap_reporter),
-        shared_bitmap_id_(viz::SharedBitmap::GenerateId()) {
+      : SoftwarePlaneResource(plane_resource_id, size,
+                              viz::SharedBitmap::GenerateId(), shared_bitmap_reporter)
+  {
     DCHECK(shared_bitmap_reporter_);
 
     // Allocate SharedMemory and notify display compositor of the allocation.
@@ -274,28 +307,90 @@
     shared_bitmap_reporter_->DidAllocateSharedBitmap(std::move(handle),
                                                      shared_bitmap_id_);
   }
-  ~SoftwarePlaneResource() override {
+
+  ~SoftwarePlaneBitmapResource() override {
     shared_bitmap_reporter_->DidDeleteSharedBitmap(shared_bitmap_id_);
   }
 
-  const viz::SharedBitmapId& shared_bitmap_id() const {
-    return shared_bitmap_id_;
-  }
-  void* pixels() { return shared_memory_->memory(); }
+  void* pixels() override { return shared_memory_->memory(); }
 
   // Returns a memory dump GUID consistent across processes.
-  base::UnguessableToken GetSharedMemoryGuid() const {
+  base::UnguessableToken GetSharedMemoryGuid() const override {
     return shared_memory_->mapped_id();
   }
 
  private:
-  viz::SharedBitmapReporter* const shared_bitmap_reporter_;
-  const viz::SharedBitmapId shared_bitmap_id_;
   std::unique_ptr<base::SharedMemory> shared_memory_;
 
-  DISALLOW_COPY_AND_ASSIGN(SoftwarePlaneResource);
+  DISALLOW_COPY_AND_ASSIGN(SoftwarePlaneBitmapResource);
 };
 
+class VideoResourceUpdater::SoftwarePlaneVideoFrameResource
+    : public VideoResourceUpdater::SoftwarePlaneResource {
+
+  scoped_refptr<VideoFrame> video_frame_;
+
+  static viz::SharedBitmapId make_nz_id(const viz::SharedBitmapId& id) {
+    if (!id.IsZero())
+      return id;
+    return viz::SharedBitmap::GenerateId();
+  }
+
+ public:
+  SoftwarePlaneVideoFrameResource(uint32_t plane_resource_id,
+                        scoped_refptr<VideoFrame> video_frame,
+                        VideoResourceUpdater * const video_resource_updater)
+      : SoftwarePlaneResource(plane_resource_id, video_frame->visible_rect().size(),
+                              make_nz_id(video_frame->GetBitmapId()),
+                              video_resource_updater->shared_bitmap_reporter_),
+        video_frame_(video_frame)
+  {
+    DCHECK(shared_bitmap_reporter_);
+
+    SetUniqueId(video_frame_->unique_id(), 0);
+
+    if (!video_frame->GetBitmapId().IsZero()) {
+      return;
+    }
+
+    mojo::ScopedSharedBufferHandle h (mojo::WrapSharedMemoryHandle(
+        video_frame_->shared_memory_handle().Duplicate(),
+        video_frame_->shared_memory_handle().GetSize(),
+        mojo::UnwrappedSharedMemoryHandleProtection::kReadWrite));
+
+    shared_bitmap_reporter_->DidAllocateSharedBitmap(
+      std::move(h),
+      shared_bitmap_id_);
+
+    // The updater has a weak pointer factory so use that for generating
+    // the kill closure.
+    video_frame_->SetBitmapIdAndKillCB(shared_bitmap_id_,
+                                       base::Bind(&VideoResourceUpdater::DidDeleteSharedBitmap,
+                                                  video_resource_updater->weak_ptr_factory_.GetWeakPtr(),
+                                                  shared_bitmap_id_));
+  }
+
+  ~SoftwarePlaneVideoFrameResource() override {}
+
+  void* pixels() override { return video_frame_->data(0); }
+
+  // Returns a memory dump GUID consistent across processes.
+  base::UnguessableToken GetSharedMemoryGuid() const override {
+    return video_frame_->shared_memory_handle().GetGUID();
+  }
+
+  bool kill_me() const override {
+    return !has_refs();
+  }
+
+  bool overlay_candidate() const override { return true; }
+
+  uint32_t stride() const override { return video_frame_->stride(0); }
+
+  DISALLOW_COPY_AND_ASSIGN(SoftwarePlaneVideoFrameResource);
+};
+
+
 class VideoResourceUpdater::HardwarePlaneResource
     : public VideoResourceUpdater::PlaneResource {
  public:
@@ -318,7 +413,7 @@
   const gpu::Mailbox& mailbox() const { return mailbox_; }
   GLuint texture_id() const { return allocation_.texture_id; }
   GLenum texture_target() const { return allocation_.texture_target; }
-  bool overlay_candidate() const { return allocation_.overlay_candidate; }
+  bool overlay_candidate() const override { return allocation_.overlay_candidate; }
 
  private:
   viz::ContextProvider* const context_provider_;
@@ -625,7 +720,7 @@
   if (software_compositor()) {
     DCHECK_EQ(format, viz::ResourceFormat::RGBA_8888);
 
-    all_resources_.push_back(std::make_unique<SoftwarePlaneResource>(
+    all_resources_.push_back(std::make_unique<SoftwarePlaneBitmapResource>(
         plane_resource_id, plane_size, shared_bitmap_reporter_));
   } else {
     // Video textures get composited into the display frame, the GPU doesn't
@@ -765,6 +860,17 @@
   return external_resources;
 }
 
+static bool is_mmal_frame(const scoped_refptr<VideoFrame>& video_frame)
+{
+  if (video_frame->format() != PIXEL_FORMAT_MMAL_BUFFER)
+    return false;
+  if (!video_frame->shared_memory_handle().IsValid()) {
+    LOG(ERROR) << "Video frame handle not valid";
+    return false;
+  }
+  return true;
+}
+
 VideoFrameExternalResources VideoResourceUpdater::CreateForSoftwarePlanes(
     scoped_refptr<VideoFrame> video_frame) {
   TRACE_EVENT0("cc", "VideoResourceUpdater::CreateForSoftwarePlanes");
@@ -774,6 +880,7 @@
 
   // Only YUV and Y16 software video frames are supported.
   DCHECK(IsYuvPlanar(input_frame_format) ||
+         input_frame_format == PIXEL_FORMAT_MMAL_BUFFER ||
          input_frame_format == PIXEL_FORMAT_Y16);
 
   viz::ResourceFormat output_resource_format;
@@ -837,6 +944,7 @@
           return false;
 
         return resource->resource_format() != output_resource_format ||
+               resource->kill_me() ||
                !base::ContainsValue(outplane_plane_sizes,
                                     resource->resource_size());
       };
@@ -845,11 +953,37 @@
   // Recycle or allocate resources for each video plane.
   std::vector<PlaneResource*> plane_resources;
   plane_resources.reserve(output_plane_count);
-  for (size_t i = 0; i < output_plane_count; ++i) {
-    plane_resources.push_back(RecycleOrAllocateResource(
-        outplane_plane_sizes[i], output_resource_format, output_color_space,
-        video_frame->unique_id(), i));
-    plane_resources.back()->add_ref();
+  if (software_compositor() &&
+      is_mmal_frame(video_frame))
+  {
+//    LOG(INFO) << "Looking for id " << video_frame->unique_id();
+
+    // Check we don't already have unique_id.... Reuse if we do
+    PlaneResource* vf_resource = nullptr;
+    for (auto& resource : all_resources_) {
+      if (resource->Matches(video_frame->unique_id(), 0)) {
+        vf_resource = resource.get();
+        break;
+      }
+    }
+    // Build a new one if we don't
+    if (vf_resource == nullptr) {
+      all_resources_.push_back(std::make_unique<SoftwarePlaneVideoFrameResource>(
+         next_plane_resource_id_++, video_frame, this));
+      vf_resource = all_resources_.back().get();
+    }
+
+    plane_resources.push_back(vf_resource);
+    vf_resource->add_ref();
+  }
+  else
+  {
+    for (size_t i = 0; i < output_plane_count; ++i) {
+      plane_resources.push_back(RecycleOrAllocateResource(
+          outplane_plane_sizes[i], output_resource_format, output_color_space,
+          video_frame->unique_id(), i));
+      plane_resources.back()->add_ref();
+    }
   }
 
   VideoFrameExternalResources external_resources;
@@ -918,6 +1052,8 @@
           software_resource->shared_bitmap_id(),
           software_resource->resource_size(),
           plane_resource->resource_format());
+      transferable_resource.is_overlay_candidate = software_resource->overlay_candidate();
+      transferable_resource.stride = software_resource->stride();
     } else {
       HardwarePlaneResource* hardware_resource = plane_resource->AsHardware();
       external_resources.type = VideoFrameResourceType::RGBA;
@@ -1100,6 +1236,11 @@
   video_frame->UpdateReleaseSyncToken(&client);
 }
 
+// Shim to reporter - useful for callback generation
+void VideoResourceUpdater::DidDeleteSharedBitmap(const viz::SharedBitmapId& id) const {
+  shared_bitmap_reporter_->DidDeleteSharedBitmap(id);
+}
+
 void VideoResourceUpdater::RecycleResource(uint32_t plane_resource_id,
                                            const gpu::SyncToken& sync_token,
                                            bool lost_resource) {
@@ -1107,6 +1248,7 @@
       [plane_resource_id](const std::unique_ptr<PlaneResource>& resource) {
         return resource->plane_resource_id() == plane_resource_id;
       };
+
   auto resource_it =
       std::find_if(all_resources_.begin(), all_resources_.end(), matches_id_fn);
   if (resource_it == all_resources_.end())
--- a/media/renderers/video_resource_updater.h
+++ b/media/renderers/video_resource_updater.h
@@ -123,6 +123,8 @@
   class PlaneResource;
   class HardwarePlaneResource;
   class SoftwarePlaneResource;
+  class SoftwarePlaneBitmapResource;
+  class SoftwarePlaneVideoFrameResource;
 
   // A resource that will be embedded in a DrawQuad in the next CompositorFrame.
   // Each video plane will correspond to one FrameResource.
@@ -178,6 +180,8 @@
                      const gpu::SyncToken& sync_token,
                      bool lost_resource);
 
+  void DidDeleteSharedBitmap(const viz::SharedBitmapId& id) const;
+
   // base::trace_event::MemoryDumpProvider implementation.
   bool OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
                     base::trace_event::ProcessMemoryDump* pmd) override;
--- /dev/null
+++ b/pi-util/BUILD.txt
@@ -0,0 +1,231 @@
+Build notes (cross compile from Ubuntu)
+=======================================
+
+Build from a patch
+------------------
+
+# Pick somewhere to put this
+cd ~
+mkdir chromium
+cd chromium
+# Get the build tools & put on path
+# You may want to add the path in .bashrc
+git clone https://chromium.googlesource.com/chromium/tools/depot_tools
+export PATH=$PATH:`pwd`/depot_tools
+# Get the main tree
+fetch chromium
+cd src
+# Checkout the version you want
+# * Fix version number
+git checkout 55.0.2883.99
+# Fix up any missing dependancies on the build m/c
+# * may well be unnecessary if you have built any other chrome
+./build/install-build-deps.sh
+./build/install-build-deps.sh --arm
+# Fetch & pull the other bits of the tree to sync.
+# As we are checking out a tag the --with_branch_heads is important
+gclient sync --with_branch_heads
+# Patch - should be completely clean if everything matchs
+# * Fix patch file to correct name / location
+cd ..
+patch -p1 < v55.0.2883.99.patch
+cd src
+# * Get a sysroot from somewhere and put it in build/linux/raspian_jessie_pi1-sysroot
+# * Example below is only if you have got an appropriate one lying around
+# * Otherwise follow sysroot instructions further down
+rsync -rl previous_location/raspian_jessie_pi1-sysroot build/linux/
+# Build output directories (out/armv6, out/armv7)
+# * This script currently assumes a sysroot of build/linux/raspian_jessie_pi1-sysroot
+#   so may need editing if you have put it elsewhere
+pi-util/gngen.py
+# Build chrome
+ninja -C out/armv6 chrome chrome_sandbox
+# Build armv7 ffmpeg
+ninja -C out/armv7 third_party/ffmpeg
+
+
+To run on a Pi
+--------------
+
+This requires a little installation.  The sandbox and ffmpeg shared libs
+need to be copied to the pi.  As neither is being tweaked much by me these
+steps should only be required if the underlying Chrome changes.  Otherwise
+you can just run out of the build directory (src/out/armv6)
+
+Assuming you can mount the build dir from the pi.
+
+# On the Pi NOT the build machine
+cd <path to build env>/src
+# Copy the ffmpeg libs
+pi-util/cplibs.sh
+# Copy the sandbox. BUILDTYPE tells the script where to get it from
+# This doesn't seem to be needed anymore with linux 4.9 and chrome 55
+BUILDTYPE=armv6 build/update-linux-sandbox.sh
+# Run chrome
+cd out/armv6
+./chrome
+
+
+Rebuilds
+--------
+
+In most cases a simple "ninja -C out/armv6 chrome" is all that is needed
+and the pi can run from out/armv6.
+
+To clean build "rm -rf out" and follow the build instructions from gngen.py
+
+
+Updating chromium from git
+--------------------------
+
+There is no script for this as the merges are prone to conflicts and it
+is much easier to sort them if you are doing stuff manually.
+
+If updating between major versions then mergeing tends to fail horribly
+so something along the lines of:
+
+# * Make sure there are no updates required and no untracked files
+pi-util/gitscan.py status
+# Tag source & make a patch file - patch file is useful when files are moved
+# as then git goes all unhelpful
+pi-util/settag.py -p mmal_2.13
+# As git stash will reset the brnch switch to a temp branch 1st
+pi-util/gitscan.py checkout -b stash/61/base
+pi-util/gitscan.py --gitscan-no-src reset {BASE}
+pi-util/gitscan.py --gitscan-no-src stash -u
+pi-util/gitscan.py --gitscan-no-src checkout {BASE}
+
+# Need to do src separately as the stash will lose pi-utils
+cat pi-util/pipaths.py
+git reset 56.0.2924.84
+git stash -u
+
+git checkout <new tag> -b test/67/mmal_2
+
+# Clean out old objects
+rm -rf obj
+# Beware that git clean might kill our sub-repos so so don't do it unless we
+# are sure it won't
+# git clean -dxf
+
+### Do the "get environment" stages of a new build
+./build/install-build-deps.sh
+./build/install-build-deps.sh --arm
+# Fetch & pull the other bits of the tree to sync.
+# As we are checking out a tag the --with_branch_heads is important
+gclient sync --with_branch_heads
+
+# Start rebuild
+git stash pop
+
+# Fix pipaths & make new branches (now so we don't forget later)
+sed "s/src_commit=.*/src_commit=\"$TAG\"/" pi-util/pipaths.py | tee t
+mv t pi-util/pipaths.py && git add pi-util/pipaths.py
+chmod 0755 pi-util/*.py pi-util/*.sh
+pi-util/gitscan.py --gitscan-no-src checkout -b test/66/mmal_2
+
+### Fix conflicts (there will be some)
+
+# Fix chrome major version for ffmpeg .so in pi-util/cplibs.sh and third_party//ffmpeg/BUILD.gn
+
+git commit
+### run through all other dirs we care about doing the same
+### Probably need to fix exec perms on pi-util scripts
+pi-util/syncroot.py <sysroot-ip>:
+pi-util/gngen.py
+### Fix up any new libpackage-dev that we need
+ninja ...
+### Fix up build disasters
+
+
+If updating within a major version mergeing seems to work reliably so my
+preferred method for achieving this goes:
+
+# Make sure everything is committed
+pi-util/gitscan.py status
+# Revert to base chromium checkout for old checkout
+pi-util/gitscan.py --gitscan-no-src checkout {BASE}
+# Merge new version into current base
+git fetch --all
+TAG=<new_tag>
+git merge $TAG
+# Fix conflicts - DEPS always seems to conflict
+git checkout $TAG -- DEPS
+# Update pi-util/pipaths.py to contain the new tag
+# Either commit now or later
+sed "s/src_commit=.*/src_commit=\"$TAG\"/" pi-util/pipaths.py | tee t
+mv t pi-util/pipaths.py && git add pi-util/pipaths.py
+git commit --no-edit
+# Get the rest of the tree
+gclient sync --with_branch_heads
+# Checkout our tree and merge the new base into it
+pi-util/gitscan.py --gitscan-no-src checkout test/72/mmal_3
+pi-util/gitscan.py --gitscan-no-src merge --no-edit {BASE}
+
+and we should be good to go.  At this point you can either clean build or
+not.  Chromes dependancy checks seem remarkably good so a simple build
+works nearly all the time.
+
+# Rebuild gn (clean)
+rm -rf out
+pi-util/gngen.py
+# Build armv7 ffmpeg
+ninja -C out/armv7 third_party/ffmpeg
+# Build chrome
+LD_LIBRARY_PATH=`pwd`/out/armv6/clang_x86_v8_arm ninja -C out/armv6 chrome chrome_sandbox
+
+
+Sysroots (one time only)
+------------------------
+
+1st you will need to get the dev files for a bunch of libs on your pi (or
+if you can get the right files by magic on your cross-compile m/c then
+that is good too).  In src/pi-util there is a shell script
+pi-install-dev.sh which lists all the libs I think are needed along with a
+helpful apt-get install so all you should need to do is run it on an
+appropriate pi.
+
+Next the appropriate bits need to be copied to
+build/linux/<sysroot-name>-sysroot. We use raspian_stretch_pi1 as the
+sysroot name in these instructions and in the example script files so you
+might well find it easiest to use the same name too
+
+The script pi-util/syncroot.sh that will copy the needed bits of a root to
+the right place and then fix the full path symlinks to be relative.  It
+uses rsync to copy the files so the src can contain a machine name
+
+pi-util/syncroot.sh my-pi: raspian_stretch_pi1
+
+The "raspian_stretch_pi1" can be omitted and syncroot will choose the current
+default sysroot name.
+
+Beware that there are ~8 rsync statements so if the rsync is operating
+over ssh then you may need to type your password 8 times...  Note also
+that the script appends -sysroot to the given name so don't add that
+yourself!
+
+If the pi root is updated then this script can / should be rerun to update
+the sysroot.
+
+
+
+Other notes on the tree
+-----------------------
+
+The definitive list of expected repos is in pi-util/pipaths.py
+
+The script pi-util/gitscan.py will perform the same git op on all the
+repos that are in use in the current patch set.  It has substitutions
+of {PATH} and {BASE} for the path to the current repo and the chromium
+commit on which the current branch is based
+
+The current dev branch is test/57/mmal_2
+
+Status of optional neon by build file:
+skia/BUILD.gn:                     yes
+build/secondary/third_party/libjpeg_turbo/BUILD.gn: yes
+third_party/libwebp/BUILD.gn:      yes
+third_party/openmax_dl/dl/BUILD.gn unused
+third_party/libyuv/BUILD.gn:       yes
+third_party/libyuv/libyuv.gni:     yes
+third_party/pdfium/skia/BUILD.gn:  unused
--- /dev/null
+++ b/pi-util/README.txt
@@ -0,0 +1,100 @@
+Release notes
+=============
+
+This version should run with gpu-mem=64 with the default switches. Having
+said that this will only allow for 1 stream.  If you are playing >1 stream
+(even transiently) then you will need more (say gpu_mem=128) and you will
+need to set the --mmal-decoders option to the desired max number. The code
+should give up cleanly if it cannot allocate a h/w video decoder and give
+the stream to old-style ffmpeg decode, but as it stands in many cases it
+thinks it has allocated a decoder cleanly only to find that it fails when
+it tries to use it.
+
+Needs firmware from "Sep 13 2016 17:01:56" or later to work properly
+("vcgencmd version" will give the date).
+
+There are a few command-line switches - in general you shouldn't use
+them!
+
+
+Decode and resizer options
+--------------------------
+
+--mmal-decode-opaque     Set the decoder to use opaque frames between
+decoder and resizer.  This should be faster than i420 but doesn't work
+with old firmware.  This is the default with newer firmware (>=
+2016-11-01). (see --mmal-decode-i420)
+
+--mmal-decode-i420       Set the decoder to use I420 frames between
+decoder and resizer.  This generates an unnecessary conversion but works
+with all firmware.  This is the default with older firmware (<
+2016-11-01). (see --mmal-decode-opaque)
+
+--mmal-low-delay         Force "low-delay" mode on the decoder pipe.  This
+reduces the number of buffered ES frames before the decoder.  It isn't
+exactly low-delay but is definitely lower than otherwise.  May have a
+slight performance penalty and increase the risk of stuttering.  This mode
+will be automatically set by Chrome for some streams.
+
+--mmal-resize-isp        Use ISP resize rather than resizer.  Is noticably
+faster but requires --mmal-frame-copy or --mmal-zero-copy and newer
+firmware.  This is the default with newer firmware  (>= 2016-11-01) and
+enough gpu memory to support --mmal-frame-copy.
+
+--mmal-resize-resizer    Use resizer rather than ISP. Slower than ISP
+resize but supports older firmware and --mmal-slice-copy which may be
+needed if GPU memory is very limited (as will be the case on a Pi1 with a
+default setup).
+
+Copy-modes
+----------
+
+These are modes for getting frames out of mmal.  Current default is
+--mmal-frame-copy if --mmal-resize-isp is the default resizer or it looks
+like the firmware doesn't support --mmal-slice-copy otherwise
+--mmal-slice-copy is the default. Explicit use of a copy mode option will
+override the default regardless of whether or not we think the firmware
+supports the selected option.  Only use one of of these flags.
+
+--mmal-zero-copy         Pass gpu frames directly to chrome.  Chrome
+buffers some frames and stalls if it doesn't get them. So this option
+needs 6+ gpu frames allocated.  This is now a legacy and testing option as
+--mmal-frame-copy is faster and you probably want to have gpu_mem=192 if
+you are going to use it. Default frame-buffers = 6 (8M each)
+
+--mmal-frame-copy        Copy frame at a time out of mmal to chrome.
+Currently the fastest option.  Needs 2+ gpu frames for plausible
+performance. Default frame-buffers = 2 (8M each).  You probably want
+gpu-mem=80 for 1 decoder with this option.
+
+--mmal-slice-copy        Copy frames out in 16-line slices.  Has the
+lowest memory overhead, but the highest CPU load.  If this is selected
+then --mmal-frame-buffers is the number of slice buffers. Default frame
+buffers = 16 (~122k each).
+
+Misc options
+------------
+
+--enable-logging=stderr This is a standard option for chrome but worth
+noting as the mmal code will print out its interpretation of the command
+line options passed to it along with how much GPU memory it has detected
+and the firmware date.
+
+--pi-patch-version       Print out the versions of Chromium and Pi
+patches.  Chrome will then terminate
+
+--mmal-decoders=<n>      Set the number of mmal decoders we wil try to
+create simultainiously. Default=1. If this number is exceeded then decoder
+init will fail and chrome will fallback to ffmpeg decode.  There is no
+panalty for setting this to a large number if you wish to have "unlimited"
+decoders.  However if it is set too big and there isn't the gpu mem to
+satisfy the requirements of the decode it may fail cleanly and revert to
+software (ffmpeg) decode or init may appear to succeed and decode then
+fails in an undefined manner.
+
+--mmal-frame-buffers=<n> Set the number of gpu "frame" buffers (see
+--mmal-xxx-copy). Change with care.
+
+--mmal-red-pixel         Puts a red square in the top left of a frame
+decoded by mmal so you can tell that it is active.  Doesn't work if
+zero-copy is set.
--- /dev/null
+++ b/pi-util/cplibs.sh
@@ -0,0 +1,19 @@
+set -e
+
+FFNAME=libffmpeg_chrome.so.66
+LIBROOT=/usr/lib/arm-linux-gnueabihf
+
+if [ ! -d $LIBROOT ]; then
+  echo Can\'t find $LIBROOT
+  echo Are you sure you are running this on a Pi?
+  exit 1
+fi
+
+echo Copying $FFNAME from armv6/7 to $LIBROOT/...
+
+cp out/armv7/$FFNAME /tmp
+sudo cp /tmp/$FFNAME $LIBROOT/neon/vfp
+cp out/armv6/$FFNAME /tmp
+sudo cp /tmp/$FFNAME $LIBROOT
+
+
--- /dev/null
+++ b/pi-util/defargs_armv6.gn
@@ -0,0 +1,32 @@
+# See "gn args <out_dir> --list" for available build arguments.
+is_debug = false
+target_cpu = "arm"
+target_os = "linux"
+
+arm_float_abi = "hard"
+arm_use_neon = false
+arm_optionally_use_neon = false
+arm_version = 6
+arm_use_thumb = false
+arm_arch = "armv6z"
+
+# Separate out so we can have both arm v6 & v7 versions
+#is_component_ffmpeg = true
+
+# tcmalloc doesn't like armv6 by default
+#use_allocator = "none"
+
+# Pulse deprecated on Pi
+use_pulseaudio = false
+
+# Could use system libjpeg but go with chromiums version
+# use_system_libjpeg = true
+#use_libjpeg_turbo = true
+
+# We want H.264 in ffmpeg
+ffmpeg_branding = "Chrome"
+proprietary_codecs = true
+
+# This crashes the compiler!
+rtc_use_h264 = false
+
--- /dev/null
+++ b/pi-util/defargs_armv7.gn
@@ -0,0 +1,22 @@
+# Build arguments go here. Examples:
+#   is_component_build = true
+#   is_debug = false
+# See "gn args <out_dir> --list" for available build arguments.
+is_debug = false
+target_cpu = "arm"
+target_os = "linux"
+
+arm_float_abi = "hard"
+arm_use_neon = true
+arm_optionally_use_neon = false
+arm_version = 7
+arm_arch = "armv7-a"
+
+# Pulse deprecated on Pi
+use_pulseaudio = false
+
+#is_component_ffmpeg = true
+# tcmalloc doesn't like armv6 by default
+#use_allocator = "none"
+ffmpeg_branding = "Chrome"
+proprietary_codecs = true
--- /dev/null
+++ b/pi-util/dodiff.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python
+
+import os, sys, string, subprocess
+
+# Local
+import gitscan, pipaths
+
+def doscan(outfile = sys.stdout):
+    revdict = gitscan.revdict()
+
+    cpath = gitscan.basepath()
+
+    for p in pipaths.pipaths:
+        os.chdir(os.path.join(cpath, p))
+        diff = subprocess.check_output(["git", "diff", revdict[p]])
+
+        header = False
+        lines = diff.split("\n")
+        # Remove terminal blank line
+        if lines[-1] == "":
+            lines.pop()
+        for line in lines:
+            if line.startswith("diff --git "):
+                header = True
+            if header:
+                line = string.replace(line, " a/", " a/" + p + "/")
+                line = string.replace(line, " b/", " b/" + p + "/")
+            if line.startswith("+++ "):
+                header = False
+            print >> outfile, line
+
+
+if __name__ == '__main__':
+    doscan()
+
--- /dev/null
+++ b/pi-util/gitscan.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python
+
+import os, string, subprocess, sys
+
+# Local
+import pipaths
+
+def revdict():
+    revdict = {'src':pipaths.src_commit}
+    stuff = subprocess.check_output(["gclient", "revinfo"])
+    for line in stuff.split("\n"):
+        pathn = line.find(":")
+        commitn = line.rfind("@")
+        if pathn != -1 and commitn != -1 :
+             revdict[line[:pathn]] = line[commitn+1:]
+    return revdict
+
+def basepath():
+    cpath = os.getcwd()
+    if not cpath.endswith("/src"):
+        raise "CWD doesn't end with /src"
+
+    return cpath[:-4]
+
+def gitscan(args, nosrc = False, quiet=False):
+    rv = 0
+
+    oldcwd = os.getcwd()
+    rdict = revdict()
+    cpath = basepath()
+
+    for p in pipaths.pipaths:
+        if nosrc and p == "src":
+            continue
+
+        os.chdir(os.path.join(cpath, p))
+
+        gitargs = [string.replace(string.replace(a, "{PATH}", p), "{BASE}", rdict[p]) for a in args]
+        gitargs[0:0] = ["git"]
+
+        if not quiet:
+            print ">>>", p
+
+        rv = subprocess.call(gitargs)
+        if rv != 0:
+            if not quiet:
+                print "Git returned non-zero error code", rv, "\ncwd =", os.getcwd(), "\ncmd =", gitargs
+            break
+
+    os.chdir(oldcwd)
+    return rv
+
+
+if __name__ == '__main__':
+
+    if len(sys.argv) < 2:
+        print "Usage: gitscan [--gitscan-no-src] <git cmd>"
+        print "  substitutes {PATH} and {BASE}"
+        exit(0)
+
+    nosrc = False
+
+    if sys.argv[1] == "--gitscan-no-src":
+        nosrc = True
+        del sys.argv[1]
+
+    gitscan(sys.argv[1:], nosrc)
+
+
--- /dev/null
+++ b/pi-util/gngen.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python
+
+import os, ast, fileinput, subprocess, sys
+
+def docopy(name, vars):
+
+    dest_dir = os.path.join("out", name)
+    src_file = os.path.join("pi-util", "defargs_" + name + ".gn")
+
+    # Ignore any errors making dir (in particular it already exists)
+    try:
+        os.makedirs(dest_dir)
+    except:
+        pass
+
+    dargs = open(os.path.join(dest_dir, "args.gn"), "wt")
+    dargs.write('# -- copied from: ' + src_file + '\n')
+
+    for line in fileinput.input(src_file):
+        dargs.write(line)
+
+    dargs.write('# -- created by ' + sys.argv[0] + '\n')
+    dargs.write('target_sysroot = "' + vars["target_sysroot"] + '"\n')
+    dargs.write('google_api_key = "' + vars["google_api_key"] + '"\n')
+    dargs.write('google_default_client_id = "' + vars["google_default_client_id"] + '"\n')
+    dargs.write('google_default_client_secret = "' + vars["google_default_client_secret"] + '"\n')
+
+    dargs.close()
+
+    subprocess.check_call(["gn", "gen", dest_dir])
+
+
+if __name__ == '__main__':
+    gyp_vars = {}
+    gypi = os.path.join(os.environ["HOME"], ".gyp", "include.gypi")
+    if os.path.isfile(gypi):
+        print "Importing from:", gypi
+        gyps = open(gypi).read(-1)
+        gyp_vars = ast.literal_eval(gyps)["variables"]
+
+    gyp_vars["target_sysroot"] = os.path.abspath("build/linux/raspian_stretch_pi1-sysroot")
+
+    docopy("armv6", gyp_vars)
+    docopy("armv7", gyp_vars)
+
+
+
--- /dev/null
+++ b/pi-util/pi-install-dev.sh
@@ -0,0 +1,40 @@
+# Install set to build appropriate root on a clean pi
+
+sudo apt-get install \
+comerr-dev \
+libasound2-dev \
+libatk1.0-dev \
+libcap-dev \
+libcups2-dev \
+libexif-dev \
+libffi-dev \
+libgconf2-dev \
+libgl1-mesa-dev \
+libgnome-keyring-dev \
+gtk+-3.0 \
+libjpeg-dev \
+libkrb5-dev \
+libnspr4-dev \
+libnss3-dev \
+libpam0g-dev \
+libpango1.0-dev \
+libpci-dev \
+libpcre3-dev \
+libssl-dev \
+libudev-dev \
+libxcb1-dev \
+libxcb-shm0-dev \
+libxss-dev \
+libxt-dev \
+libxtst-dev \
+mesa-common-dev \
+uuid-dev
+
+# Pulse (hopefully) disabled
+# libpulse-dev \
+
+# Obviously replace paths appropriately below
+# Now run pi-util/syncroot.sh on the compile m/c to grab the appropriate
+# bits of the root and fix up the paths.
+# e.g. ON COMPILE M/C in src dir:
+# pi-util/syncroot.sh my-pi: raspian_jessie_pi1
--- /dev/null
+++ b/pi-util/pipaths.py
@@ -0,0 +1,11 @@
+pipaths=[
+    "src",
+    "src/native_client",
+    "src/third_party/ffmpeg",
+    "src/third_party/libjpeg_turbo",
+    "src/third_party/libyuv",
+    "src/third_party/pdfium",
+    "src/third_party/skia"]
+
+# Our base tag or commit no
+src_commit="72.0.3626.110"
--- /dev/null
+++ b/pi-util/rebase_liblinks.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python
+
+import os, sys
+from stat import *
+
+def walktree(top, callback, n, prefix):
+    '''recursively descend the directory tree rooted at top,
+       calling the callback function for each regular file'''
+
+    for f in os.listdir(top):
+        pathname = os.path.join(top, f)
+        mode = os.lstat(pathname).st_mode
+        if S_ISDIR(mode):
+            # It's a directory, recurse into it
+            walktree(pathname, callback, n+1, prefix)
+        elif S_ISLNK(mode):
+            # It's a file, call the callback function
+            callback(pathname, os.readlink(pathname), n, prefix)
+
+def visitfile(file, linkname, n, prefix):
+    if (linkname.startswith(prefix + 'lib/')):
+        newlink = "../" * n + linkname[len(prefix):]
+        print 'relinking', file, "->", newlink
+        os.remove(file)
+        os.symlink(newlink, file)
+
+if __name__ == '__main__':
+    argc = len(sys.argv)
+    if argc == 2:
+        walktree(sys.argv[1], visitfile, 0, "/")
+    elif argc == 3:
+        walktree(sys.argv[1], visitfile, 0, sys.argv[2])
+    else:
+        print "rebase_liblinks.py <local root> [<old sysroot>]"
+
+
+
--- /dev/null
+++ b/pi-util/settag.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python
+
+import sys, os, subprocess
+
+# Local
+import pipaths
+import gitscan
+import dodiff
+import argparse
+
+def set_version(verstr):
+    pathname = "components/version_info/pi_patch_version_values.h"
+
+    with open(pathname, "wt") as f:
+        f.write("// Pi patch version - generated by pi-util/settag.py\n")
+        f.write('#define PI_PATCH_VERSION_STRING "' + verstr + '"\n')
+
+    subprocess.check_call(["git", "add", pathname])
+    subprocess.check_call(["git", "commit", "-m", "Update pi patch version to " + verstr])
+
+
+def set_tag(verstr):
+    newtag = "pi/" + pipaths.src_commit + "/" + verstr
+    print "Setting tag: " + newtag
+    if gitscan.gitscan(["tag", newtag], quiet=True) != 0:
+        print "Tagging failed"
+        sys.exit(1)
+
+def set_tag_and_version(verstr):
+    set_version(verstr)
+    set_tag(verstr)
+
+if __name__ == '__main__':
+    argp = argparse.ArgumentParser(
+        description="Sets version info in pi_patch_version_values & tags source tree with it")
+    argp.add_argument("-p", action='store_true', help="Generate patch file")
+    argp.add_argument("verstr", help="Pi patch version string")
+    args = argp.parse_args()
+
+    patchpath = os.path.join("..", "v" + pipaths.src_commit + "_" + args.verstr + ".patch")
+
+    if args.p and os.path.exists(patchpath):
+        print "Patchfile", patchpath, "already exists"
+        sys.exit(1)
+
+    print "-- Checking all committed"
+    if gitscan.gitscan(["diff", "--name-status", "--exit-code"], quiet=True) != 0:
+        print "Status check failed - commit everything and try again"
+        sys.exit(1)
+
+    print "-- Generating & committing pi_patch_version_values.h"
+    set_version(args.verstr)
+    print "-- Generating tags"
+    set_tag(args.verstr)
+
+    if args.p:
+        print "-- Generating patch file: ", patchpath
+        with open(patchpath, "wt") as f:
+            dodiff.doscan(f)
+
--- /dev/null
+++ b/pi-util/syncroot.sh
@@ -0,0 +1,51 @@
+set -e
+
+if [ "$1" == "" ]; then
+  echo Usage: $0 \<src_dir\> [\<rootname\>]
+  echo src_dir is a source for rsync so may contain m/c name.
+  echo rootname will be set to \"raspian_stretch_pi1\" if missing
+  echo e.g.: pi-util/syncroot.sh my-pi: raspian_stretch_pi1
+  exit 1
+fi
+
+SYSROOT_NAME=$2
+if [ "$SYSROOT_NAME" == "" ]; then
+  SYSROOT_NAME=raspian_stretch_pi1
+fi
+
+DST_ROOT=`gclient root`
+DST=$DST_ROOT/src/build/linux/$SYSROOT_NAME-sysroot
+SRC=$1
+
+if [ ! -d $DST_ROOT/src/build/linux ]; then
+  echo We don\'t appear to be in a Chrome build tree
+  exit 1
+fi
+
+echo Sync src:  $SRC
+echo Sync dest: $DST
+
+mkdir -p $DST/lib
+mkdir -p $DST/opt/vc/include
+mkdir -p $DST/usr/lib/pkgconfig
+mkdir -p $DST/usr/bin
+mkdir -p $DST/usr/share
+
+#### MUST NOT include /opt/vc/include/*GL*
+# Creates conflicts with GL includes inside Chrome
+
+rsync -rl $SRC/lib/arm-linux-gnueabihf $DST/lib
+rsync -rl $SRC/opt/vc/lib $DST/opt/vc
+rsync -rl $SRC/opt/vc/include/interface $DST/opt/vc/include
+rsync -rl $SRC/usr/lib/arm-linux-gnueabihf $DST/usr/lib
+rsync -rl $SRC/usr/lib/gcc $DST/usr/lib
+rsync -rl $SRC/usr/include $DST/usr
+rsync -rl $SRC/usr/share/pkgconfig $DST/usr/share
+rsync -rl $SRC/usr/bin/cups-config $DST/usr/bin
+
+cd $DST/usr/lib/pkgconfig
+ln -sf ../arm-linux-gnueabihf/pkgconfig/* .
+cd ../../../../../..
+pi-util/rebase_liblinks.py $DST
+
+
--- a/services/service_manager/sandbox/linux/bpf_gpu_policy_linux.cc
+++ b/services/service_manager/sandbox/linux/bpf_gpu_policy_linux.cc
@@ -48,6 +48,11 @@
     // (MAP_LOCKED | MAP_EXECUTABLE | MAP_32BIT)
     case __NR_mmap:
 #endif
+#ifdef USE_X11
+    // Wanted for shm generation for ImageX11
+    case __NR_memfd_create:
+    case __NR_ftruncate64:
+#endif
     // We also hit this on the linux_chromeos bot but don't yet know what
     // weird flags were involved.
     case __NR_mprotect:
--- a/services/service_manager/sandbox/linux/bpf_renderer_policy_linux.cc
+++ b/services/service_manager/sandbox/linux/bpf_renderer_policy_linux.cc
@@ -27,6 +27,8 @@
   _IOW(LOCAL_DMA_BUF_BASE, 0, struct local_dma_buf_sync)
 
 using sandbox::SyscallSets;
+using sandbox::bpf_dsl::If;
+using sandbox::bpf_dsl::AnyOf;
 using sandbox::bpf_dsl::Allow;
 using sandbox::bpf_dsl::Arg;
 using sandbox::bpf_dsl::Error;
@@ -36,14 +38,18 @@
 
 namespace {
 
+#define ISMAGIC(r, x) (((r) & (_IOC_TYPEMASK << _IOC_TYPESHIFT)) == ((x) << _IOC_TYPESHIFT))
+
 ResultExpr RestrictIoctl() {
   const Arg<unsigned long> request(1);
-  return Switch(request)
+  // Pi - allow all VCHIQ ioctls and the VMCS_SM ioctls
+  return If(AnyOf(ISMAGIC(request, 0xc4), ISMAGIC(request, 'I')), Allow()).Else(
+    Switch(request)
       .SANDBOX_BPF_DSL_CASES((static_cast<unsigned long>(TCGETS), FIONREAD),
                              Allow())
       .SANDBOX_BPF_DSL_CASES(
           (static_cast<unsigned long>(LOCAL_DMA_BUF_IOCTL_SYNC)), Allow())
-      .Default(sandbox::CrashSIGSYSIoctl());
+      .Default(sandbox::CrashSIGSYSIoctl()));
 }
 
 }  // namespace
--- a/services/service_manager/sandbox/linux/sandbox_linux.h
+++ b/services/service_manager/sandbox/linux/sandbox_linux.h
@@ -61,6 +61,7 @@
     DEPRECATED_METHOD_GET_STYLE_FOR_STRIKE,
     METHOD_MAKE_SHARED_MEMORY_SEGMENT,
     DEPRECATED_METHOD_MATCH_WITH_FALLBACK,
+    METHOD_OPEN_DEV_VCHIQ,
   };
 
   // These form a bitmask which describes the conditions of the Linux sandbox.
--- a/services/viz/public/cpp/compositing/transferable_resource_struct_traits.cc
+++ b/services/viz/public/cpp/compositing/transferable_resource_struct_traits.cc
@@ -33,6 +33,7 @@
   out->is_backed_by_surface_texture = data.is_backed_by_surface_texture();
   out->wants_promotion_hint = data.wants_promotion_hint();
 #endif
+  out->stride = data.stride();
   return true;
 }
 
--- a/services/viz/public/cpp/compositing/transferable_resource_struct_traits.h
+++ b/services/viz/public/cpp/compositing/transferable_resource_struct_traits.h
@@ -76,6 +76,10 @@
     return resource.color_space;
   }
 
+  static uint32_t stride(const viz::TransferableResource& resource) {
+    return resource.stride;
+  }
+
   static bool Read(viz::mojom::TransferableResourceDataView data,
                    viz::TransferableResource* out);
 };
--- a/services/viz/public/interfaces/compositing/compositor_frame_sink.mojom
+++ b/services/viz/public/interfaces/compositing/compositor_frame_sink.mojom
@@ -93,4 +93,8 @@
 
   // Returns resources sent to SubmitCompositorFrame to be reused or freed.
   ReclaimResources(array<ReturnedResource> resources);
+
+  // Frame resized - if we can resize the video to this we should get away
+  // without later resizing
+  DidStretchFrame(uint32 width, uint32 height);
 };
--- a/services/viz/public/interfaces/compositing/transferable_resource.mojom
+++ b/services/viz/public/interfaces/compositing/transferable_resource.mojom
@@ -46,4 +46,5 @@
   bool is_backed_by_surface_texture;
   bool wants_promotion_hint;
   gfx.mojom.ColorSpace color_space;
+  uint32 stride;
 };
--- a/third_party/blink/renderer/platform/graphics/begin_frame_provider.h
+++ b/third_party/blink/renderer/platform/graphics/begin_frame_provider.h
@@ -50,6 +50,7 @@
       const WTF::Vector<viz::ReturnedResource>& resources) final {
     NOTIMPLEMENTED();
   }
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
 
   // viz::mojom::blink::EmbeddedFrameSinkClient implementation.
   void OnFirstSurfaceActivation(const viz::SurfaceInfo& surface_info) final {
--- a/third_party/blink/renderer/platform/graphics/canvas_resource_dispatcher.h
+++ b/third_party/blink/renderer/platform/graphics/canvas_resource_dispatcher.h
@@ -71,6 +71,7 @@
   void OnBeginFramePausedChanged(bool paused) final{};
   void ReclaimResources(
       const WTF::Vector<viz::ReturnedResource>& resources) final;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
 
   void DidAllocateSharedBitmap(mojo::ScopedSharedBufferHandle buffer,
                                ::gpu::mojom::blink::MailboxPtr id);
--- a/third_party/blink/renderer/platform/graphics/video_frame_submitter.cc
+++ b/third_party/blink/renderer/platform/graphics/video_frame_submitter.cc
@@ -422,6 +422,12 @@
   resource_provider_->ReceiveReturnsFromParent(std_resources);
 }
 
+void VideoFrameSubmitter::DidStretchFrame(uint32_t width, uint32_t height)
+{
+  if (video_frame_provider_)
+    video_frame_provider_->DidStretchFrame(width, height);
+}
+
 void VideoFrameSubmitter::DidAllocateSharedBitmap(
     mojo::ScopedSharedBufferHandle buffer,
     const viz::SharedBitmapId& id) {
--- a/third_party/blink/renderer/platform/graphics/video_frame_submitter.h
+++ b/third_party/blink/renderer/platform/graphics/video_frame_submitter.h
@@ -81,6 +81,7 @@
   void OnBeginFramePausedChanged(bool paused) override {}
   void ReclaimResources(
       const WTF::Vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override;
 
   // viz::SharedBitmapReporter implementation.
   void DidAllocateSharedBitmap(mojo::ScopedSharedBufferHandle,
--- a/third_party/tcmalloc/gperftools-2.0/chromium/src/base/arm_instruction_set_select.h
+++ b/third_party/tcmalloc/gperftools-2.0/chromium/src/base/arm_instruction_set_select.h
@@ -52,7 +52,8 @@
     defined(__ARM_ARCH_6K__) || \
     defined(__ARM_ARCH_6Z__) || \
     defined(__ARM_ARCH_6T2__) || \
-    defined(__ARM_ARCH_6ZK__)
+    defined(__ARM_ARCH_6ZK__) || \
+    defined(__ARM_ARCH_6KZ__)
 # define ARMV6 1
 #endif
 
--- a/third_party/tcmalloc/gperftools-2.0/chromium/src/base/atomicops-internals-arm-v6plus.h
+++ b/third_party/tcmalloc/gperftools-2.0/chromium/src/base/atomicops-internals-arm-v6plus.h
@@ -111,9 +111,16 @@
   return res;
 }
 
+#if defined(ARMV7)
 inline void MemoryBarrier() {
   __asm__ __volatile__("dmb" : : : "memory");
 }
+#else
+inline void MemoryBarrier() {
+  __asm__ __volatile__("mcr p15, 0, %0, c7, c10, 5"
+                        : : "r" (0) : "memory");
+}
+#endif
 
 inline Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
                                         Atomic32 increment) {
@@ -122,7 +129,11 @@
       "1:\n"
       "ldrex  %1, [%2]\n"
       "add    %1, %1, %3\n"
+#if defined(ARMV7)
       "dmb\n"
+#else
+      "mcr p15, 0, %0, c7, c10, 5\n"
+#endif
       "strex  %0, %1, [%2]\n"
       "teq    %0, #0\n"
       "bne    1b"
@@ -248,7 +259,11 @@
       "ldrexd  %1, [%2]\n"
       "adds    %Q1, %Q1, %Q3\n"
       "adc     %R1, %R1, %R3\n"
+#if defined(ARMV7)
       "dmb\n"
+#else
+      "mcr p15, 0, %0, c7, c10, 5\n"
+#endif
       "strexd  %0, %1, [%2]\n"
       "teq     %0, #0\n"
       "bne     1b"
--- a/third_party/tcmalloc/gperftools-2.0/chromium/src/base/cycleclock.h
+++ b/third_party/tcmalloc/gperftools-2.0/chromium/src/base/cycleclock.h
@@ -126,7 +126,8 @@
 #elif defined(_MSC_VER)
     return __rdtsc();
 #elif defined(ARMV3)
-#if defined(ARMV6)  // V6 is the earliest arch that has a standard cyclecount
+#if defined(ARMV7)  // V6 is the earliest arch that has a standard cyclecount
+    // * Illegal instruction on Pi1 :-( Proably kernel mode only
     uint32 pmccntr;
     uint32 pmuseren;
     uint32 pmcntenset;
@@ -161,5 +162,4 @@
   }
 };
 
-
 #endif  // GOOGLE_BASE_CYCLECLOCK_H_
--- a/ui/android/delegated_frame_host_android.h
+++ b/ui/android/delegated_frame_host_android.h
@@ -152,6 +152,7 @@
                         feedbacks) override;
   void ReclaimResources(
       const std::vector<viz::ReturnedResource>& resources) override;
+  void DidStretchFrame(uint32_t width, uint32_t height) override {}
   void OnBeginFramePausedChanged(bool paused) override;
 
   // viz::ExternalBeginFrameSourceClient implementation.
--- a/native_client/src/include/concurrency_ops.h
+++ b/native_client/src/include/concurrency_ops.h
@@ -32,14 +32,13 @@
 #elif NACL_ARCH(NACL_BUILD_ARCH) == NACL_arm
 
 static INLINE void NaClWriteMemoryBarrier(void) {
+#if __ARM_ARCH >= 7
   /* Note that this depends on ARMv7. */
   __asm__ __volatile__("dsb");
-
-  /*
-   * We could support ARMv6 by instead using:
-   * __asm__ __volatile__("mcr p15, 0, %0, c7, c10, 5"
-   *                      : : "r" (0) : "memory");
-   */
+#else
+ __asm__ __volatile__("mcr p15, 0, %0, c7, c10, 5"
+                      : : "r" (0) : "memory");
+#endif
 }
 
 #elif NACL_ARCH(NACL_BUILD_ARCH) == NACL_mips
--- a/third_party/ffmpeg/chromium/config/Chrome/linux/arm/config.h
+++ b/third_party/ffmpeg/chromium/config/Chrome/linux/arm/config.h
@@ -40,7 +40,7 @@
 #define ARCH_X86_64 0
 #define HAVE_ARMV5TE 1
 #define HAVE_ARMV6 1
-#define HAVE_ARMV6T2 1
+#define HAVE_ARMV6T2 0
 #define HAVE_ARMV8 0
 #define HAVE_NEON 0
 #define HAVE_VFP 1
@@ -85,7 +85,7 @@
 #define HAVE_MMI 0
 #define HAVE_ARMV5TE_EXTERNAL 1
 #define HAVE_ARMV6_EXTERNAL 1
-#define HAVE_ARMV6T2_EXTERNAL 1
+#define HAVE_ARMV6T2_EXTERNAL 0
 #define HAVE_ARMV8_EXTERNAL 0
 #define HAVE_NEON_EXTERNAL 0
 #define HAVE_VFP_EXTERNAL 1
@@ -130,7 +130,7 @@
 #define HAVE_MMI_EXTERNAL 0
 #define HAVE_ARMV5TE_INLINE 1
 #define HAVE_ARMV6_INLINE 1
-#define HAVE_ARMV6T2_INLINE 1
+#define HAVE_ARMV6T2_INLINE 0
 #define HAVE_ARMV8_INLINE 0
 #define HAVE_NEON_INLINE 0
 #define HAVE_VFP_INLINE 1
@@ -570,7 +570,7 @@
 #define CONFIG_NEON_CLOBBER_TEST 0
 #define CONFIG_OSSFUZZ 0
 #define CONFIG_PIC 1
-#define CONFIG_THUMB 1
+#define CONFIG_THUMB 0
 #define CONFIG_VALGRIND_BACKTRACE 0
 #define CONFIG_XMM_CLOBBER_TEST 0
 #define CONFIG_BSFS 1
