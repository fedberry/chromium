From 24cd13229bb623fd0afd10b304bf99e2c72f79a9 Mon Sep 17 00:00:00 2001
From: Ben Avison <bavison@riscosopen.org>
Date: Fri, 22 Feb 2019 17:46:05 +0000
Subject: [PATCH 7/8] ARM NEON: Add inline assembly version of memset32(),
 scheduled for Cortex-A53

Benchmarks show same speed to RAM, 2,2x faster to L1 cache

Implemented only for AArch32; AArch64 builds still use old intrinsics code
---
 src/opts/SkUtils_opts.h | 74 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 74 insertions(+)

--- a/third_party/skia/src/opts/SkUtils_opts.h
+++ b/third_party/skia/src/opts/SkUtils_opts.h
@@ -34,7 +34,81 @@
         memsetT(buffer, value, count);
     }
     /*not static*/ inline void memset32(uint32_t buffer[], uint32_t value, int count) {
+#if defined(SK_ARM_HAS_NEON) && !defined(__ARM_64BIT_STATE)
+        uint32_t *p1 = buffer;
+        uint32_t off;
+        __asm__ volatile (
+                "vdup.32     q0, %[p2]                     \n\t"
+                "cmp         %[n], #3+16                   \n\t"
+                "vdup.32     q1, %[p2]                     \n\t"
+                "blo         20f                           \n\t"
+
+                // Long case (at least one 16-byte-aligned 64-byte block)
+                "ands        %[off], %[buffer], #12        \n\t"
+                "bne         15f                           \n\t"
+
+                // 16-byte aligned. Set up inner loop
+                "10:                                       \n\t"
+                "mov         %[off], #64                   \n\t"
+                "sub         %[n], #16                     \n\t"
+                "add         %[p2], %[p1], #32             \n\t"
+
+                // Inner loop
+                "11:                                       \n\t"
+                "vst1.32     {q0-q1}, [%[p1] :128], %[off] \n\t"
+                "subs        %[n], #16                     \n\t"
+                "vst1.32     {q0-q1}, [%[p2] :128], %[off] \n\t"
+                "bhs         11b                           \n\t"
+
+                // Handle trailing 1..15 words
+                "12:                                       \n\t"
+                "lsls        %[n], #29                     \n\t"
+                "bcc         1f                            \n\t"
+                "vst1.32     {q0-q1}, [%[p1]]!             \n\t"
+                "1:                                        \n\t"
+                "bpl         1f                            \n\t"
+                "vst1.32     {q0}, [%[p1]]!                \n\t"
+                "1:                                        \n\t"
+                "lsls        %[n], #2                      \n\t"
+                "it          cs                            \n\t"
+                "vstmcs      %[p1]!, {d0}                  \n\t"
+                "it          mi                            \n\t"
+                "vstmmi      %[p1]!, {s0}                  \n\t"
+                "b           90f                           \n\t"
+
+                // Handle first 1..3 words to achieve 16-byte alignment
+                "15:                                       \n\t"
+                "rsb         %[off], #16                   \n\t"
+                "sub         %[n], %[off], lsr #2          \n\t"
+                "lsls        %[off], #29                   \n\t"
+                "it          mi                            \n\t"
+                "vstmmi      %[p1]!, {s0}                  \n\t"
+                "it          cs                            \n\t"
+                "vstmcs      %[p1]!, {d0}                  \n\t"
+                "b           10b                           \n\t"
+
+                // Short case
+                "20:                                       \n\t"
+                "cmp         %[n], #8                      \n\t"
+                "blo         12b                           \n\t"
+                "sub         %[n], #8                      \n\t"
+                "vst1.8      {q0-q1}, [%[p1]]!             \n\t"
+                "b           12b                           \n\t"
+
+                "90:                                       \n\t"
+        : // Outputs
+                 [p2]"+r"(value),
+                  [n]"+r"(count),
+                 [p1]"+r"(p1),
+                [off]"=&r"(off)
+        : // Inputs
+                [buffer]"r"(buffer)
+        : // Clobbers
+                "cc", "memory"
+        );
+#else
         memsetT(buffer, value, count);
+#endif
     }
     /*not static*/ inline void memset64(uint64_t buffer[], uint64_t value, int count) {
         memsetT(buffer, value, count);
