From 65f87e3eeebc9ca27aeb955aac10aa3847edae4f Mon Sep 17 00:00:00 2001
From: Ben Avison <bavison@riscosopen.org>
Date: Thu, 21 Feb 2019 16:52:57 +0000
Subject: [PATCH 5/8] Replace blend_row_A8() with SkOpts function
 blit_row_s32a_a8() to permit platform-specific optimizations

---
 src/core/SkBlitter_ARGB32.cpp | 21 +++------------------
 src/core/SkOpts.cpp           |  1 +
 src/core/SkOpts.h             |  1 +
 src/opts/SkBlitMask_opts.h    | 18 ++++++++++++++++++
 4 files changed, 23 insertions(+), 18 deletions(-)

--- a/third_party/skia/src/core/SkBlitter_ARGB32.cpp
+++ b/third_party/skia/src/core/SkBlitter_ARGB32.cpp
@@ -11,6 +11,7 @@
 #include "SkShader.h"
 #include "SkUtils.h"
 #include "SkXfermodePriv.h"
+#include "SkBlitMask_opts.h"
 
 static inline int upscale_31_to_32(int value) {
     SkASSERT((unsigned)value <= 31);
@@ -1147,23 +1148,6 @@
     }
 }
 
-static void blend_row_A8(SkPMColor* dst, const void* vmask, const SkPMColor* src, int n) {
-    auto mask = (const uint8_t*)vmask;
-
-#ifdef SK_SUPPORT_LEGACY_A8_MASKBLITTER
-    for (int i = 0; i < n; ++i) {
-        if (mask[i]) {
-            dst[i] = SkBlendARGB32(src[i], dst[i], mask[i]);
-        }
-    }
-#else
-    Sk4px::MapDstSrcAlpha(n, dst, src, mask, [](const Sk4px& d, const Sk4px& s, const Sk4px& aa) {
-        const auto s_aa = s.approxMulDiv255(aa);
-        return s_aa + d.approxMulDiv255(s_aa.alphas().inv());
-    });
-#endif
-}
-
 static void blend_row_A8_opaque(SkPMColor* dst, const void* vmask, const SkPMColor* src, int n) {
     auto mask = (const uint8_t*)vmask;
 
@@ -1276,7 +1260,8 @@
         if (mask.fFormat == SkMask::kA8_Format && opaque) {
             blend_row = blend_row_A8_opaque;
         } else if (mask.fFormat == SkMask::kA8_Format) {
-            blend_row = blend_row_A8;
+            // blend_row_A8 has been ported to SkOpts, but not the others yet
+            blend_row = SkOpts::blit_row_s32a_a8;
         } else if (mask.fFormat == SkMask::kLCD16_Format && opaque) {
             blend_row = blend_row_LCD16_opaque;
         } else if (mask.fFormat == SkMask::kLCD16_Format) {
--- a/third_party/skia/src/core/SkOpts.cpp
+++ b/third_party/skia/src/core/SkOpts.cpp
@@ -54,6 +54,7 @@
     DEFINE_DEFAULT(create_xfermode);
 
     DEFINE_DEFAULT(blit_mask_d32_a8);
+    DEFINE_DEFAULT(blit_row_s32a_a8);
 
     DEFINE_DEFAULT(blit_row_s32a_opaque);
 
--- a/third_party/skia/src/core/SkOpts.h
+++ b/third_party/skia/src/core/SkOpts.h
@@ -26,6 +26,7 @@
     extern SkXfermode* (*create_xfermode)(SkBlendMode);
 
     extern void (*blit_mask_d32_a8)(SkPMColor*, size_t, const SkAlpha*, size_t, SkColor, int, int);
+    extern void (*blit_row_s32a_a8)(SkPMColor*, const void*, const SkPMColor*, int);
     extern void (*blit_row_s32a_opaque)(SkPMColor*, const SkPMColor*, int, U8CPU);
 
     // Swizzle input into some sort of 8888 pixel, {premul,unpremul} x {rgba,bgra}.
--- a/third_party/skia/src/opts/SkBlitMask_opts.h
+++ b/third_party/skia/src/opts/SkBlitMask_opts.h
@@ -201,6 +201,24 @@
     }
 }
 
+/*not static*/ inline
+void blit_row_s32a_a8(SkPMColor* dst, const void* vmask, const SkPMColor* src, int n) {
+    auto mask = (const uint8_t*)vmask;
+
+#ifdef SK_SUPPORT_LEGACY_A8_MASKBLITTER
+    for (int i = 0; i < n; ++i) {
+        if (mask[i]) {
+            dst[i] = SkBlendARGB32(src[i], dst[i], mask[i]);
+        }
+    }
+#else
+    Sk4px::MapDstSrcAlpha(n, dst, src, mask, [](const Sk4px& d, const Sk4px& s, const Sk4px& aa) {
+        const auto s_aa = s.approxMulDiv255(aa);
+        return s_aa + d.approxMulDiv255(s_aa.alphas().inv());
+    });
+#endif
+}
+
 }  // SK_OPTS_NS
 
 #endif//SkBlitMask_opts_DEFINED
